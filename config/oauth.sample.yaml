settings:
  oauthlogin.enabled: true
  # path 'redirect-after-login' triggers frontend to route back to page where status 401 was raised.
  oauthlogin.redirectAfterLogin: \#/redirect-after-login # can be relative to global.serverURL or absolute starting with http(s)://
  oauthlogin.redirectAfterLoginFailure: \#/ # can be relative to global.serverURL or absolute starting with http(s)://
  oauthlogin.stateHashSecret: secret # a secret that is used to hash the session state, used for CSRF (cross-site request forgery)

  oauthlogin.identityProviders:
    linkedin:
      handler: linkedin
      name: LinkedIn
      logoUrl: app/images/oauth/logo-linkedin.png
      authBase: https://www.linkedin.com/uas/oauth2/authorization
      redirectUrl: api/v1/oauthlogin/callback/linkedin # can be relative to global.serverURL or absolute starting with http(s)://
      clientId: <string>
      clientSecret: <string>
      tokenUrl: https://www.linkedin.com/uas/oauth2/accessToken
      apiUrl: https://api.linkedin.com/v1/people/~:(emailAddress)?format=json
      scope: r_emailaddress
    google:
      handler: google
      name: Google
      logoUrl: app/images/oauth/logo-google.png
      authBase: https://accounts.google.com/o/oauth2/auth
      redirectUrl: api/v1/oauthlogin/callback/google # can be relative to global.serverURL or absolute starting with http(s)://
      clientId: <string>
      clientSecret: <string>
      tokenUrl: https://accounts.google.com/o/oauth2/token
      apiUrl: https://www.googleapis.com/userinfo/v2/me
      scope: https://www.googleapis.com/auth/userinfo.email
    github:
      handler: github
      name: GitHub
      logoUrl: app/images/oauth/logo-github.png
      authBase: https://github.com/login/oauth/authorize
      redirectUrl: api/v1/oauthlogin/callback/github # can be relative to global.serverURL or absolute starting with http(s)://
      clientId: <string>
      clientSecret: <string>
      tokenUrl: https://github.com/login/oauth/access_token
      apiUrl: https://api.github.com/user/emails
      scope: user:email
    microsoft:
      handler: microsoft
      name: Microsoft
      logoUrl: app/images/oauth/logo-microsoft.png
      authBase: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
      redirectUrl: api/v1/oauthlogin/callback/microsoft
      clientId: <string>
      clientSecret: <string>
      tokenUrl: https://login.microsoftonline.com/common/oauth2/v2.0/token
      apiUrl: https://graph.microsoft.com/v1.0/me
      scope: https://graph.microsoft.com/.default # pulls all scopes from app registration in azure. See 'API permissions' section