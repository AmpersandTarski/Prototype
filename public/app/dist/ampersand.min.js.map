{"version":3,"sources":["module.js","admin/execengine.controller.js","admin/installer.controller.js","angular-ui-switch/angular-ui-switch-adapted.js","importer/importer.module.js","interfacing/atomic.controller.js","interfacing/atomicDate.controller.js","interfacing/atomicPassword.controller.js","interfacing/atomicTypeAhead.controller.js","interfacing/atomicUploadFile.controller.js","interfacing/box.controller.js","interfacing/interface.controller.js","interfacing/myBluronenter.directive.js","interfacing/myShowonooverBox.directive.js","interfacing/resource.service.js","login/login.service.js","navbar/myNavbarResize.directive.js","navbar/navigationBar.controller.js","navbar/navigationBar.service.js","navbar/role.service.js","notifications/notification.service.js","notifications/notificationCenter.controller.js","notifications/unsafe.filter.js","shared/myNavTo/myNavToInterfaces.directive.js","shared/myNavTo/myNavToOtherInterfaces.directive.js","ampersand.js","templates.js"],"names":["angular","module","config","$routeProvider","$locationProvider","when","resolveRedirectTo","NavigationBarService","navbar","home","controller","templateUrl","interfaceLabel","LoginService","getPageBeforeLogin","otherwise","redirectTo","hashPrefix","RestangularProvider","setBaseUrl","setDefaultHeaders","Content-Type","run","Restangular","$rootScope","$location","$route","NotificationService","RoleService","addFullRequestInterceptor","element","operation","what","url","headers","params","addResponseInterceptor","data","response","deferred","sessionRefreshAdvice","refreshNavBar","navTo","setErrorInterceptor","responseHandler","message","details","error","addInfo","msg","status","loginPage","setLoginPage","gotoLoginPage","statusText","addError","html","undefined","notifications","updateNotifications","getCurrentDateTime","Date","original","reload","lastRoute","current","un","$on","apply","value","backdrop","minDuration","$scope","one","get","then","plain","installing","installed","install","defPop","ignoreInvariantRules","clearNotifications","defaultPop","deactivateAllRoles","directive","restrict","replace","transclude","template","attrs","ngModel","ngClick","class","app","requires","length","service","FileUploader","uploader","onSuccessItem","fileItem","onErrorItem","item","ImportService","ResourceService","selected","saveItem","addItem","removeItem","remove","removeResource","delete","deleteResource","pad","number","r","String","modifyToJSON","obj","toJSON","this","getUTCFullYear","getMonth","getDate","isOpen","watchDateObject","resource","ifc","$watch","openDatepicker","$event","preventDefault","stopPropagation","saveDateItem","property","patchResource","addDateItem","console","log","patchPasswordField","addPatch","hasNoResults","getTypeahead","resourceType","forceGetCall","typeahead","all","getList","$object","typeaheadOnSelect","$item","$model","$label","_id_","Array","isArray","saved","push","copy","typeAheadCreate","alias","formData","removeAfterUpload","autoUpload","newResource","content","splice","createResource","save","cancel","cancelResource","event","next","checkRequired","confirmed","confirm","emptyUpdatedResources","ifcName","pendingPromises","scope","bind","which","target","blur","link","closest","hasClass","hide","addClass","show","removeClass","$localStorage","$timeout","$q","updatedResources","getResource","callingObj","promise","_path_","$","isEmptyObject","extend","initResourceMetaData","addPromiseToResourceLoadingList","forceSave","_delegatePatchesTo_","autoSave","patch","_patchesCache_","processResponse","_isRoot_","committed","isCommitted","setResourceStatus","_showButtons_","resolve","getNotifications","insertAtIndex","post","parent","indexOf","reject","index","pathLength","path","substring","op","reduce","prev","arr","_status_","warning","danger","default","success","_loading_","some","val","$$state","_isLoading_","finally","urlLoginPage","login_urlBeforeLogin","$window","w","resizeNavbar","width","children","first","appendTo","last","prependTo","toggleClass","addObserverCallable","document","ready","$sessionStorage","localStorage","sessionStorage","loadingNavBar","resetSettingsToDefault","toggleRole","roleId","set","setActiveRoles","checkAllRules","createNewResource","openWithIfc","top","new","refresh","role","ext","observerCallables","defaultSettings","notify_showSignals","notify_showInfos","notify_showSuccesses","notify_autoHideSuccesses","notify_showErrors","notify_showWarnings","notify_showInvariants","callable","session","sessionRoles","sessionVars","initializeSettings","forEach","resetRequired","$reset","selectRole","selectRoleByLabel","roleLabel","label","id","active","getActiveRoleIds","roleIds","signals","invariants","infos","successes","warnings","errors","addSuccess","concat","count","code","persistent","alreadyExists","i","addWarning","filter","closeAlert","alerts","$sce","trustAsHtml","$templateCache","put"],"mappings":"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","file":"ampersand.min.js","sourcesContent":["// when using minified angular modules, use module('myApp', []).controller('MyController', ['myService', function (myService) { ...\r\nangular.module('AmpersandApp', ['ngResource', 'ngRoute', 'ngSanitize', 'restangular', 'ui.bootstrap', 'uiSwitch', 'cgBusy', 'siTable', 'ngStorage', 'angularFileUpload', 'ui.bootstrap.datetimepicker', 'hc.marked'])\r\n.config(function($routeProvider, $locationProvider) {\r\n    $routeProvider\r\n        // default start page\r\n        .when('/', {\r\n            resolveRedirectTo : ['NavigationBarService', function (NavigationBarService) {\r\n                return NavigationBarService.navbar.home;\r\n            }]\r\n        })\r\n        .when('/prototype/welcome', { \r\n            controller : '',\r\n            templateUrl : 'app/src/shared/welcome.html',\r\n            interfaceLabel : 'Welcome'\r\n            })\r\n        // installer page\r\n        .when('/admin/installer', {\r\n            controller : 'InstallerController',\r\n            templateUrl : 'app/src/admin/installer.html',\r\n            interfaceLabel : 'Installer'\r\n            })\r\n        .when('/redirect-after-login', {\r\n            resolveRedirectTo : ['LoginService', function (LoginService) {\r\n                return LoginService.getPageBeforeLogin();\r\n            }]\r\n        }).when('/404', {\r\n            templateUrl: 'app/src/shared/404.html',\r\n            interfaceLabel: '404'\r\n            })\r\n        .otherwise({redirectTo: '/404'});\r\n    \r\n    $locationProvider.hashPrefix(''); // see: https://stackoverflow.com/questions/41211875/angularjs-1-6-0-latest-now-routes-not-working\r\n}).config(function(RestangularProvider) {\r\n    \r\n    RestangularProvider.setBaseUrl('api/v1'); // Generate: path to API folder\r\n    RestangularProvider.setDefaultHeaders({\"Content-Type\": \"application/json\"});\r\n    // RestangularProvider.setPlainByDefault(true); available from Restangular v1.5.3\r\n    \r\n}).run(function(Restangular, $rootScope, $location, $route, NotificationService, RoleService, NavigationBarService, LoginService){\r\n\r\n    Restangular.addFullRequestInterceptor(function(element, operation, what, url, headers, params){\r\n        //params.navIfc = true;\r\n        //params.metaData = true;\r\n        return params;\r\n    });\r\n    \r\n    Restangular.addResponseInterceptor(function(data, operation, what, url, response, deferred){\r\n        if(operation != 'get' && operation != 'getList' && data.sessionRefreshAdvice) NavigationBarService.refreshNavBar();\r\n\t\tif((data || {}).navTo != null) $location.url(data.navTo);\r\n        \r\n        return data;\r\n    });\r\n    \r\n    Restangular.setErrorInterceptor(function(response, deferred, responseHandler) {\r\n        var message;\r\n        var details;\r\n        if(typeof response.data === 'object' && response.data !== null){\r\n            if(response.data.error == 404) { // 404: Not found\r\n                NotificationService.addInfo(response.data.msg || 'Resource not found');\r\n            \r\n            } else if(response.status == 401){ // 401: Unauthorized\r\n                if(response.data.data.loginPage) {\r\n                    LoginService.setLoginPage(response.data.data.loginPage);\r\n                }\r\n                LoginService.gotoLoginPage();\r\n                NotificationService.addInfo(response.data.msg || 'Login required to access this page');\r\n            \r\n            } else {\r\n                message = response.data.msg || response.statusText; // if empty response message, take statusText\r\n                NotificationService.addError(message, response.status, true, response.data.html);\r\n            }\r\n            \r\n            if(response.data.notifications !== undefined) NotificationService.updateNotifications(response.data.notifications);\r\n            if (response.data.navTo != null) {\r\n                $location.url(response.data.navTo);\r\n            }\r\n        }else{\r\n            message = response.status + ' ' + response.statusText;\r\n            details = response.data; // html content is excepted\r\n            NotificationService.addError(message, response.status, true, details);\r\n        }\r\n        \r\n        return true; // proceed with success or error hooks of promise\r\n    });\r\n    \r\n    $rootScope.getCurrentDateTime = function (){\r\n        return new Date();\r\n    };\r\n    \r\n    // Add feature to $location.url() function to be able to prevent reloading page (set reload param to false)\r\n    var original = $location.url;\r\n    $location.url = function (url, reload) {\r\n        if (reload === false) {\r\n            var lastRoute = $route.current;\r\n            var un = $rootScope.$on('$locationChangeSuccess', function () {\r\n                $route.current = lastRoute;\r\n                un();\r\n            });\r\n        }\r\n        return original.apply($location, [url]);\r\n    };\r\n}).value('cgBusyDefaults',{\r\n    message:'Loading...',\r\n    backdrop: true,\r\n    //templateUrl: 'my_custom_template.html',\r\n    //delay: 500, // in ms\r\n    minDuration: 500, // in ms\r\n    // wrapperClass: 'my-class my-class2'\r\n});\r\n","// Controller for extension app in navigation bar\r\nangular.module('AmpersandApp')\r\n.controller('ExecEngineController', function ($scope, Restangular, NotificationService) {\r\n    $scope.run = function (){\r\n        Restangular.one('admin/execengine/run').get()\r\n        .then(\r\n            function(data){ // on success\r\n                data = data.plain();\r\n                NotificationService.updateNotifications(data);\r\n            }\r\n        );\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('InstallerController', function ($scope, Restangular, NotificationService, RoleService, NavigationBarService) {\r\n    $scope.installing = false;\r\n    $scope.installed = false;\r\n    \r\n    $scope.install = function(defPop, ignoreInvariantRules){\r\n        $scope.installing = true;\r\n        $scope.installed = false;\r\n        NotificationService.clearNotifications();\r\n        \r\n        Restangular\r\n        .one('admin/installer')\r\n        .get({defaultPop : defPop, ignoreInvariantRules : ignoreInvariantRules})\r\n        .then(function(data) {\r\n            data = data.plain();\r\n            NotificationService.updateNotifications(data);\r\n            NavigationBarService.refreshNavBar();\r\n            \r\n            // deactive all roles\r\n            RoleService.deactivateAllRoles();\r\n            \r\n            $scope.installing = false;\r\n            $scope.installed = true;\r\n        }, function(){\r\n            $scope.installing = false;\r\n            $scope.installed = false;\r\n        });\r\n    };\r\n});\r\n","angular.module('uiSwitch', [])\r\n\r\n.directive('switch', function(){\r\n  return {\r\n    restrict: 'AE'\r\n  , replace: true\r\n  , transclude: true\r\n  , template: function(element, attrs) {\r\n      var html = '';\r\n      html += '<a href=\"\"';\r\n      html +=   (attrs.ngModel && !attrs.ngClick) ? ' ng-click=\"' + attrs.ngModel + '=!' + attrs.ngModel + '\"' : '';\r\n      html += '>';\r\n      html += '<span';\r\n      html +=   ' class=\"switch' + (attrs.class ? ' ' + attrs.class : '') + '\"';\r\n      html +=   ' ng-class=\"{ checked:' + attrs.ngModel + ' }\"';\r\n      html +=   '>';\r\n      html +=   '<small></small>';\r\n      html += '</span>';\r\n      html += '<span ng-transclude></span>';\r\n      html += '</a>';\r\n      return html;\r\n    }\r\n  }\r\n});","var app = angular.module('AmpersandApp');\r\napp.requires[app.requires.length] = 'angularFileUpload'; // add angularFileUpload to dependency list\r\napp.config(function($routeProvider) {\r\n    $routeProvider\r\n        .when('/ext/importer', {\r\n            controller : 'PopulationImportController',\r\n            templateUrl : 'app/src/importer/importer.html',\r\n            interfaceLabel : 'Population importer'\r\n        });\r\n}).service('ImportService', function(FileUploader, NotificationService, NavigationBarService){\r\n    let uploader = new FileUploader({\r\n        url: 'api/v1/admin/import'\r\n    });\r\n\r\n    uploader.onSuccessItem = function(fileItem, response, status, headers) {\r\n        NotificationService.updateNotifications(response.notifications);\r\n        if(response.sessionRefreshAdvice) NavigationBarService.refreshNavBar();\r\n    };\r\n    \r\n    uploader.onErrorItem = function(item, response, status, headers){\r\n        let message;\r\n        let details;\r\n        if(typeof response === 'object'){\r\n            if (response.notifications !== undefined) {\r\n                NotificationService.updateNotifications(response.notifications);\r\n            }\r\n            message = response.msg || 'Error while importing';\r\n            NotificationService.addError(message, status, true, response.html);\r\n        }else{\r\n            message = status + ' Error while importing';\r\n            details = response; // html content is excepted\r\n            NotificationService.addError(message, status, true, details);\r\n        }\r\n    };\r\n    \r\n    return {uploader : uploader};\r\n}).controller('PopulationImportController', function ($scope, ImportService) {\r\n    $scope.uploader = ImportService.uploader;\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('AtomicController', function($scope, ResourceService){\r\n    \r\n    /*\r\n     * Object to temporary store value/resourceId to add to list\r\n     * Value/resourceId is stored as property of 'selected' obj. This is needed to pass it around by reference\r\n     */\r\n    $scope.selected = {};\r\n    \r\n    $scope.saveItem = ResourceService.saveItem; // function(resource, ifc, patchResource)\r\n    \r\n    $scope.addItem = ResourceService.addItem; // function(resource, ifc, selected, patchResource)\r\n    \r\n    $scope.removeItem = ResourceService.removeItem; // function(resource, ifc, index, patchResource)\r\n    \r\n    $scope.remove = ResourceService.removeResource; // function(parent, ifc, resource, patchResource)\r\n    \r\n    $scope.delete = ResourceService.deleteResource; // function(parent, ifc, resource)\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('AtomicDateController', function ($scope, ResourceService) {\r\n    \r\n    $scope.isOpen = false;\r\n    \r\n    // Function is here because ng-model needs to be a Date object.\r\n    // watch listener is initialized by the template\r\n    $scope.watchDateObject = function(resource, ifc){\r\n        $scope.$watch('resource', function(){\r\n            if (!(resource[ifc] instanceof Date)){\r\n                // Only convert to Date object when not NULL, otherwise the 1970-01-01 is created\r\n                if (resource[ifc] !== null) resource[ifc] = new Date(resource[ifc]);\r\n            }\r\n        }, true);\r\n    };\r\n\r\n    $scope.openDatepicker = function($event){\r\n        $event.preventDefault();\r\n        $event.stopPropagation();\r\n        $scope.isOpen = true;\r\n    };\r\n    \r\n    // Adds leading 0 if necesarry. Returns 2 digits.\r\n    function pad(number) {\r\n        var r = String(number);\r\n        if ( r.length === 1 ) {\r\n            r = '0' + r;\r\n        }\r\n        return r;\r\n    }\r\n    \r\n    function modifyToJSON(obj){\r\n        if(obj !== null){\r\n            obj.toJSON = function(){\r\n                return this.getUTCFullYear() + \r\n                    '-' + pad(this.getMonth() + 1) + // The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).\r\n                    '-' + pad(this.getDate());\r\n            };\r\n        }\r\n    }\r\n    \r\n    $scope.selected = { value : ''}; // an empty object for temporary storing the input values\r\n    \r\n    $scope.saveDateItem = function(obj, property, patchResource){\r\n        modifyToJSON(obj[property]);\r\n        ResourceService.saveItem(obj, property, patchResource);\r\n    };\r\n    \r\n    $scope.addDateItem = function(obj, property, selected, patchResource){\r\n        if(selected.value !== ''){\r\n            modifyToJSON(selected.value);\r\n            ResourceService.addItem(obj, property, selected, patchResource);\r\n        }else{\r\n            console.log('Empty date selected');\r\n        }\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('AtomicPasswordController', function($scope, ResourceService){\r\n    // Silently add patch. Change is not autosaved, because browser autofill can otherwise infinite loops \r\n    $scope.patchPasswordField = function(resource, ifc, patchResource) {\r\n        if(typeof resource[ifc] === 'undefined' || resource[ifc] === '') {\r\n            value = null;\r\n        } else {\r\n            value = resource[ifc];\r\n            ResourceService.addPatch('replace', resource, patchResource, ifc, value);\r\n        }\r\n    }\r\n});","angular.module('AmpersandApp')\r\n.controller('AtomicTypeAheadController', function($scope, Restangular, ResourceService){\r\n    \r\n    /*\r\n     * Object to temporary store value/resourceId to add to list\r\n     * Value/resourceId is stored as property of 'selected' obj. This is needed to pass it around by reference\r\n     */\r\n    $scope.selected = {};\r\n    \r\n    $scope.hasNoResults = false;\r\n    \r\n    /*\r\n     * Typeahead object is declared in interface.controller.js\r\n     * Thereby typeahead is called only once for every resourceType per interface\r\n     */\r\n    // $scope.typeahead = {};\r\n    \r\n    /*\r\n     * Typeahead functionality\r\n     * $scope.typeahead is initiated in InterfaceController to be able to reuse typeahead data\r\n     */\r\n    $scope.getTypeahead = function(resourceType, forceGetCall){\r\n        forceGetCall = typeof forceGetCall !== 'undefined' ? forceGetCall : false;\r\n\r\n        // Only if not yet set\r\n        if(typeof $scope.typeahead[resourceType] === 'undefined' || forceGetCall){\r\n            $scope.typeahead[resourceType] = Restangular.all('resource/' + resourceType).getList().$object;\r\n        }\r\n    };\r\n    \r\n    $scope.typeaheadOnSelect = function ($item, $model, $label, resource, ifc, patchResource){\r\n        if(typeof $item._id_ === 'undefined') console.log('Resource id undefined');\r\n        else if($item._id_ === '') console.log('Empty resource id provided');\r\n        else{\r\n            if(Array.isArray(resource[ifc])){\r\n                // Construct patch(es)\r\n                ResourceService.addPatch('add', resource, patchResource, ifc, $item._id_);\r\n                ResourceService.patchResource(patchResource)\r\n                .then(function(data){\r\n                    // Adapt in js model\r\n                    if(!data.saved) resource[ifc].push(angular.copy($item));\r\n                });\r\n                \r\n            }else if(resource[ifc] === null){\r\n                // Construct patch(es)\r\n                ResourceService.addPatch('replace', resource, patchResource, ifc, $item._id_);\r\n                ResourceService.patchResource(patchResource)\r\n                .then(function(data){\r\n                    // Adapt js model\r\n                    if(!data.saved) resource[ifc] = angular.copy($item);\r\n                });\r\n            }\r\n            else console.log('Error: Property already set and/or not defined');\r\n            \r\n            $scope.hasNoResults = false;\r\n        }\r\n        // Empty selected input\r\n        $scope.selected.value = '';\r\n    };\r\n    \r\n    $scope.typeAheadCreate = function (resource, ifc, selected, patchResource, resourceType){\r\n        if(Array.isArray(resource[ifc])) { \r\n            ResourceService.addItem(resource, ifc, selected, patchResource).then(\r\n                function(){\r\n                    $scope.getTypeahead(resourceType, true);\r\n                }\r\n            );\r\n        } else if(resource[ifc] === null) {\r\n            resource[ifc] = selected.value;\r\n            ResourceService.saveItem(resource, ifc, patchResource);\r\n        } else {\r\n            console.log('Error: Property already set and/or not defined');\r\n        }\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('AtomicUploadFileController', function($scope, FileUploader, NotificationService){\r\n    \r\n    // File uploader stuff\r\n    $scope.FileUploader = new FileUploader({\r\n        alias : 'file', // fieldname as used in $_FILES['file']\r\n        formData : [],\r\n        removeAfterUpload : true,\r\n        autoUpload : true\r\n    });\r\n    \r\n    $scope.FileUploader.onSuccessItem = function(fileItem, response, status, headers){\r\n        NotificationService.updateNotifications(response.notifications);\r\n        \r\n        newResource = response.content;\r\n        \r\n        // Add new resource to ifc\r\n        if(Array.isArray(fileItem.resource[fileItem.ifc])){ // non-uni = list\r\n            fileItem.resource[fileItem.ifc].splice(-1, 0, newResource);\r\n        }else{ // uni = object\r\n            fileItem.resource[fileItem.ifc] = newResource;\r\n        }\r\n    };\r\n    \r\n    $scope.FileUploader.onErrorItem = function(item, response, status, headers){\r\n        NotificationService.addError(response.msg, response.error, true, response.html);\r\n        NotificationService.updateNotifications(response.notifications);\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('BoxController', function($scope, ResourceService){\r\n    \r\n    // Function to create a new resource (does a POST)\r\n    $scope.createResource = ResourceService.createResource; // function(resource, ifc, callingObj, insertAtIndex)\r\n    \r\n    // Function to save certain attributes changes of a resource (does a PATCH)\r\n    $scope.save = function(resource){\r\n        ResourceService.patchResource(resource, true);\r\n    };\r\n    \r\n    // Function to cancel unsaved edits (does a GET)\r\n    $scope.cancel = ResourceService.cancelResource; // function(resource)\r\n    \r\n    // Function to remove a resource from an interface (list)\r\n    $scope.remove = ResourceService.removeResource; // function(ifc, resource, patchResource)\r\n    \r\n    // Function to delete a resource\r\n    $scope.delete = ResourceService.deleteResource; // function(ifc, resource)\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('InterfaceController', function($scope, $location, ResourceService){\r\n    /*\r\n     * An empty object for typeahead functionality.\r\n     * Defined here so it can be reused in an interface\r\n     * Prevents multiple calls for the same resourceType\r\n     */\r\n    $scope.typeahead = {};\r\n    \r\n    // Detects location changes and checks if there are unsaved changes\r\n    $scope.$on(\"$locationChangeStart\", function(event, next, current){\r\n        if(ResourceService.checkRequired()){\r\n            confirmed = confirm(\"You have unsaved edits. Do you wish to leave?\");\r\n            if (event && !confirmed) event.preventDefault();\r\n            else if(event && confirmed) ResourceService.emptyUpdatedResources();\r\n            else console.log('Someting went wrong. Cannot determine action after locationChangeStart');\r\n        }\r\n    });\r\n    \r\n    // Function to change location to create a new resource\r\n    $scope.newResource = function(){\r\n        $location.url('/' + ifcName + '?new');\r\n    };\r\n    \r\n    // Function (reference) to check if there are pending promises for a resource\r\n    $scope.pendingPromises = ResourceService.pendingPromises;\r\n});\r\n","angular.module('AmpersandApp')\r\n.directive('myBluronenter', function() {\r\n    return function(scope, element, attrs) {\r\n        element.bind(\"keydown keypress\", function(event) {\r\n            if(event.which === 13) { // 13 = Carriage return\r\n                event.target.blur();\r\n\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.directive('myShowonhoverBox', function (){\r\n    return {\r\n        link : function(scope, element, attrs) {\r\n            if(!element.closest('.box').hasClass('my-showonhover-box-show')) element.hide(); // default hide\r\n            \r\n            element.closest('.box').bind('mouseenter', function() {\r\n                element.closest('.box').addClass('my-showonhover-box-show');\r\n                element.show();\r\n            });\r\n            element.closest('.box').bind('mouseleave', function() {\r\n                element.closest('.box').removeClass('my-showonhover-box-show');\r\n                element.hide();\r\n            });\r\n        }\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.service('ResourceService', function($localStorage, $timeout, $location, Restangular, NotificationService, $q){\r\n    // http://blog.thoughtram.io/angular/2015/07/07/service-vs-factory-once-and-for-all.html\r\n    \r\n    let updatedResources = []; // contains list with updated resource objects in this interface. Used to check if there are uncommmitted changes (patches in cache)\r\n    \r\n    let ResourceService = {\r\n        /**\r\n         * Get resource data given a certain interface (ifc)\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} callingObj will be used for loading indicator\r\n         * @returns {Promise}\r\n         */\r\n        getResource : function(resource, ifc, callingObj){\r\n            promise = Restangular\r\n            .one(resource._path_ + '/' + ifc)\r\n            .get()\r\n            .then(function(data){\r\n                try {\r\n                    data = data.plain();\r\n                }catch(error){}\r\n                if($.isEmptyObject(data)) NotificationService.addInfo('No results found');\r\n                else if(resource[ifc] === null || Array.isArray(resource[ifc])) resource[ifc] = data;\r\n                else angular.extend(resource[ifc], data);\r\n                \r\n                ResourceService.initResourceMetaData(resource);\r\n\r\n                return resource;\r\n            });\r\n            \r\n            // Add promise to loading list\r\n            return ResourceService.addPromiseToResourceLoadingList(callingObj, promise);\r\n        },\r\n\r\n        /**\r\n         * Patch the given resource by calling the API and sending the list of stored patches \r\n         * \r\n         * @param {Object} resource\r\n         * @param {bool} forceSave\r\n         * @returns {Promise}\r\n         */\r\n        patchResource : function(resource, forceSave){\r\n            // Use delegate resource if specified\r\n            if (typeof resource._delegatePatchesTo_ !== 'undefined') {\r\n                resource = resource._delegatePatchesTo_;\r\n            }\r\n\r\n            // Save if autoSave is enabled\r\n            if($localStorage.autoSave || forceSave) {\r\n                promise = Restangular\r\n                .one(resource._path_)\r\n                .patch(resource._patchesCache_, {})\r\n                .then(function(data) {\r\n                    data = data.plain();\r\n                    \r\n                    // Update visual feedback (notifications and buttons)\r\n                    ResourceService.processResponse(resource, data);\r\n\r\n                    // Update resource data\r\n                    if(resource._isRoot_ && data.navTo == null) {\r\n                        resource.get(); // if directed to other page (data.navTo), refresh of data is not needed\r\n                    } else {\r\n                        resource = angular.extend(resource, data.content);\r\n                    }\r\n\r\n                    return {resource : resource, saved: true, committed: data.isCommitted};\r\n                });\r\n\r\n                // Add promise to loading list\r\n                return ResourceService.addPromiseToResourceLoadingList(resource, promise);\r\n            } else {\r\n                // Update visual feedback\r\n                ResourceService.setResourceStatus(resource, 'warning');\r\n                resource._showButtons_ = {'save' : true, 'cancel' : true};\r\n                return $q.resolve({resource : resource, saved : false, committed: false});\r\n            }\r\n        },\r\n        \r\n        /**\r\n         * Cancel unsaved edits and get resource data\r\n         * \r\n         * @param {Object} resource\r\n         * @returns {Promise}\r\n         */\r\n        cancelResource : function(resource){\r\n            promise = Restangular\r\n            .one(resource._path_)\r\n            .get()\r\n            .then(function(data){\r\n                data = data.plain();\r\n                if($.isEmptyObject(data)) NotificationService.addInfo('No results found');\r\n                else angular.extend(resource, data);\r\n                \r\n                // Update visual feedback (notifications and buttons)\r\n                NotificationService.getNotifications();\r\n                ResourceService.initResourceMetaData(resource);\r\n\r\n                return resource;\r\n            });\r\n            \r\n            // Add promise to loading list\r\n            return ResourceService.addPromiseToResourceLoadingList(resource, promise);\r\n        },\r\n        \r\n        /**\r\n         * Create (POST) a new resource to a certain interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} patchResource\r\n         * @param {int} insertAtIndex\r\n         * @returns {Promise}\r\n         */\r\n        createResource : function(resource, ifc, patchResource, insertAtIndex){\r\n            promise = Restangular\r\n            .one(resource._path_).all(ifc)\r\n            .post({}, {})\r\n            .then(function(data){\r\n                data = data.plain();\r\n                newResource = data.content;\r\n\r\n                // Update visual feedback (notifications and buttons)\r\n                ResourceService.processResponse(newResource, data);\r\n\r\n                // If not committed, add this create action to patch list\r\n                if (!data.isCommitted) {\r\n                    ResourceService.addPatch('create', resource, patchResource, ifc, newResource._id_);\r\n                    \r\n                    // Delegate additional patches upward, because this resource does not exist yet\r\n                    // See addPatch() and patchResource() functions\r\n                    newResource._delegatePatchesTo_ = patchResource;\r\n                }\r\n                \r\n                // Add new resource to ifc\r\n                if(Array.isArray(resource[ifc])){ // non-uni = list\r\n                    if(insertAtIndex === 'undefined') insertAtIndex = resource[ifc].length; // append by default\r\n                    resource[ifc].splice(insertAtIndex, 0, newResource);\r\n                }else{ // uni = object\r\n                    resource[ifc] = newResource;\r\n                }\r\n                \r\n                if(resource._isRoot_ && resource._id_ == '_NEW') $location.url('/' + ifc + '/'+ newResource._id_, false);\r\n\r\n                return newResource;\r\n            });\r\n\r\n            // Add promise to loading list\r\n            return ResourceService.addPromiseToResourceLoadingList(patchResource, promise);\r\n        },\r\n        \r\n        /**\r\n         * Remove a resource from a certain interface list\r\n         * \r\n         * @param {Object} parent\r\n         * @param {string} ifc\r\n         * @param {Object} resource\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        removeResource : function(parent, ifc, resource, patchResource){\r\n            // Construct patch(es)\r\n            ResourceService.addPatch('remove', resource, patchResource);\r\n\r\n            // Execute patch\r\n            return ResourceService\r\n            .patchResource(patchResource)\r\n            .then(function(data){\r\n                // Adapt js model\r\n                if(!data.saved) {\r\n                    if(Array.isArray(parent[ifc])) parent[ifc].splice(parent[ifc].indexOf(resource), 1); // non-uni = list\r\n                    else parent[ifc] = null; // uni = object\r\n                }\r\n            });\r\n        },\r\n        \r\n        /**\r\n         * Delete a resource\r\n         * \r\n         * @param {Object} parent\r\n         * @param {string} ifc\r\n         * @param {Object} resource to delete\r\n         * @returns {Promise}\r\n         */\r\n        deleteResource : function(parent, ifc, resource){\r\n            if(confirm('Are you sure?')){\r\n                promise = Restangular\r\n                .one(resource._path_)\r\n                .remove({})\r\n                .then(function(data){\r\n                    data = data.plain();\r\n                    // Update visual feedback (notifications and buttons)\r\n                    NotificationService.updateNotifications(data.notifications);\r\n                    \r\n                    // Remove resource from ifc\r\n                    if(Array.isArray(parent[ifc])) parent[ifc].splice(parent[ifc].indexOf(resource), 1); // non-uni = list\r\n                    else parent[ifc] = null; // uni = object\r\n\r\n                    return parent;\r\n                });\r\n\r\n                // Add promise to loading list\r\n                return ResourceService.addPromiseToResourceLoadingList(resource, promise);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Save/patch a changed attribute\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        saveItem : function(resource, ifc, patchResource){\r\n            // Construct patch(es)\r\n            if(typeof resource[ifc] === 'undefined' || resource[ifc] === '') {\r\n                value = null;\r\n            } else {\r\n                value = resource[ifc];\r\n            }\r\n            ResourceService.addPatch('replace', resource, patchResource, ifc, value);\r\n\r\n            // Register patch\r\n            return ResourceService.patchResource(patchResource);\r\n        },\r\n        \r\n        /**\r\n         * Add an item to an interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} selected item to add to the list\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        addItem : function(resource, ifc, selected, patchResource){\r\n            if(typeof selected.value === 'undefined') {\r\n                //console.log('Value undefined');\r\n                return $q.reject('Value undefined');\r\n            } else if(selected.value === '') {\r\n                //console.log('Empty value selected');\r\n                return $q.reject('Empty value selected');\r\n            } else if(!Array.isArray(resource[ifc])) {\r\n                //console.log('Error: trying to add item to non-array');\r\n                return $q.reject('Error: trying to add item to non-array');\r\n            } else{\r\n                // Adapt in js model\r\n                resource[ifc].push(selected.value);\r\n                \r\n                // Construct patch(es)\r\n                ResourceService.addPatch('add', resource, patchResource, ifc, selected.value);\r\n                return ResourceService.patchResource(patchResource)\r\n                .then(function(data){\r\n                    // Reset selected value\r\n                    delete(selected.value);\r\n                    return data;\r\n                });\r\n            }\r\n        },\r\n        \r\n        /**\r\n         * Remove an item from an interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {int} index\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        removeItem : function(resource, ifc, index, patchResource){\r\n            // Construct patch(es)\r\n            value = resource[ifc][index];\r\n            ResourceService.addPatch('remove', resource, patchResource, ifc, value);\r\n            \r\n            // Adapt js model\r\n            resource[ifc].splice(index, 1);\r\n\r\n            return ResourceService.patchResource(patchResource);\r\n        },\r\n        \r\n        /**\r\n         * Construct, add and return patch object (with attributes 'op', 'path' and 'value')\r\n         * \r\n         * @param {string} operation choose from 'add', 'remove' or 'replace'\r\n         * @param {Object} resource\r\n         * @param {Object} patchResource resource to add patch to\r\n         * @param {string} ifc\r\n         * @param {string} value\r\n         * @returns {Object}\r\n         */\r\n        addPatch : function(operation, resource, patchResource, ifc, value){\r\n            // When patchResource is not provided use the resource itself\r\n            if (typeof patchResource === 'undefined') {\r\n                patchResource = resource;\r\n            }\r\n\r\n            // Use delegate resource if specified\r\n            if (typeof patchResource._delegatePatchesTo_ !== 'undefined') {\r\n                patchResource = patchResource._delegatePatchesTo_;\r\n            }\r\n\r\n            pathLength = patchResource._path_.length;\r\n            \r\n            path = resource._path_.substring(pathLength);\r\n            if(typeof ifc !== 'undefined') path = path + '/' + ifc;\r\n            \r\n            if(typeof value === 'undefined') patch = { op : operation, path : path};\r\n            else patch = { op : operation, path : path, value : value};\r\n\r\n            // Add new patch to patchResource\r\n            if(!Array.isArray(patchResource._patchesCache_)) patchResource._patchesCache_ = [];\r\n            patchResource._patchesCache_.push(patch);\r\n\r\n            // Add resource to updatedResources\r\n            if(updatedResources.indexOf(patchResource) === -1) updatedResources.push(patchResource);\r\n\r\n            return patch;\r\n        },\r\n\r\n        /**\r\n         * Returns if there are unsaved changes (i.e. patches that are not yet sent to the API)\r\n         * \r\n         * @returns {bool}\r\n         */\r\n        checkRequired : function(){ \r\n            return updatedResources.reduce(function(prev, item, index, arr){\r\n                return prev || item._patchesCache_.length;\r\n            }, false);\r\n        },\r\n        \r\n        /**\r\n         * Clear list of updated resources\r\n         */\r\n        emptyUpdatedResources : function(){\r\n            updatedResources = [];\r\n        },\r\n        \r\n        /**\r\n         * Init/reset resource meta data\r\n         * \r\n         * @param {Object} resource\r\n         */\r\n        initResourceMetaData : function(resource){\r\n            resource._showButtons_ = {'save' : false, 'cancel' : false};\r\n            resource._patchesCache_ = [];\r\n            ResourceService.setResourceStatus(resource, 'default');\r\n        },\r\n        \r\n        /**\r\n         * Process response: i.e. set resource buttons and status\r\n         * \r\n         * @param {Object} resource\r\n         * @param {Object} response from API\r\n         * @returns {Object}\r\n         */\r\n        processResponse : function(resource, response){\r\n            NotificationService.updateNotifications(response.notifications);\r\n            \r\n            if(response.isCommitted){\r\n                resource._showButtons_ = {'save' : false, 'cancel' : false};\r\n                resource._patchesCache_ = []; // empty patches cache\r\n                ResourceService.setResourceStatus(resource, 'success');\r\n                \r\n                // After 3 seconds, reset status to default\r\n                $timeout(function(){\r\n                    ResourceService.setResourceStatus(resource, 'default');\r\n                }, 3000);\r\n            }else{\r\n                resource._showButtons_ = {'save' : false, 'cancel' : true};\r\n                ResourceService.setResourceStatus(resource, 'danger');\r\n            }\r\n\r\n            return resource;\r\n        },\r\n        \r\n        /**\r\n         * Set resource status meta data\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} status choose from 'warning', 'danger', 'success' or 'default'\r\n         * @returns {Object}\r\n         */\r\n        setResourceStatus : function(resource, status){\r\n            // Reset all status properties\r\n            resource._status_ = { 'warning' : false,\r\n                                  'danger'  : false,\r\n                                  'default' : false,\r\n                                  'success' : false\r\n                                };\r\n            // Set status property\r\n            resource._status_[status] = true;\r\n            \r\n            return resource;\r\n        },\r\n        \r\n        /**\r\n         * Returns if resource has pending promises\r\n         * \r\n         * @param {Object} resource\r\n         * @returns {bool}\r\n         */\r\n        pendingPromises : function(resource){\r\n            if(!Array.isArray(resource._loading_)) return false; // empty array contains no pending promises\r\n            \r\n            return resource._loading_.some(function(val){\r\n                return val.$$state.status === 0; // promise status: 0 -> pending, 1 -> resolved, 2 -> rejected\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} resource\r\n         * @param {Promise} promise\r\n         * @returns {Promise}\r\n         */\r\n        addPromiseToResourceLoadingList : function(resource, promise){\r\n            if(!Array.isArray(resource._loading_)) resource._loading_ = [];\r\n            resource._loading_.push(promise);\r\n            resource._isLoading_ = true;\r\n\r\n            return promise.finally(function(){\r\n                if(!ResourceService.pendingPromises(resource)) {\r\n                    resource._isLoading_ = false;\r\n                    resource._loading_ = [];\r\n                }\r\n            });\r\n        }\r\n    };\r\n    \r\n    return ResourceService;\r\n});\r\n","angular.module('AmpersandApp')\r\n.service('LoginService', function($location, $localStorage){\r\n    let urlLoginPage = null;\r\n    \r\n    let service = {\r\n        setLoginPage : function (url) {\r\n            urlLoginPage = url;\r\n        },\r\n\r\n        gotoLoginPage : function () {\r\n            $localStorage.login_urlBeforeLogin = $location.url(); // \"/some/path?foo=bar&baz=xoxo\"\r\n            if (urlLoginPage) {\r\n                $location.url(urlLoginPage);\r\n            }\r\n        },\r\n\r\n        getPageBeforeLogin : function () {\r\n            return $localStorage.login_urlBeforeLogin;\r\n        }\r\n    };\r\n    \r\n    return service;\r\n});","angular.module('AmpersandApp')\r\n.directive('myNavbarResize', function ($window, $timeout, NavigationBarService) {\r\n    return function (scope, element) {\r\n        var w = angular.element($window);\r\n        \r\n        var resizeNavbar = function() {\r\n            $timeout(function(){\r\n                // moving ifc items from dropdown-menu to navbar itself\r\n                while($('#navbar-interfaces').width() < ($('#navbar-wrapper').width() - $('#navbar-options').width()) &&\r\n                        $('#navbar-interfaces-dropdown-menu').children().length > 0){\r\n                    $(\"#navbar-interfaces-dropdown-menu\").children().first().appendTo(\"#navbar-interfaces\");\r\n                }\r\n                \r\n                // moving ifc items from navbar to dropdown-menu\r\n                while($('#navbar-interfaces').width() > ($('#navbar-wrapper').width() - $('#navbar-options').width())){\r\n                    $(\"#navbar-interfaces\").children().last().prependTo(\"#navbar-interfaces-dropdown-menu\");\r\n                    \r\n                    // show/hide dropdown menu for more interfaces (must be inside loop, because it affects the width of the navbar\r\n                    $('#navbar-interfaces-dropdown').toggleClass('hidden', $('#navbar-interfaces-dropdown-menu').children().length <= 0);\r\n                }\r\n                \r\n                // show/hide dropdown menu when possible\r\n                $('#navbar-interfaces-dropdown').toggleClass('hidden', $('#navbar-interfaces-dropdown-menu').children().length <= 0);\r\n            });\r\n        };\r\n        \r\n        // watch navbar\r\n        NavigationBarService.addObserverCallable(resizeNavbar);\r\n        \r\n        // when window size gets changed\r\n        w.bind('resize', function () {\r\n            resizeNavbar();\r\n        });\r\n        \r\n        // when page loads\r\n        angular.element(document).ready(function(){\r\n            resizeNavbar();\r\n        });\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('NavigationBarController', function ($scope, $route, Restangular, $localStorage, $sessionStorage, $location, NotificationService, RoleService, NavigationBarService) {\r\n    \r\n    $scope.localStorage = $localStorage;\r\n    $scope.sessionStorage = $sessionStorage;\r\n    $scope.loadingNavBar = [];\r\n    $scope.navbar = NavigationBarService.navbar;\r\n    $scope.resetSettingsToDefault = NavigationBarService.resetSettingsToDefault;\r\n    \r\n    $scope.reload = function(){\r\n        $scope.loadingNavBar = [];\r\n        $scope.loadingNavBar.push(NavigationBarService.refreshNavBar());\r\n        $route.reload();\r\n    };\r\n\r\n    $scope.toggleRole = function(roleId, set){\r\n        RoleService.toggleRole(roleId, set);\r\n        $scope.loadingNavBar = [];\r\n        $scope.loadingNavBar.push(\r\n            RoleService.setActiveRoles()\r\n            .then(function(data){\r\n                NavigationBarService.refreshNavBar();\r\n            })\r\n        );\r\n    };\r\n\r\n    $scope.checkAllRules = NotificationService.checkAllRules;\r\n\r\n    $scope.createNewResource = function(resourceType, openWithIfc){\r\n        Restangular.one('resource').all(resourceType)\r\n        .post({}, {})\r\n        .then(\r\n            function(data){\r\n                // Jumps to interface and requests newly created resource\r\n                $location.url(openWithIfc + '/' + data._id_);\r\n            }\r\n        );\r\n    };\r\n    \r\n    $scope.loadingNavBar.push(NavigationBarService.refreshNavBar());\r\n});\r\n","angular.module('AmpersandApp')\r\n.service('NavigationBarService', function(Restangular, $localStorage, $sessionStorage, $timeout, NotificationService){\r\n    let navbar = {\r\n        home: null, // home/start page, can be set in project.yaml (default: '#/prototype/welcome')\r\n        top: [],\r\n        new: [],\r\n        refresh: [],\r\n        role: [],\r\n        ext: []\r\n    };\r\n    let defaultSettings = {\r\n        notify_showSignals: true,\r\n        notify_showInfos: true,\r\n        notify_showSuccesses: true,\r\n        notify_autoHideSuccesses: true,\r\n        notify_showErrors: true,\r\n        notify_showWarnings: true,\r\n        notify_showInvariants: true,\r\n        autoSave: true\r\n    };\r\n    let observerCallables = [];\r\n\r\n    let notifyObservers = function(){\r\n        angular.forEach(observerCallables, function(callable){\r\n            callable();\r\n        });\r\n    };\r\n\r\n    let service = {\r\n        navbar : navbar,\r\n        defaultSettings : defaultSettings,\r\n\r\n        addObserverCallable : function(callable){\r\n            observerCallables.push(callable);\r\n        },\r\n\r\n        refreshNavBar : function(){\r\n            return Restangular\r\n            .one('app/navbar')\r\n            .get()\r\n            .then(function(data){\r\n                data = data.plain();\r\n\r\n                // Content of navbar\r\n                navbar.home = data.home;\r\n                navbar.top = data.top;\r\n                navbar.new = data.new;\r\n                navbar.refresh = data.refresh;\r\n                navbar.role = data.role;\r\n                navbar.ext = data.ext;\r\n\r\n                // Content for session storage\r\n                $sessionStorage.session = data.session;\r\n                $sessionStorage.sessionRoles = data.sessionRoles;\r\n                $sessionStorage.sessionVars = data.sessionVars;\r\n                \r\n                // Save default settings\r\n                service.defaultSettings = data.defaultSettings;\r\n                service.initializeSettings();\r\n                \r\n                // Update notifications\r\n                NotificationService.updateNotifications(data.notifications);\r\n\r\n                notifyObservers();\r\n            }, function(error){\r\n                service.initializeSettings();\r\n            });\r\n        },\r\n\r\n        initializeSettings : function(){\r\n            let resetRequired = false;\r\n\r\n            // Check for undefined settings\r\n            angular.forEach(service.defaultSettings, function(value, index, obj){\r\n                if($localStorage[index] === undefined) {\r\n                    resetRequired = true;\r\n                }\r\n            });\r\n\r\n            if(resetRequired) service.resetSettingsToDefault();\r\n        },\r\n\r\n        resetSettingsToDefault : function(){\r\n            // all off\r\n            angular.forEach(service.defaultSettings, function(value, index, obj){\r\n                $localStorage[index] = false;\r\n            });\r\n            \r\n            $timeout(function() {\r\n                // Reset to default\r\n                $localStorage.$reset(service.defaultSettings);\r\n            }, 500);\r\n        }\r\n    };\r\n    \r\n    return service;\r\n});\r\n","angular.module('AmpersandApp')\r\n.service('RoleService', function($sessionStorage, Restangular){\r\n    \r\n    /*\r\n     * Available roles are registered in $sessionStorage.sessionRoles\r\n     * A role has the following attributes: id, label, active\r\n     */\r\n    \r\n    RoleService = {\r\n        selectRole : function(roleId){\r\n            RoleService.toggleRole(roleId, true);\r\n        },\r\n        \r\n        selectRoleByLabel : function (roleLabel){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if(role.label == roleLabel) return RoleService.selectRole(role.id);\r\n            });\r\n        },\r\n        \r\n        toggleRole : function(roleId, set){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if (role.id == roleId) {\r\n                    if(set === undefined) role.active = !role.active;\r\n                    else role.active = set;\r\n                }\r\n            });\r\n        },\r\n        \r\n        getActiveRoleIds : function(){\r\n            var roleIds = [];\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if (role.active === true) {\r\n                    roleIds.push(role.id);\r\n                }\r\n            });\r\n            return roleIds;\r\n        },\r\n        \r\n        deactivateAllRoles : function(){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                role.active = false;\r\n            });\r\n        },\r\n        \r\n        setActiveRoles : function(){\r\n            return Restangular.all('app/roles').patch($sessionStorage.sessionRoles);\r\n        }\r\n    };\r\n    \r\n    return RoleService;\r\n});\r\n","angular.module('AmpersandApp')\r\n.service('NotificationService', function($localStorage, $sessionStorage, $timeout, Restangular){\r\n    // Initialize notifications container\r\n    let notifications = {\r\n        'signals' : [],\r\n        'invariants' : [],\r\n        'infos' : [],\r\n        'successes' : [],\r\n        'warnings' : [],\r\n        'errors' : []\r\n    };\r\n    \r\n    let NotificationService = {\r\n        notifications : notifications,\r\n        \r\n        // Function to get notifications again\r\n        getNotifications : function(){\r\n            return Restangular\r\n            .one('app/notifications')\r\n            .get()\r\n            .then(\r\n                function(data){\r\n                    data = data.plain();\r\n                    NotificationService.updateNotifications(data);\r\n                },\r\n                function(){\r\n                    NotificationService.addError('Something went wrong while getting notifications');\r\n                }\r\n            );\r\n        },\r\n\r\n        checkAllRules : function(){\r\n            return Restangular\r\n            .one('admin/ruleengine/evaluate/all')\r\n            .get()\r\n            .then(\r\n                function(data){\r\n                    data = data.plain();\r\n                    NotificationService.addSuccess('Evaluated all rules.');\r\n                    NotificationService.updateNotifications(data);\r\n                },function(){\r\n                    NotificationService.addError('Something went wrong while evaluating all rules');\r\n                }\r\n            );\r\n        },\r\n        \r\n        // Function to update notifications after api response\r\n        updateNotifications : function(data){\r\n            if(data === undefined) return;\r\n            \r\n            // Overwrite\r\n            notifications.signals = data.signals;\r\n            notifications.invariants = data.invariants;\r\n            \r\n            // Merge\r\n            notifications.infos = notifications.infos.concat(data.infos);\r\n            notifications.successes = notifications.successes.concat(data.successes);\r\n            notifications.warnings = notifications.warnings.concat(data.warnings);\r\n            notifications.errors = notifications.errors.concat(data.errors);\r\n            \r\n            if($localStorage.notify_autoHideSuccesses){\r\n                $timeout(function() {\r\n                    notifications.successes = [];\r\n                }, 3000);\r\n            }\r\n        },\r\n\r\n        clearNotifications : function () {\r\n            notifications.signals = [];\r\n            notifications.invariants = [];\r\n            notifications.infos = [];\r\n            notifications.successes = [];\r\n            notifications.warnings = [];\r\n            notifications.errors = [];\r\n        },\r\n        \r\n        addSuccess : function(message){\r\n            notifications.successes.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n            \r\n            // TODO: move timeout function here for auto hide successes\r\n        },\r\n        \r\n        addError : function(message, code, persistent, details){\r\n            code = typeof code !== undefined ? code : null;\r\n            persistent = typeof persistent !== undefined ? persistent : false;\r\n            details = typeof details !== undefined ? details : false;\r\n            \r\n            let alreadyExists = false;\r\n            let arr = notifications.errors;\r\n            for (let i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    arr[i].code = code;\r\n                    arr[i].persistent = persistent;\r\n                    arr[i].details = details;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.errors.push({\r\n                'message' : message,\r\n                'code' : code,\r\n                'count' : 1,\r\n                'persistent' : persistent,\r\n                'details' : details\r\n            });\r\n        },\r\n        \r\n        addWarning : function(message){\r\n            let alreadyExists = false;\r\n            let arr = notifications.warnings;\r\n            for (var i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.warnings.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n        },\r\n        \r\n        addInfo : function(message){\r\n            let alreadyExists = false;\r\n            let arr = notifications.infos;\r\n            for (var i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.infos.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n        }\r\n    };\r\n    \r\n    return NotificationService;\r\n});","angular.module('AmpersandApp')\r\n.controller('NotificationCenterController', function ($scope, $route, Restangular, $localStorage, NotificationService) {\r\n    \r\n    $scope.localStorage = $localStorage;\r\n    $scope.notifications = NotificationService.notifications;\r\n    \r\n    // Hide success-, error-, warnings-, info- and invariant violation messages (not signals) upon route change\r\n    $scope.$on(\"$routeChangeSuccess\", function(){\r\n        $scope.notifications.successes = [];\r\n        $scope.notifications.errors = $scope.notifications.errors.filter(function (error){\r\n            if(error.persistent){\r\n                error.persistent = false;\r\n                return true;\r\n            }\r\n            else return false;\r\n        });\r\n        $scope.notifications.warnings = [];\r\n        $scope.notifications.infos = [];\r\n        $scope.notifications.invariants = [];\r\n    });\r\n    \r\n    // Function to close notifications\r\n    $scope.closeAlert = function(alerts, index) {\r\n        alerts.splice(index, 1);\r\n    };\r\n    \r\n});\r\n","angular.module('AmpersandApp')\r\n.filter('unsafe', function($sce){\r\n    return $sce.trustAsHtml;\r\n});\r\n","angular.module('AmpersandApp')\r\n.directive('myNavToInterfaces', function(){\r\n    return {\r\n        restrict : 'E',\r\n        scope : {resource : '=', target : '@'}, // '=' => two-way bind, '@' => evaluates string (use {{}} in html) \r\n        templateUrl : 'app/src/shared/myNavTo/myNavToInterfaces.html',\r\n        transclude : true\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.directive('myNavToOtherInterfaces', function(){\r\n    return {\r\n        restrict : 'E',\r\n        scope  : {resource : '=', target : '@'}, // '=' => two-way bind, '@' => evaluates string (use {{}} in html) \r\n        templateUrl : 'app/src/shared/myNavTo/myNavToOtherInterfaces.html'\r\n    };\r\n});\r\n","// when using minified angular modules, use module('myApp', []).controller('MyController', ['myService', function (myService) { ...\r\nangular.module('AmpersandApp', ['ngResource', 'ngRoute', 'ngSanitize', 'restangular', 'ui.bootstrap', 'uiSwitch', 'cgBusy', 'siTable', 'ngStorage', 'angularFileUpload', 'ui.bootstrap.datetimepicker', 'hc.marked'])\r\n.config(function($routeProvider, $locationProvider) {\r\n    $routeProvider\r\n        // default start page\r\n        .when('/', {\r\n            resolveRedirectTo : ['NavigationBarService', function (NavigationBarService) {\r\n                return NavigationBarService.navbar.home;\r\n            }]\r\n        })\r\n        .when('/prototype/welcome', { \r\n            controller : '',\r\n            templateUrl : 'app/src/shared/welcome.html',\r\n            interfaceLabel : 'Welcome'\r\n            })\r\n        // installer page\r\n        .when('/admin/installer', {\r\n            controller : 'InstallerController',\r\n            templateUrl : 'app/src/admin/installer.html',\r\n            interfaceLabel : 'Installer'\r\n            })\r\n        .when('/redirect-after-login', {\r\n            resolveRedirectTo : ['LoginService', function (LoginService) {\r\n                return LoginService.getPageBeforeLogin();\r\n            }]\r\n        }).when('/404', {\r\n            templateUrl: 'app/src/shared/404.html',\r\n            interfaceLabel: '404'\r\n            })\r\n        .otherwise({redirectTo: '/404'});\r\n    \r\n    $locationProvider.hashPrefix(''); // see: https://stackoverflow.com/questions/41211875/angularjs-1-6-0-latest-now-routes-not-working\r\n}).config(function(RestangularProvider) {\r\n    \r\n    RestangularProvider.setBaseUrl('api/v1'); // Generate: path to API folder\r\n    RestangularProvider.setDefaultHeaders({\"Content-Type\": \"application/json\"});\r\n    // RestangularProvider.setPlainByDefault(true); available from Restangular v1.5.3\r\n    \r\n}).run(function(Restangular, $rootScope, $location, $route, NotificationService, RoleService, NavigationBarService, LoginService){\r\n\r\n    Restangular.addFullRequestInterceptor(function(element, operation, what, url, headers, params){\r\n        //params.navIfc = true;\r\n        //params.metaData = true;\r\n        return params;\r\n    });\r\n    \r\n    Restangular.addResponseInterceptor(function(data, operation, what, url, response, deferred){\r\n        if(operation != 'get' && operation != 'getList' && data.sessionRefreshAdvice) NavigationBarService.refreshNavBar();\r\n\t\tif((data || {}).navTo != null) $location.url(data.navTo);\r\n        \r\n        return data;\r\n    });\r\n    \r\n    Restangular.setErrorInterceptor(function(response, deferred, responseHandler) {\r\n        var message;\r\n        var details;\r\n        if(typeof response.data === 'object' && response.data !== null){\r\n            if(response.data.error == 404) { // 404: Not found\r\n                NotificationService.addInfo(response.data.msg || 'Resource not found');\r\n            \r\n            } else if(response.status == 401){ // 401: Unauthorized\r\n                if(response.data.data.loginPage) {\r\n                    LoginService.setLoginPage(response.data.data.loginPage);\r\n                }\r\n                LoginService.gotoLoginPage();\r\n                NotificationService.addInfo(response.data.msg || 'Login required to access this page');\r\n            \r\n            } else {\r\n                message = response.data.msg || response.statusText; // if empty response message, take statusText\r\n                NotificationService.addError(message, response.status, true, response.data.html);\r\n            }\r\n            \r\n            if(response.data.notifications !== undefined) NotificationService.updateNotifications(response.data.notifications);\r\n            if (response.data.navTo != null) {\r\n                $location.url(response.data.navTo);\r\n            }\r\n        }else{\r\n            message = response.status + ' ' + response.statusText;\r\n            details = response.data; // html content is excepted\r\n            NotificationService.addError(message, response.status, true, details);\r\n        }\r\n        \r\n        return true; // proceed with success or error hooks of promise\r\n    });\r\n    \r\n    $rootScope.getCurrentDateTime = function (){\r\n        return new Date();\r\n    };\r\n    \r\n    // Add feature to $location.url() function to be able to prevent reloading page (set reload param to false)\r\n    var original = $location.url;\r\n    $location.url = function (url, reload) {\r\n        if (reload === false) {\r\n            var lastRoute = $route.current;\r\n            var un = $rootScope.$on('$locationChangeSuccess', function () {\r\n                $route.current = lastRoute;\r\n                un();\r\n            });\r\n        }\r\n        return original.apply($location, [url]);\r\n    };\r\n}).value('cgBusyDefaults',{\r\n    message:'Loading...',\r\n    backdrop: true,\r\n    //templateUrl: 'my_custom_template.html',\r\n    //delay: 500, // in ms\r\n    minDuration: 500, // in ms\r\n    // wrapperClass: 'my-class my-class2'\r\n});\r\n\n// Controller for extension app in navigation bar\r\nangular.module('AmpersandApp')\r\n.controller('ExecEngineController', function ($scope, Restangular, NotificationService) {\r\n    $scope.run = function (){\r\n        Restangular.one('admin/execengine/run').get()\r\n        .then(\r\n            function(data){ // on success\r\n                data = data.plain();\r\n                NotificationService.updateNotifications(data);\r\n            }\r\n        );\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('InstallerController', function ($scope, Restangular, NotificationService, RoleService, NavigationBarService) {\r\n    $scope.installing = false;\r\n    $scope.installed = false;\r\n    \r\n    $scope.install = function(defPop, ignoreInvariantRules){\r\n        $scope.installing = true;\r\n        $scope.installed = false;\r\n        NotificationService.clearNotifications();\r\n        \r\n        Restangular\r\n        .one('admin/installer')\r\n        .get({defaultPop : defPop, ignoreInvariantRules : ignoreInvariantRules})\r\n        .then(function(data) {\r\n            data = data.plain();\r\n            NotificationService.updateNotifications(data);\r\n            NavigationBarService.refreshNavBar();\r\n            \r\n            // deactive all roles\r\n            RoleService.deactivateAllRoles();\r\n            \r\n            $scope.installing = false;\r\n            $scope.installed = true;\r\n        }, function(){\r\n            $scope.installing = false;\r\n            $scope.installed = false;\r\n        });\r\n    };\r\n});\r\n\nangular.module('uiSwitch', [])\r\n\r\n.directive('switch', function(){\r\n  return {\r\n    restrict: 'AE'\r\n  , replace: true\r\n  , transclude: true\r\n  , template: function(element, attrs) {\r\n      var html = '';\r\n      html += '<a href=\"\"';\r\n      html +=   (attrs.ngModel && !attrs.ngClick) ? ' ng-click=\"' + attrs.ngModel + '=!' + attrs.ngModel + '\"' : '';\r\n      html += '>';\r\n      html += '<span';\r\n      html +=   ' class=\"switch' + (attrs.class ? ' ' + attrs.class : '') + '\"';\r\n      html +=   ' ng-class=\"{ checked:' + attrs.ngModel + ' }\"';\r\n      html +=   '>';\r\n      html +=   '<small></small>';\r\n      html += '</span>';\r\n      html += '<span ng-transclude></span>';\r\n      html += '</a>';\r\n      return html;\r\n    }\r\n  }\r\n});\nvar app = angular.module('AmpersandApp');\r\napp.requires[app.requires.length] = 'angularFileUpload'; // add angularFileUpload to dependency list\r\napp.config(function($routeProvider) {\r\n    $routeProvider\r\n        .when('/ext/importer', {\r\n            controller : 'PopulationImportController',\r\n            templateUrl : 'app/src/importer/importer.html',\r\n            interfaceLabel : 'Population importer'\r\n        });\r\n}).service('ImportService', function(FileUploader, NotificationService, NavigationBarService){\r\n    let uploader = new FileUploader({\r\n        url: 'api/v1/admin/import'\r\n    });\r\n\r\n    uploader.onSuccessItem = function(fileItem, response, status, headers) {\r\n        NotificationService.updateNotifications(response.notifications);\r\n        if(response.sessionRefreshAdvice) NavigationBarService.refreshNavBar();\r\n    };\r\n    \r\n    uploader.onErrorItem = function(item, response, status, headers){\r\n        let message;\r\n        let details;\r\n        if(typeof response === 'object'){\r\n            if (response.notifications !== undefined) {\r\n                NotificationService.updateNotifications(response.notifications);\r\n            }\r\n            message = response.msg || 'Error while importing';\r\n            NotificationService.addError(message, status, true, response.html);\r\n        }else{\r\n            message = status + ' Error while importing';\r\n            details = response; // html content is excepted\r\n            NotificationService.addError(message, status, true, details);\r\n        }\r\n    };\r\n    \r\n    return {uploader : uploader};\r\n}).controller('PopulationImportController', function ($scope, ImportService) {\r\n    $scope.uploader = ImportService.uploader;\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('AtomicController', function($scope, ResourceService){\r\n    \r\n    /*\r\n     * Object to temporary store value/resourceId to add to list\r\n     * Value/resourceId is stored as property of 'selected' obj. This is needed to pass it around by reference\r\n     */\r\n    $scope.selected = {};\r\n    \r\n    $scope.saveItem = ResourceService.saveItem; // function(resource, ifc, patchResource)\r\n    \r\n    $scope.addItem = ResourceService.addItem; // function(resource, ifc, selected, patchResource)\r\n    \r\n    $scope.removeItem = ResourceService.removeItem; // function(resource, ifc, index, patchResource)\r\n    \r\n    $scope.remove = ResourceService.removeResource; // function(parent, ifc, resource, patchResource)\r\n    \r\n    $scope.delete = ResourceService.deleteResource; // function(parent, ifc, resource)\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('AtomicDateController', function ($scope, ResourceService) {\r\n    \r\n    $scope.isOpen = false;\r\n    \r\n    // Function is here because ng-model needs to be a Date object.\r\n    // watch listener is initialized by the template\r\n    $scope.watchDateObject = function(resource, ifc){\r\n        $scope.$watch('resource', function(){\r\n            if (!(resource[ifc] instanceof Date)){\r\n                // Only convert to Date object when not NULL, otherwise the 1970-01-01 is created\r\n                if (resource[ifc] !== null) resource[ifc] = new Date(resource[ifc]);\r\n            }\r\n        }, true);\r\n    };\r\n\r\n    $scope.openDatepicker = function($event){\r\n        $event.preventDefault();\r\n        $event.stopPropagation();\r\n        $scope.isOpen = true;\r\n    };\r\n    \r\n    // Adds leading 0 if necesarry. Returns 2 digits.\r\n    function pad(number) {\r\n        var r = String(number);\r\n        if ( r.length === 1 ) {\r\n            r = '0' + r;\r\n        }\r\n        return r;\r\n    }\r\n    \r\n    function modifyToJSON(obj){\r\n        if(obj !== null){\r\n            obj.toJSON = function(){\r\n                return this.getUTCFullYear() + \r\n                    '-' + pad(this.getMonth() + 1) + // The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).\r\n                    '-' + pad(this.getDate());\r\n            };\r\n        }\r\n    }\r\n    \r\n    $scope.selected = { value : ''}; // an empty object for temporary storing the input values\r\n    \r\n    $scope.saveDateItem = function(obj, property, patchResource){\r\n        modifyToJSON(obj[property]);\r\n        ResourceService.saveItem(obj, property, patchResource);\r\n    };\r\n    \r\n    $scope.addDateItem = function(obj, property, selected, patchResource){\r\n        if(selected.value !== ''){\r\n            modifyToJSON(selected.value);\r\n            ResourceService.addItem(obj, property, selected, patchResource);\r\n        }else{\r\n            console.log('Empty date selected');\r\n        }\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('AtomicPasswordController', function($scope, ResourceService){\r\n    // Silently add patch. Change is not autosaved, because browser autofill can otherwise infinite loops \r\n    $scope.patchPasswordField = function(resource, ifc, patchResource) {\r\n        if(typeof resource[ifc] === 'undefined' || resource[ifc] === '') {\r\n            value = null;\r\n        } else {\r\n            value = resource[ifc];\r\n            ResourceService.addPatch('replace', resource, patchResource, ifc, value);\r\n        }\r\n    }\r\n});\nangular.module('AmpersandApp')\r\n.controller('AtomicTypeAheadController', function($scope, Restangular, ResourceService){\r\n    \r\n    /*\r\n     * Object to temporary store value/resourceId to add to list\r\n     * Value/resourceId is stored as property of 'selected' obj. This is needed to pass it around by reference\r\n     */\r\n    $scope.selected = {};\r\n    \r\n    $scope.hasNoResults = false;\r\n    \r\n    /*\r\n     * Typeahead object is declared in interface.controller.js\r\n     * Thereby typeahead is called only once for every resourceType per interface\r\n     */\r\n    // $scope.typeahead = {};\r\n    \r\n    /*\r\n     * Typeahead functionality\r\n     * $scope.typeahead is initiated in InterfaceController to be able to reuse typeahead data\r\n     */\r\n    $scope.getTypeahead = function(resourceType, forceGetCall){\r\n        forceGetCall = typeof forceGetCall !== 'undefined' ? forceGetCall : false;\r\n\r\n        // Only if not yet set\r\n        if(typeof $scope.typeahead[resourceType] === 'undefined' || forceGetCall){\r\n            $scope.typeahead[resourceType] = Restangular.all('resource/' + resourceType).getList().$object;\r\n        }\r\n    };\r\n    \r\n    $scope.typeaheadOnSelect = function ($item, $model, $label, resource, ifc, patchResource){\r\n        if(typeof $item._id_ === 'undefined') console.log('Resource id undefined');\r\n        else if($item._id_ === '') console.log('Empty resource id provided');\r\n        else{\r\n            if(Array.isArray(resource[ifc])){\r\n                // Construct patch(es)\r\n                ResourceService.addPatch('add', resource, patchResource, ifc, $item._id_);\r\n                ResourceService.patchResource(patchResource)\r\n                .then(function(data){\r\n                    // Adapt in js model\r\n                    if(!data.saved) resource[ifc].push(angular.copy($item));\r\n                });\r\n                \r\n            }else if(resource[ifc] === null){\r\n                // Construct patch(es)\r\n                ResourceService.addPatch('replace', resource, patchResource, ifc, $item._id_);\r\n                ResourceService.patchResource(patchResource)\r\n                .then(function(data){\r\n                    // Adapt js model\r\n                    if(!data.saved) resource[ifc] = angular.copy($item);\r\n                });\r\n            }\r\n            else console.log('Error: Property already set and/or not defined');\r\n            \r\n            $scope.hasNoResults = false;\r\n        }\r\n        // Empty selected input\r\n        $scope.selected.value = '';\r\n    };\r\n    \r\n    $scope.typeAheadCreate = function (resource, ifc, selected, patchResource, resourceType){\r\n        if(Array.isArray(resource[ifc])) { \r\n            ResourceService.addItem(resource, ifc, selected, patchResource).then(\r\n                function(){\r\n                    $scope.getTypeahead(resourceType, true);\r\n                }\r\n            );\r\n        } else if(resource[ifc] === null) {\r\n            resource[ifc] = selected.value;\r\n            ResourceService.saveItem(resource, ifc, patchResource);\r\n        } else {\r\n            console.log('Error: Property already set and/or not defined');\r\n        }\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('AtomicUploadFileController', function($scope, FileUploader, NotificationService){\r\n    \r\n    // File uploader stuff\r\n    $scope.FileUploader = new FileUploader({\r\n        alias : 'file', // fieldname as used in $_FILES['file']\r\n        formData : [],\r\n        removeAfterUpload : true,\r\n        autoUpload : true\r\n    });\r\n    \r\n    $scope.FileUploader.onSuccessItem = function(fileItem, response, status, headers){\r\n        NotificationService.updateNotifications(response.notifications);\r\n        \r\n        newResource = response.content;\r\n        \r\n        // Add new resource to ifc\r\n        if(Array.isArray(fileItem.resource[fileItem.ifc])){ // non-uni = list\r\n            fileItem.resource[fileItem.ifc].splice(-1, 0, newResource);\r\n        }else{ // uni = object\r\n            fileItem.resource[fileItem.ifc] = newResource;\r\n        }\r\n    };\r\n    \r\n    $scope.FileUploader.onErrorItem = function(item, response, status, headers){\r\n        NotificationService.addError(response.msg, response.error, true, response.html);\r\n        NotificationService.updateNotifications(response.notifications);\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('BoxController', function($scope, ResourceService){\r\n    \r\n    // Function to create a new resource (does a POST)\r\n    $scope.createResource = ResourceService.createResource; // function(resource, ifc, callingObj, insertAtIndex)\r\n    \r\n    // Function to save certain attributes changes of a resource (does a PATCH)\r\n    $scope.save = function(resource){\r\n        ResourceService.patchResource(resource, true);\r\n    };\r\n    \r\n    // Function to cancel unsaved edits (does a GET)\r\n    $scope.cancel = ResourceService.cancelResource; // function(resource)\r\n    \r\n    // Function to remove a resource from an interface (list)\r\n    $scope.remove = ResourceService.removeResource; // function(ifc, resource, patchResource)\r\n    \r\n    // Function to delete a resource\r\n    $scope.delete = ResourceService.deleteResource; // function(ifc, resource)\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('InterfaceController', function($scope, $location, ResourceService){\r\n    /*\r\n     * An empty object for typeahead functionality.\r\n     * Defined here so it can be reused in an interface\r\n     * Prevents multiple calls for the same resourceType\r\n     */\r\n    $scope.typeahead = {};\r\n    \r\n    // Detects location changes and checks if there are unsaved changes\r\n    $scope.$on(\"$locationChangeStart\", function(event, next, current){\r\n        if(ResourceService.checkRequired()){\r\n            confirmed = confirm(\"You have unsaved edits. Do you wish to leave?\");\r\n            if (event && !confirmed) event.preventDefault();\r\n            else if(event && confirmed) ResourceService.emptyUpdatedResources();\r\n            else console.log('Someting went wrong. Cannot determine action after locationChangeStart');\r\n        }\r\n    });\r\n    \r\n    // Function to change location to create a new resource\r\n    $scope.newResource = function(){\r\n        $location.url('/' + ifcName + '?new');\r\n    };\r\n    \r\n    // Function (reference) to check if there are pending promises for a resource\r\n    $scope.pendingPromises = ResourceService.pendingPromises;\r\n});\r\n\nangular.module('AmpersandApp')\r\n.directive('myBluronenter', function() {\r\n    return function(scope, element, attrs) {\r\n        element.bind(\"keydown keypress\", function(event) {\r\n            if(event.which === 13) { // 13 = Carriage return\r\n                event.target.blur();\r\n\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.directive('myShowonhoverBox', function (){\r\n    return {\r\n        link : function(scope, element, attrs) {\r\n            if(!element.closest('.box').hasClass('my-showonhover-box-show')) element.hide(); // default hide\r\n            \r\n            element.closest('.box').bind('mouseenter', function() {\r\n                element.closest('.box').addClass('my-showonhover-box-show');\r\n                element.show();\r\n            });\r\n            element.closest('.box').bind('mouseleave', function() {\r\n                element.closest('.box').removeClass('my-showonhover-box-show');\r\n                element.hide();\r\n            });\r\n        }\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.service('ResourceService', function($localStorage, $timeout, $location, Restangular, NotificationService, $q){\r\n    // http://blog.thoughtram.io/angular/2015/07/07/service-vs-factory-once-and-for-all.html\r\n    \r\n    let updatedResources = []; // contains list with updated resource objects in this interface. Used to check if there are uncommmitted changes (patches in cache)\r\n    \r\n    let ResourceService = {\r\n        /**\r\n         * Get resource data given a certain interface (ifc)\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} callingObj will be used for loading indicator\r\n         * @returns {Promise}\r\n         */\r\n        getResource : function(resource, ifc, callingObj){\r\n            promise = Restangular\r\n            .one(resource._path_ + '/' + ifc)\r\n            .get()\r\n            .then(function(data){\r\n                try {\r\n                    data = data.plain();\r\n                }catch(error){}\r\n                if($.isEmptyObject(data)) NotificationService.addInfo('No results found');\r\n                else if(resource[ifc] === null || Array.isArray(resource[ifc])) resource[ifc] = data;\r\n                else angular.extend(resource[ifc], data);\r\n                \r\n                ResourceService.initResourceMetaData(resource);\r\n\r\n                return resource;\r\n            });\r\n            \r\n            // Add promise to loading list\r\n            return ResourceService.addPromiseToResourceLoadingList(callingObj, promise);\r\n        },\r\n\r\n        /**\r\n         * Patch the given resource by calling the API and sending the list of stored patches \r\n         * \r\n         * @param {Object} resource\r\n         * @param {bool} forceSave\r\n         * @returns {Promise}\r\n         */\r\n        patchResource : function(resource, forceSave){\r\n            // Use delegate resource if specified\r\n            if (typeof resource._delegatePatchesTo_ !== 'undefined') {\r\n                resource = resource._delegatePatchesTo_;\r\n            }\r\n\r\n            // Save if autoSave is enabled\r\n            if($localStorage.autoSave || forceSave) {\r\n                promise = Restangular\r\n                .one(resource._path_)\r\n                .patch(resource._patchesCache_, {})\r\n                .then(function(data) {\r\n                    data = data.plain();\r\n                    \r\n                    // Update visual feedback (notifications and buttons)\r\n                    ResourceService.processResponse(resource, data);\r\n\r\n                    // Update resource data\r\n                    if(resource._isRoot_ && data.navTo == null) {\r\n                        resource.get(); // if directed to other page (data.navTo), refresh of data is not needed\r\n                    } else {\r\n                        resource = angular.extend(resource, data.content);\r\n                    }\r\n\r\n                    return {resource : resource, saved: true, committed: data.isCommitted};\r\n                });\r\n\r\n                // Add promise to loading list\r\n                return ResourceService.addPromiseToResourceLoadingList(resource, promise);\r\n            } else {\r\n                // Update visual feedback\r\n                ResourceService.setResourceStatus(resource, 'warning');\r\n                resource._showButtons_ = {'save' : true, 'cancel' : true};\r\n                return $q.resolve({resource : resource, saved : false, committed: false});\r\n            }\r\n        },\r\n        \r\n        /**\r\n         * Cancel unsaved edits and get resource data\r\n         * \r\n         * @param {Object} resource\r\n         * @returns {Promise}\r\n         */\r\n        cancelResource : function(resource){\r\n            promise = Restangular\r\n            .one(resource._path_)\r\n            .get()\r\n            .then(function(data){\r\n                data = data.plain();\r\n                if($.isEmptyObject(data)) NotificationService.addInfo('No results found');\r\n                else angular.extend(resource, data);\r\n                \r\n                // Update visual feedback (notifications and buttons)\r\n                NotificationService.getNotifications();\r\n                ResourceService.initResourceMetaData(resource);\r\n\r\n                return resource;\r\n            });\r\n            \r\n            // Add promise to loading list\r\n            return ResourceService.addPromiseToResourceLoadingList(resource, promise);\r\n        },\r\n        \r\n        /**\r\n         * Create (POST) a new resource to a certain interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} patchResource\r\n         * @param {int} insertAtIndex\r\n         * @returns {Promise}\r\n         */\r\n        createResource : function(resource, ifc, patchResource, insertAtIndex){\r\n            promise = Restangular\r\n            .one(resource._path_).all(ifc)\r\n            .post({}, {})\r\n            .then(function(data){\r\n                data = data.plain();\r\n                newResource = data.content;\r\n\r\n                // Update visual feedback (notifications and buttons)\r\n                ResourceService.processResponse(newResource, data);\r\n\r\n                // If not committed, add this create action to patch list\r\n                if (!data.isCommitted) {\r\n                    ResourceService.addPatch('create', resource, patchResource, ifc, newResource._id_);\r\n                    \r\n                    // Delegate additional patches upward, because this resource does not exist yet\r\n                    // See addPatch() and patchResource() functions\r\n                    newResource._delegatePatchesTo_ = patchResource;\r\n                }\r\n                \r\n                // Add new resource to ifc\r\n                if(Array.isArray(resource[ifc])){ // non-uni = list\r\n                    if(insertAtIndex === 'undefined') insertAtIndex = resource[ifc].length; // append by default\r\n                    resource[ifc].splice(insertAtIndex, 0, newResource);\r\n                }else{ // uni = object\r\n                    resource[ifc] = newResource;\r\n                }\r\n                \r\n                if(resource._isRoot_ && resource._id_ == '_NEW') $location.url('/' + ifc + '/'+ newResource._id_, false);\r\n\r\n                return newResource;\r\n            });\r\n\r\n            // Add promise to loading list\r\n            return ResourceService.addPromiseToResourceLoadingList(patchResource, promise);\r\n        },\r\n        \r\n        /**\r\n         * Remove a resource from a certain interface list\r\n         * \r\n         * @param {Object} parent\r\n         * @param {string} ifc\r\n         * @param {Object} resource\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        removeResource : function(parent, ifc, resource, patchResource){\r\n            // Construct patch(es)\r\n            ResourceService.addPatch('remove', resource, patchResource);\r\n\r\n            // Execute patch\r\n            return ResourceService\r\n            .patchResource(patchResource)\r\n            .then(function(data){\r\n                // Adapt js model\r\n                if(!data.saved) {\r\n                    if(Array.isArray(parent[ifc])) parent[ifc].splice(parent[ifc].indexOf(resource), 1); // non-uni = list\r\n                    else parent[ifc] = null; // uni = object\r\n                }\r\n            });\r\n        },\r\n        \r\n        /**\r\n         * Delete a resource\r\n         * \r\n         * @param {Object} parent\r\n         * @param {string} ifc\r\n         * @param {Object} resource to delete\r\n         * @returns {Promise}\r\n         */\r\n        deleteResource : function(parent, ifc, resource){\r\n            if(confirm('Are you sure?')){\r\n                promise = Restangular\r\n                .one(resource._path_)\r\n                .remove({})\r\n                .then(function(data){\r\n                    data = data.plain();\r\n                    // Update visual feedback (notifications and buttons)\r\n                    NotificationService.updateNotifications(data.notifications);\r\n                    \r\n                    // Remove resource from ifc\r\n                    if(Array.isArray(parent[ifc])) parent[ifc].splice(parent[ifc].indexOf(resource), 1); // non-uni = list\r\n                    else parent[ifc] = null; // uni = object\r\n\r\n                    return parent;\r\n                });\r\n\r\n                // Add promise to loading list\r\n                return ResourceService.addPromiseToResourceLoadingList(resource, promise);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Save/patch a changed attribute\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        saveItem : function(resource, ifc, patchResource){\r\n            // Construct patch(es)\r\n            if(typeof resource[ifc] === 'undefined' || resource[ifc] === '') {\r\n                value = null;\r\n            } else {\r\n                value = resource[ifc];\r\n            }\r\n            ResourceService.addPatch('replace', resource, patchResource, ifc, value);\r\n\r\n            // Register patch\r\n            return ResourceService.patchResource(patchResource);\r\n        },\r\n        \r\n        /**\r\n         * Add an item to an interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} selected item to add to the list\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        addItem : function(resource, ifc, selected, patchResource){\r\n            if(typeof selected.value === 'undefined') {\r\n                //console.log('Value undefined');\r\n                return $q.reject('Value undefined');\r\n            } else if(selected.value === '') {\r\n                //console.log('Empty value selected');\r\n                return $q.reject('Empty value selected');\r\n            } else if(!Array.isArray(resource[ifc])) {\r\n                //console.log('Error: trying to add item to non-array');\r\n                return $q.reject('Error: trying to add item to non-array');\r\n            } else{\r\n                // Adapt in js model\r\n                resource[ifc].push(selected.value);\r\n                \r\n                // Construct patch(es)\r\n                ResourceService.addPatch('add', resource, patchResource, ifc, selected.value);\r\n                return ResourceService.patchResource(patchResource)\r\n                .then(function(data){\r\n                    // Reset selected value\r\n                    delete(selected.value);\r\n                    return data;\r\n                });\r\n            }\r\n        },\r\n        \r\n        /**\r\n         * Remove an item from an interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {int} index\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        removeItem : function(resource, ifc, index, patchResource){\r\n            // Construct patch(es)\r\n            value = resource[ifc][index];\r\n            ResourceService.addPatch('remove', resource, patchResource, ifc, value);\r\n            \r\n            // Adapt js model\r\n            resource[ifc].splice(index, 1);\r\n\r\n            return ResourceService.patchResource(patchResource);\r\n        },\r\n        \r\n        /**\r\n         * Construct, add and return patch object (with attributes 'op', 'path' and 'value')\r\n         * \r\n         * @param {string} operation choose from 'add', 'remove' or 'replace'\r\n         * @param {Object} resource\r\n         * @param {Object} patchResource resource to add patch to\r\n         * @param {string} ifc\r\n         * @param {string} value\r\n         * @returns {Object}\r\n         */\r\n        addPatch : function(operation, resource, patchResource, ifc, value){\r\n            // When patchResource is not provided use the resource itself\r\n            if (typeof patchResource === 'undefined') {\r\n                patchResource = resource;\r\n            }\r\n\r\n            // Use delegate resource if specified\r\n            if (typeof patchResource._delegatePatchesTo_ !== 'undefined') {\r\n                patchResource = patchResource._delegatePatchesTo_;\r\n            }\r\n\r\n            pathLength = patchResource._path_.length;\r\n            \r\n            path = resource._path_.substring(pathLength);\r\n            if(typeof ifc !== 'undefined') path = path + '/' + ifc;\r\n            \r\n            if(typeof value === 'undefined') patch = { op : operation, path : path};\r\n            else patch = { op : operation, path : path, value : value};\r\n\r\n            // Add new patch to patchResource\r\n            if(!Array.isArray(patchResource._patchesCache_)) patchResource._patchesCache_ = [];\r\n            patchResource._patchesCache_.push(patch);\r\n\r\n            // Add resource to updatedResources\r\n            if(updatedResources.indexOf(patchResource) === -1) updatedResources.push(patchResource);\r\n\r\n            return patch;\r\n        },\r\n\r\n        /**\r\n         * Returns if there are unsaved changes (i.e. patches that are not yet sent to the API)\r\n         * \r\n         * @returns {bool}\r\n         */\r\n        checkRequired : function(){ \r\n            return updatedResources.reduce(function(prev, item, index, arr){\r\n                return prev || item._patchesCache_.length;\r\n            }, false);\r\n        },\r\n        \r\n        /**\r\n         * Clear list of updated resources\r\n         */\r\n        emptyUpdatedResources : function(){\r\n            updatedResources = [];\r\n        },\r\n        \r\n        /**\r\n         * Init/reset resource meta data\r\n         * \r\n         * @param {Object} resource\r\n         */\r\n        initResourceMetaData : function(resource){\r\n            resource._showButtons_ = {'save' : false, 'cancel' : false};\r\n            resource._patchesCache_ = [];\r\n            ResourceService.setResourceStatus(resource, 'default');\r\n        },\r\n        \r\n        /**\r\n         * Process response: i.e. set resource buttons and status\r\n         * \r\n         * @param {Object} resource\r\n         * @param {Object} response from API\r\n         * @returns {Object}\r\n         */\r\n        processResponse : function(resource, response){\r\n            NotificationService.updateNotifications(response.notifications);\r\n            \r\n            if(response.isCommitted){\r\n                resource._showButtons_ = {'save' : false, 'cancel' : false};\r\n                resource._patchesCache_ = []; // empty patches cache\r\n                ResourceService.setResourceStatus(resource, 'success');\r\n                \r\n                // After 3 seconds, reset status to default\r\n                $timeout(function(){\r\n                    ResourceService.setResourceStatus(resource, 'default');\r\n                }, 3000);\r\n            }else{\r\n                resource._showButtons_ = {'save' : false, 'cancel' : true};\r\n                ResourceService.setResourceStatus(resource, 'danger');\r\n            }\r\n\r\n            return resource;\r\n        },\r\n        \r\n        /**\r\n         * Set resource status meta data\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} status choose from 'warning', 'danger', 'success' or 'default'\r\n         * @returns {Object}\r\n         */\r\n        setResourceStatus : function(resource, status){\r\n            // Reset all status properties\r\n            resource._status_ = { 'warning' : false,\r\n                                  'danger'  : false,\r\n                                  'default' : false,\r\n                                  'success' : false\r\n                                };\r\n            // Set status property\r\n            resource._status_[status] = true;\r\n            \r\n            return resource;\r\n        },\r\n        \r\n        /**\r\n         * Returns if resource has pending promises\r\n         * \r\n         * @param {Object} resource\r\n         * @returns {bool}\r\n         */\r\n        pendingPromises : function(resource){\r\n            if(!Array.isArray(resource._loading_)) return false; // empty array contains no pending promises\r\n            \r\n            return resource._loading_.some(function(val){\r\n                return val.$$state.status === 0; // promise status: 0 -> pending, 1 -> resolved, 2 -> rejected\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} resource\r\n         * @param {Promise} promise\r\n         * @returns {Promise}\r\n         */\r\n        addPromiseToResourceLoadingList : function(resource, promise){\r\n            if(!Array.isArray(resource._loading_)) resource._loading_ = [];\r\n            resource._loading_.push(promise);\r\n            resource._isLoading_ = true;\r\n\r\n            return promise.finally(function(){\r\n                if(!ResourceService.pendingPromises(resource)) {\r\n                    resource._isLoading_ = false;\r\n                    resource._loading_ = [];\r\n                }\r\n            });\r\n        }\r\n    };\r\n    \r\n    return ResourceService;\r\n});\r\n\nangular.module('AmpersandApp')\r\n.service('LoginService', function($location, $localStorage){\r\n    let urlLoginPage = null;\r\n    \r\n    let service = {\r\n        setLoginPage : function (url) {\r\n            urlLoginPage = url;\r\n        },\r\n\r\n        gotoLoginPage : function () {\r\n            $localStorage.login_urlBeforeLogin = $location.url(); // \"/some/path?foo=bar&baz=xoxo\"\r\n            if (urlLoginPage) {\r\n                $location.url(urlLoginPage);\r\n            }\r\n        },\r\n\r\n        getPageBeforeLogin : function () {\r\n            return $localStorage.login_urlBeforeLogin;\r\n        }\r\n    };\r\n    \r\n    return service;\r\n});\nangular.module('AmpersandApp')\r\n.directive('myNavbarResize', function ($window, $timeout, NavigationBarService) {\r\n    return function (scope, element) {\r\n        var w = angular.element($window);\r\n        \r\n        var resizeNavbar = function() {\r\n            $timeout(function(){\r\n                // moving ifc items from dropdown-menu to navbar itself\r\n                while($('#navbar-interfaces').width() < ($('#navbar-wrapper').width() - $('#navbar-options').width()) &&\r\n                        $('#navbar-interfaces-dropdown-menu').children().length > 0){\r\n                    $(\"#navbar-interfaces-dropdown-menu\").children().first().appendTo(\"#navbar-interfaces\");\r\n                }\r\n                \r\n                // moving ifc items from navbar to dropdown-menu\r\n                while($('#navbar-interfaces').width() > ($('#navbar-wrapper').width() - $('#navbar-options').width())){\r\n                    $(\"#navbar-interfaces\").children().last().prependTo(\"#navbar-interfaces-dropdown-menu\");\r\n                    \r\n                    // show/hide dropdown menu for more interfaces (must be inside loop, because it affects the width of the navbar\r\n                    $('#navbar-interfaces-dropdown').toggleClass('hidden', $('#navbar-interfaces-dropdown-menu').children().length <= 0);\r\n                }\r\n                \r\n                // show/hide dropdown menu when possible\r\n                $('#navbar-interfaces-dropdown').toggleClass('hidden', $('#navbar-interfaces-dropdown-menu').children().length <= 0);\r\n            });\r\n        };\r\n        \r\n        // watch navbar\r\n        NavigationBarService.addObserverCallable(resizeNavbar);\r\n        \r\n        // when window size gets changed\r\n        w.bind('resize', function () {\r\n            resizeNavbar();\r\n        });\r\n        \r\n        // when page loads\r\n        angular.element(document).ready(function(){\r\n            resizeNavbar();\r\n        });\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('NavigationBarController', function ($scope, $route, Restangular, $localStorage, $sessionStorage, $location, NotificationService, RoleService, NavigationBarService) {\r\n    \r\n    $scope.localStorage = $localStorage;\r\n    $scope.sessionStorage = $sessionStorage;\r\n    $scope.loadingNavBar = [];\r\n    $scope.navbar = NavigationBarService.navbar;\r\n    $scope.resetSettingsToDefault = NavigationBarService.resetSettingsToDefault;\r\n    \r\n    $scope.reload = function(){\r\n        $scope.loadingNavBar = [];\r\n        $scope.loadingNavBar.push(NavigationBarService.refreshNavBar());\r\n        $route.reload();\r\n    };\r\n\r\n    $scope.toggleRole = function(roleId, set){\r\n        RoleService.toggleRole(roleId, set);\r\n        $scope.loadingNavBar = [];\r\n        $scope.loadingNavBar.push(\r\n            RoleService.setActiveRoles()\r\n            .then(function(data){\r\n                NavigationBarService.refreshNavBar();\r\n            })\r\n        );\r\n    };\r\n\r\n    $scope.checkAllRules = NotificationService.checkAllRules;\r\n\r\n    $scope.createNewResource = function(resourceType, openWithIfc){\r\n        Restangular.one('resource').all(resourceType)\r\n        .post({}, {})\r\n        .then(\r\n            function(data){\r\n                // Jumps to interface and requests newly created resource\r\n                $location.url(openWithIfc + '/' + data._id_);\r\n            }\r\n        );\r\n    };\r\n    \r\n    $scope.loadingNavBar.push(NavigationBarService.refreshNavBar());\r\n});\r\n\nangular.module('AmpersandApp')\r\n.service('NavigationBarService', function(Restangular, $localStorage, $sessionStorage, $timeout, NotificationService){\r\n    let navbar = {\r\n        home: null, // home/start page, can be set in project.yaml (default: '#/prototype/welcome')\r\n        top: [],\r\n        new: [],\r\n        refresh: [],\r\n        role: [],\r\n        ext: []\r\n    };\r\n    let defaultSettings = {\r\n        notify_showSignals: true,\r\n        notify_showInfos: true,\r\n        notify_showSuccesses: true,\r\n        notify_autoHideSuccesses: true,\r\n        notify_showErrors: true,\r\n        notify_showWarnings: true,\r\n        notify_showInvariants: true,\r\n        autoSave: true\r\n    };\r\n    let observerCallables = [];\r\n\r\n    let notifyObservers = function(){\r\n        angular.forEach(observerCallables, function(callable){\r\n            callable();\r\n        });\r\n    };\r\n\r\n    let service = {\r\n        navbar : navbar,\r\n        defaultSettings : defaultSettings,\r\n\r\n        addObserverCallable : function(callable){\r\n            observerCallables.push(callable);\r\n        },\r\n\r\n        refreshNavBar : function(){\r\n            return Restangular\r\n            .one('app/navbar')\r\n            .get()\r\n            .then(function(data){\r\n                data = data.plain();\r\n\r\n                // Content of navbar\r\n                navbar.home = data.home;\r\n                navbar.top = data.top;\r\n                navbar.new = data.new;\r\n                navbar.refresh = data.refresh;\r\n                navbar.role = data.role;\r\n                navbar.ext = data.ext;\r\n\r\n                // Content for session storage\r\n                $sessionStorage.session = data.session;\r\n                $sessionStorage.sessionRoles = data.sessionRoles;\r\n                $sessionStorage.sessionVars = data.sessionVars;\r\n                \r\n                // Save default settings\r\n                service.defaultSettings = data.defaultSettings;\r\n                service.initializeSettings();\r\n                \r\n                // Update notifications\r\n                NotificationService.updateNotifications(data.notifications);\r\n\r\n                notifyObservers();\r\n            }, function(error){\r\n                service.initializeSettings();\r\n            });\r\n        },\r\n\r\n        initializeSettings : function(){\r\n            let resetRequired = false;\r\n\r\n            // Check for undefined settings\r\n            angular.forEach(service.defaultSettings, function(value, index, obj){\r\n                if($localStorage[index] === undefined) {\r\n                    resetRequired = true;\r\n                }\r\n            });\r\n\r\n            if(resetRequired) service.resetSettingsToDefault();\r\n        },\r\n\r\n        resetSettingsToDefault : function(){\r\n            // all off\r\n            angular.forEach(service.defaultSettings, function(value, index, obj){\r\n                $localStorage[index] = false;\r\n            });\r\n            \r\n            $timeout(function() {\r\n                // Reset to default\r\n                $localStorage.$reset(service.defaultSettings);\r\n            }, 500);\r\n        }\r\n    };\r\n    \r\n    return service;\r\n});\r\n\nangular.module('AmpersandApp')\r\n.service('RoleService', function($sessionStorage, Restangular){\r\n    \r\n    /*\r\n     * Available roles are registered in $sessionStorage.sessionRoles\r\n     * A role has the following attributes: id, label, active\r\n     */\r\n    \r\n    RoleService = {\r\n        selectRole : function(roleId){\r\n            RoleService.toggleRole(roleId, true);\r\n        },\r\n        \r\n        selectRoleByLabel : function (roleLabel){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if(role.label == roleLabel) return RoleService.selectRole(role.id);\r\n            });\r\n        },\r\n        \r\n        toggleRole : function(roleId, set){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if (role.id == roleId) {\r\n                    if(set === undefined) role.active = !role.active;\r\n                    else role.active = set;\r\n                }\r\n            });\r\n        },\r\n        \r\n        getActiveRoleIds : function(){\r\n            var roleIds = [];\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if (role.active === true) {\r\n                    roleIds.push(role.id);\r\n                }\r\n            });\r\n            return roleIds;\r\n        },\r\n        \r\n        deactivateAllRoles : function(){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                role.active = false;\r\n            });\r\n        },\r\n        \r\n        setActiveRoles : function(){\r\n            return Restangular.all('app/roles').patch($sessionStorage.sessionRoles);\r\n        }\r\n    };\r\n    \r\n    return RoleService;\r\n});\r\n\nangular.module('AmpersandApp')\r\n.service('NotificationService', function($localStorage, $sessionStorage, $timeout, Restangular){\r\n    // Initialize notifications container\r\n    let notifications = {\r\n        'signals' : [],\r\n        'invariants' : [],\r\n        'infos' : [],\r\n        'successes' : [],\r\n        'warnings' : [],\r\n        'errors' : []\r\n    };\r\n    \r\n    let NotificationService = {\r\n        notifications : notifications,\r\n        \r\n        // Function to get notifications again\r\n        getNotifications : function(){\r\n            return Restangular\r\n            .one('app/notifications')\r\n            .get()\r\n            .then(\r\n                function(data){\r\n                    data = data.plain();\r\n                    NotificationService.updateNotifications(data);\r\n                },\r\n                function(){\r\n                    NotificationService.addError('Something went wrong while getting notifications');\r\n                }\r\n            );\r\n        },\r\n\r\n        checkAllRules : function(){\r\n            return Restangular\r\n            .one('admin/ruleengine/evaluate/all')\r\n            .get()\r\n            .then(\r\n                function(data){\r\n                    data = data.plain();\r\n                    NotificationService.addSuccess('Evaluated all rules.');\r\n                    NotificationService.updateNotifications(data);\r\n                },function(){\r\n                    NotificationService.addError('Something went wrong while evaluating all rules');\r\n                }\r\n            );\r\n        },\r\n        \r\n        // Function to update notifications after api response\r\n        updateNotifications : function(data){\r\n            if(data === undefined) return;\r\n            \r\n            // Overwrite\r\n            notifications.signals = data.signals;\r\n            notifications.invariants = data.invariants;\r\n            \r\n            // Merge\r\n            notifications.infos = notifications.infos.concat(data.infos);\r\n            notifications.successes = notifications.successes.concat(data.successes);\r\n            notifications.warnings = notifications.warnings.concat(data.warnings);\r\n            notifications.errors = notifications.errors.concat(data.errors);\r\n            \r\n            if($localStorage.notify_autoHideSuccesses){\r\n                $timeout(function() {\r\n                    notifications.successes = [];\r\n                }, 3000);\r\n            }\r\n        },\r\n\r\n        clearNotifications : function () {\r\n            notifications.signals = [];\r\n            notifications.invariants = [];\r\n            notifications.infos = [];\r\n            notifications.successes = [];\r\n            notifications.warnings = [];\r\n            notifications.errors = [];\r\n        },\r\n        \r\n        addSuccess : function(message){\r\n            notifications.successes.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n            \r\n            // TODO: move timeout function here for auto hide successes\r\n        },\r\n        \r\n        addError : function(message, code, persistent, details){\r\n            code = typeof code !== undefined ? code : null;\r\n            persistent = typeof persistent !== undefined ? persistent : false;\r\n            details = typeof details !== undefined ? details : false;\r\n            \r\n            let alreadyExists = false;\r\n            let arr = notifications.errors;\r\n            for (let i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    arr[i].code = code;\r\n                    arr[i].persistent = persistent;\r\n                    arr[i].details = details;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.errors.push({\r\n                'message' : message,\r\n                'code' : code,\r\n                'count' : 1,\r\n                'persistent' : persistent,\r\n                'details' : details\r\n            });\r\n        },\r\n        \r\n        addWarning : function(message){\r\n            let alreadyExists = false;\r\n            let arr = notifications.warnings;\r\n            for (var i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.warnings.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n        },\r\n        \r\n        addInfo : function(message){\r\n            let alreadyExists = false;\r\n            let arr = notifications.infos;\r\n            for (var i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.infos.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n        }\r\n    };\r\n    \r\n    return NotificationService;\r\n});\nangular.module('AmpersandApp')\r\n.controller('NotificationCenterController', function ($scope, $route, Restangular, $localStorage, NotificationService) {\r\n    \r\n    $scope.localStorage = $localStorage;\r\n    $scope.notifications = NotificationService.notifications;\r\n    \r\n    // Hide success-, error-, warnings-, info- and invariant violation messages (not signals) upon route change\r\n    $scope.$on(\"$routeChangeSuccess\", function(){\r\n        $scope.notifications.successes = [];\r\n        $scope.notifications.errors = $scope.notifications.errors.filter(function (error){\r\n            if(error.persistent){\r\n                error.persistent = false;\r\n                return true;\r\n            }\r\n            else return false;\r\n        });\r\n        $scope.notifications.warnings = [];\r\n        $scope.notifications.infos = [];\r\n        $scope.notifications.invariants = [];\r\n    });\r\n    \r\n    // Function to close notifications\r\n    $scope.closeAlert = function(alerts, index) {\r\n        alerts.splice(index, 1);\r\n    };\r\n    \r\n});\r\n\nangular.module('AmpersandApp')\r\n.filter('unsafe', function($sce){\r\n    return $sce.trustAsHtml;\r\n});\r\n\nangular.module('AmpersandApp')\r\n.directive('myNavToInterfaces', function(){\r\n    return {\r\n        restrict : 'E',\r\n        scope : {resource : '=', target : '@'}, // '=' => two-way bind, '@' => evaluates string (use {{}} in html) \r\n        templateUrl : 'app/src/shared/myNavTo/myNavToInterfaces.html',\r\n        transclude : true\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.directive('myNavToOtherInterfaces', function(){\r\n    return {\r\n        restrict : 'E',\r\n        scope  : {resource : '=', target : '@'}, // '=' => two-way bind, '@' => evaluates string (use {{}} in html) \r\n        templateUrl : 'app/src/shared/myNavTo/myNavToOtherInterfaces.html'\r\n    };\r\n});\r\n\nangular.module('AmpersandApp').run(['$templateCache', function($templateCache) {$templateCache.put('app/src/admin/check-rules-menu-item.html','<a ng-click=\"checkAllRules()\"><span class=\"glyphicon glyphicon-check\"></span><span> (Re)evaluate all rules</span></a>');\n$templateCache.put('app/src/admin/execengine-menu-item.html','<a ng-controller=\"ExecEngineController\" href=\"\" ng-click=\"run()\">\\r\\n\\t<span class=\"glyphicon glyphicon-cog\"></span><span> Run execution engine</span>\\r\\n</a>');\n$templateCache.put('app/src/admin/exporter-menu-item.html','<a ng-href=\"api/v1/admin/export/all\">\\r\\n    <span class=\"glyphicon glyphicon-download\"></span><span> Population export</span>\\r\\n</a>');\n$templateCache.put('app/src/admin/installer-menu-item.html','<a href=\"#/admin/installer\">\\r\\n    <span class=\"glyphicon glyphicon-trash\"></span><span> Reinstall application</span>\\r\\n</a>');\n$templateCache.put('app/src/admin/installer.html','<div class=\"container-fluid\" id=\"Interface\">\\r\\n    <div class=\"jumbotron\">\\r\\n        <h1>Installer</h1>\\r\\n        <p>This action will reinstall the application and delete all content.</p>\\r\\n        <p>If provided, the initial population will be installed.</p>\\r\\n        <div class=\"btn-group\">\\r\\n            <button type=\"button\" ng-click=\"install(true)\" class=\"btn btn-lg\" ng-class=\"{\\'btn-danger\\' : (!installing && !installed), \\'btn-warning\\' : installing, \\'btn-success\\' : installed}\" ng-disabled=\"installing\">\\r\\n                <span ng-if=\"!installed && ! installing\">Reinstall application  </span>\\r\\n                <span ng-if=\"installing\">Application installing  </span>\\r\\n                <span ng-if=\"installed\">Application reinstalled  </span>\\r\\n                <img ng-if=\"installing\" ng-src=\"app/images/loading.gif\" style=\"height:20px;\"/>\\r\\n            </button>\\r\\n            <button type=\"button\" class=\"btn btn-lg dropdown-toggle\" ng-class=\"{\\'btn-danger\\' : (!installing && !installed), \\'btn-warning\\' : installing, \\'btn-success\\' : installed}\" ng-disabled=\"installing\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\\r\\n                <span class=\"caret\"></span>\\r\\n            </button>\\r\\n            <ul class=\"dropdown-menu\">\\r\\n                <li><a href=\"\" ng-click=\"install(true, false)\">Reinstall application</a></li>\\r\\n                <li><a href=\"\" ng-click=\"install(false, false)\">Reinstall application (without default population)</a></li>\\r\\n                <li><a href=\"\" ng-click=\"install(true, true)\">Reinstall application (ignore invariant rules)</a></li>\\r\\n            </ul>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>');\n$templateCache.put('app/src/importer/importer.html','<style>\\r\\n.my-drop-zone { \\r\\nborder: dotted 3px lightgray;\\r\\n}\\r\\n\\r\\n/* Default class applied to drop zones on over */\\r\\n.nv-file-over {\\r\\n\\tborder: dotted 3px green;\\r\\n}\\r\\n</style>\\r\\n<div class=\"container-fluid interface\">\\r\\n\\t<fieldset>\\r\\n\\t\\t<legend>Population importer</legend>\\r\\n\\t\\t<div class=\"row\">\\r\\n\\t\\t\\t<div class=\"col-md-3\" nv-file-drop=\"\" uploader=\"uploader\">\\r\\n\\t\\t\\t\\t<h3>Select files</h3>\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t<div ng-show=\"uploader.isHTML5\">\\r\\n\\t\\t\\t\\t<!-- 3. nv-file-over uploader=\"link\" over-class=\"className\" -->\\r\\n\\t\\t\\t\\t\\t<div class=\"well my-drop-zone\" nv-file-over=\"\" uploader=\"uploader\">\\r\\n\\t\\t\\t\\t\\t\\tBase drop zone\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t<!-- Example: nv-file-select=\"\" uploader=\"{Object}\" options=\"{Object}\" filters=\"{String}\" -->\\r\\n\\t\\t\\t\\tMultiple\\r\\n\\t\\t\\t\\t<input type=\"file\" nv-file-select=\"\" uploader=\"uploader\" multiple  /><br/>\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tSingle\\r\\n\\t\\t\\t\\t<input type=\"file\" nv-file-select=\"\" uploader=\"uploader\" />\\r\\n\\t\\t\\t</div>\\t\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t<div class=\"col-md-9\" style=\"margin-bottom: 40px\">\\r\\n\\t\\r\\n\\t\\t\\t\\t<h3>Upload queue</h3>\\r\\n\\t\\t\\t\\t<p>Queue length: {{ uploader.queue.length }}</p>\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t<table class=\"table\">\\r\\n\\t\\t\\t\\t\\t<thead>\\r\\n\\t\\t\\t\\t\\t\\t<tr>\\r\\n\\t\\t\\t\\t\\t\\t\\t<th width=\"50%\">Name</th>\\r\\n\\t\\t\\t\\t\\t\\t\\t<th ng-show=\"uploader.isHTML5\">Size</th>\\r\\n\\t\\t\\t\\t\\t\\t\\t<th ng-show=\"uploader.isHTML5\">Progress</th>\\r\\n\\t\\t\\t\\t\\t\\t\\t<th>Status</th>\\r\\n\\t\\t\\t\\t\\t\\t\\t<th>Actions</th>\\r\\n\\t\\t\\t\\t\\t\\t</tr>\\r\\n\\t\\t\\t\\t\\t</thead>\\r\\n\\t\\t\\t\\t\\t<tbody>\\r\\n\\t\\t\\t\\t\\t\\t<tr ng-repeat=\"item in uploader.queue\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<td><strong>{{ item.file.name }}</strong></td>\\r\\n\\t\\t\\t\\t\\t\\t\\t<td ng-show=\"uploader.isHTML5\" nowrap>{{ item.file.size/1024/1024|number:2 }} MB</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t<td ng-show=\"uploader.isHTML5\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\"progress\" style=\"margin-bottom: 0;\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\"progress-bar\" role=\"progressbar\" ng-style=\"{ \\'width\\': item.progress + \\'%\\' }\"></div>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t<td class=\"text-center\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span ng-show=\"item.isSuccess\"><i class=\"glyphicon glyphicon-ok\"></i></span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span ng-show=\"item.isCancel\"><i class=\"glyphicon glyphicon-ban-circle\"></i></span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span ng-show=\"item.isError\"><i class=\"glyphicon glyphicon-remove\"></i></span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span ng-show=\"item.isUploading\"><img src=\"app/images/loading.gif\" height=\"20\" width=\"20\"></span>\\r\\n\\t\\t\\t\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t<td nowrap>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-success btn-xs\" ng-click=\"item.upload()\" ng-disabled=\"item.isReady || item.isUploading\">  <!-- Removed: \"|| item.isSuccess\" to enable the re-upload of a file.-->\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-upload\"></span> Upload\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-warning btn-xs\" ng-click=\"item.cancel()\" ng-disabled=\"!item.isUploading\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-danger btn-xs\" ng-click=\"item.remove()\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-trash\"></span> Remove\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t\\t\\t\\t</tr>\\r\\n\\t\\t\\t\\t\\t</tbody>\\r\\n\\t\\t\\t\\t</table>\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t<div>\\r\\n\\t\\t\\t\\t\\t<div>\\r\\n\\t\\t\\t\\t\\t\\tQueue progress:\\r\\n\\t\\t\\t\\t\\t\\t<div class=\"progress\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\"progress-bar\" role=\"progressbar\" ng-style=\"{ \\'width\\': uploader.progress + \\'%\\' }\"></div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"uploader.uploadAll()\" ng-disabled=\"!uploader.getNotUploadedItems().length\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-upload\"></span> Upload all\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-warning btn-sm\" ng-click=\"uploader.cancelAll()\" ng-disabled=\"!uploader.isUploading\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel all\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-danger btn-sm\" ng-click=\"uploader.clearQueue()\" ng-disabled=\"!uploader.queue.length\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-trash\"></span> Remove all\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t</div>\\t\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</fieldset>\\r\\n</div>');\n$templateCache.put('app/src/importer/menu-item.html','<a ng-href=\"#/ext/importer/\">\\r\\n    <span class=\"glyphicon glyphicon-upload\"></span><span> Population importer</span>\\r\\n</a>');\n$templateCache.put('app/src/navbar/navigationBar.html','<nav class=\"navbar navbar-default\" role=\"navigation\" ng-controller=\"NavigationBarController\" cg-busy=\"{promise:loadingNavBar}\">\\r\\n    <div id=\"navbar-wrapper\" class=\"container\">\\r\\n        <ul class=\"nav navbar-nav\" id=\"navbar-interfaces\" my-navbar-resize>\\r\\n            <li ng-show=\"navbar.home\"><a ng-href=\"{{navbar.home}}\"><span class=\"glyphicon glyphicon-home\"></span></a></li>\\r\\n            <li id=\"navbar-interfaces-dropdown\" class=\"dropdown\">\\r\\n                <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"glyphicon glyphicon-menu-hamburger\"></span></a>\\r\\n                <ul id=\"navbar-interfaces-dropdown-menu\" class=\"dropdown-menu\" role=\"menu\"></ul>\\r\\n            </li>\\r\\n            <li id=\"{{interface.label}}\" ng-repeat=\"interface in navbar.top\"> <!-- the interface id is there so we can style specific menu items with css -->\\r\\n                <a href=\"#/{{interface.id}}\">\\r\\n                    <span class=\"glyphicon glyphicon-list-alt\"></span> {{interface.label}}</a>\\r\\n            </li>\\r\\n        </ul>\\r\\n        <ul class=\"nav navbar-nav navbar-right\" id=\"navbar-options\">\\r\\n            <!-- hidden on extra small devices, e.g. phone (<768px) -->\\r\\n            <li class=\"dropdown hidden-xs\" uib-tooltip=\"Notification menu\" tooltip-trigger=\"mouseenter\" tooltip-placement=\"left\">\\r\\n                <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"glyphicon glyphicon-bullhorn\"></span></a>\\r\\n                <ul class=\"dropdown-menu\" role=\"menu\" ng-click=\"$event.stopPropagation();\">\\r\\n                    <li class=\"dropdown-header\">Transaction settings</li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showSignals\"> Show signals</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showInvariants\"> Show invariants</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.autoSave\"> Auto save changes</switch></li>\\r\\n                    <li class=\"dropdown-header\">User logs</li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showErrors\"> Show errors</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showWarnings\"> Show warnings</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showInfos\"> Show infos</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showSuccesses\"> Show successes</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_autoHideSuccesses\"> Auto hide successes</switch></li>\\r\\n                    <li class=\"divider\" role=\"presentation\"></li>\\r\\n                        <li><a href=\"\" ng-click=\"resetSettingsToDefault();\"><span class=\"glyphicon glyphicon-repeat\" style=\"margin: 4px; width: 30px;\"></span> Default settings</a></li>\\r\\n                </ul>\\r\\n            </li>\\r\\n            \\r\\n            <!-- hidden on extra small devices, e.g. phone (<768px) -->\\r\\n            <li class=\"dropdown hidden-xs\" uib-tooltip=\"Tool menu\" tooltip-trigger=\"mouseenter\" tooltip-placement=\"left\">\\r\\n                <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"glyphicon glyphicon-th\"></span></a>\\r\\n                <ul class=\"dropdown-menu\" role=\"menu\">\\r\\n                    <li ng-repeat=\"app in navbar.refresh\" ng-include=\"app.url\"/>\\r\\n                    <li><a href=\"\" ng-click=\"reload()\"><span class=\"glyphicon glyphicon-refresh\"></span> Refresh page</a></li>\\r\\n                    <li ng-repeat=\"ext in navbar.ext\" ng-include=\"ext.url\"/>\\r\\n                </ul>\\r\\n            </li>\\r\\n            \\r\\n            <!-- hidden on extra small devices, e.g. phone (<768px) -->\\r\\n            <li ng-if=\"navbar.new.length\" class=\"dropdown hidden-xs\" uib-tooltip=\"Create new\" tooltip-trigger=\"mouseenter\" tooltip-placement=\"left\">\\r\\n                <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\\r\\n                    <span class=\"glyphicon glyphicon-plus\"></span>\\r\\n                </a>\\r\\n                <ul class=\"dropdown-menu\" role=\"menu\">\\r\\n                    <li ng-repeat=\"item in navbar.new\" ng-class=\"{\\'dropdown-submenu\\' : item.ifcs.length > 1}\">\\r\\n                        <!--<a  style=\"position:relative; display:inline-block;\">-->\\r\\n                        <a ng-if=\"item.ifcs.length > 1\" tabindex=\"-1\" href=\"#\">{{item.label}}</a>\\r\\n                        <ul ng-if=\"item.ifcs.length > 1\" class=\"dropdown-menu\" role=\"menu\">\\r\\n                            <li ng-repeat=\"ifc in item.ifcs\">\\r\\n                                <a tabindex=\"-1\" href=\"#\" ng-click=\"createNewResource(ifc.resourceType, ifc.link);\">{{ifc.label}}</a>\\r\\n                            </li>\\r\\n                        </ul>\\r\\n                        \\r\\n                        <a ng-if=\"item.ifcs.length == 1\" href=\"\" ng-click=\"createNewResource(item.ifcs[0].resourceType, item.ifcs[0].link);\">{{item.label}}</a>\\r\\n                        <span ng-if=\"item.ifcs.length == 0\">{{item.label}}</span>\\r\\n                    </li>\\r\\n                </ul>\\r\\n            </li>\\r\\n            \\r\\n            <li ng-if=\"sessionStorage.sessionRoles.length || navbar.role.length\" class=\"dropdown\" uib-tooltip=\"Role menu\" tooltip-trigger=\"mouseenter\" tooltip-placement=\"left\">\\r\\n                <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"glyphicon glyphicon-user\"></span></a>\\r\\n                <ul class=\"dropdown-menu\" role=\"menu\">\\r\\n                    <li ng-repeat=\"role in sessionStorage.sessionRoles\" ng-click=\"$event.stopPropagation();\"><switch ng-model=\"role.active\" ng-click=\"toggleRole(role.id);\"> {{role.label}}</switch></li>\\r\\n                    <li ng-if=\"navbar.role.length && sessionStorage.sessionRoles.length\" class=\"divider\" role=\"presentation\"></li>\\r\\n                    <li ng-repeat=\"ext in navbar.role\" ng-include=\"ext.url\"/>\\r\\n                </ul>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </div>\\r\\n</nav>');\n$templateCache.put('app/src/shared/404.html','<!-- 404 page -->\\r\\n<div class=\"container-fluid\" id=\"Interface\">\\r\\n    <div class=\"row\">\\r\\n        <div class=\"col-md-4\">\\r\\n            <h1>404 Page not found</h1>\\r\\n            <p>The requested page does not exist.</p>\\r\\n            <p><a class=\"btn btn-primary btn-lg\" href=\"#/\" role=\"button\">Goto startpage</a></p>\\r\\n        </div>\\r\\n        <div>\\r\\n            <img src=\"app/images/404-image.png\">\\r\\n        </div>\\r\\n    </div>\\r\\n</div>');\n$templateCache.put('app/src/shared/header.html','<!-- by default no header -->');\n$templateCache.put('app/src/shared/welcome.html','<!-- Home screen -->\\r\\n<div class=\"container-fluid\" id=\"Interface\">\\r\\n    <div class=\"jumbotron\">\\r\\n        <h1>Hello, world!</h1>\\r\\n        <p>You\\'ve successfully generated your Ampersand prototype.</p>\\r\\n        <p><a class=\"btn btn-primary btn-lg\" href=\"https://ampersandtarski.gitbooks.io/documentation\" target=\"_blank\" role=\"button\">See our documentation &raquo;</a></p>\\r\\n    </div>\\r\\n</div>\\r\\n');\n$templateCache.put('app/src/notifications/notificationCenter.html','<div class=\"container-fluid\">\\r\\n    <div id=\"notificationCenter\" ng-controller=\"NotificationCenterController\">\\r\\n        \\r\\n        <div id=\"infos\" ng-show=\"localStorage.notify_showInfos\">\\r\\n            <div class=\"alert alert-info alert-dismissible\" role=\"alert\" ng-repeat=\"info in notifications.infos\">\\r\\n                <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" ng-click=\"closeAlert(notifications.infos, $index);\"><span aria-hidden=\"true\">&times;</span></button>\\r\\n                <span class=\"glyphicon glyphicon-info-sign\"></span><span> {{info.message}}</span>\\r\\n            </div>\\r\\n        </div>\\r\\n        \\r\\n        <div id=\"warnings\" ng-show=\"localStorage.notify_showWarnings\">\\r\\n            <div class=\"alert alert-warning alert-dismissible\" role=\"alert\" ng-repeat=\"warning in notifications.warnings\">\\r\\n                <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" ng-click=\"closeAlert(notifications.warnings, $index);\"><span aria-hidden=\"true\">&times;</span></button>\\r\\n                <span class=\"glyphicon glyphicon-warning-sign\"></span><span> {{warning.message}}</span>\\r\\n                <span class=\"badge pull-right\" ng-show=\"warning.count > 1\">{{warning.count}}</span>\\r\\n            </div>\\r\\n        </div>\\r\\n        \\r\\n        <div id=\"errors\" ng-show=\"localStorage.notify_showErrors\">\\r\\n            <div class=\"panel panel-danger\" id=\"error-panel-{{key}}\" ng-repeat=\"(key, error) in notifications.errors\">\\r\\n                <div class=\"panel-heading btn btn-block\" data-toggle=\"collapse\" data-target=\"#error-body-{{key}}\">\\r\\n                    <div class=\"text-left\">\\r\\n                        <span class=\"glyphicon glyphicon-exclamation-sign\"></span> <span ng-bind-html=\"error.message | unsafe\"></span>\\r\\n                        <button type=\"button\" class=\"close\" data-target=\"#error-panel-{{key}}\" data-dismiss=\"alert\" aria-label=\"Dismiss\" ng-click=\"closeAlert(notifications.errors, $index);\">\\r\\n                            <span aria-hidden=\"true\">&times;</span>\\r\\n                        </button>\\r\\n                        <span class=\"badge pull-right\" ng-show=\"error.count > 1\">{{error.count}}</span>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\"panel-body collapse\" id=\"error-body-{{key}}\">\\r\\n                    <div ng-if=\"error.details\" ng-bind-html=\"error.details | unsafe\"></div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        \\r\\n        <div id=\"invariants\" ng-show=\"localStorage.notify_showInvariants\">\\r\\n            <div class=\"panel panel-danger\" ng-repeat=\"(key, val) in notifications.invariants\">\\r\\n                <div class=\"panel-heading btn btn-block\" data-toggle=\"collapse\" data-target=\"#invariant-{{key}}\">\\r\\n                    <div class=\"text-left\" style=\"display:flex; align-items:center;\">\\r\\n                        <span class=\"glyphicon glyphicon-warning-sign\"></span>\\r\\n                        <div marked=\"val.ruleMessage\" style=\"display:inline-block; margin: 0px 10px;\"></div> <!-- uses angular-marked directive -->\\r\\n                        <span class=\"badge\" style=\"margin-left:auto;\">{{val.tuples.length}}</span>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <ul class=\"list-group collapse\" id=\"invariant-{{key}}\">\\r\\n                    <li class=\"list-group-item\" ng-repeat=\"tuple in val.tuples track by $index\">\\r\\n                        <span>{{tuple.violationMessage}}</span>\\r\\n                    </li>\\r\\n                </ul>\\r\\n            </div>\\r\\n        </div>\\r\\n                    \\r\\n        <div id=\"signals\" ng-show=\"localStorage.notify_showSignals\">\\r\\n            <div class=\"panel panel-warning\" ng-repeat=\"(key, val) in notifications.signals\">\\r\\n                <div class=\"panel-heading btn btn-block\" data-toggle=\"collapse\" data-target=\"#violation-{{key}}\">\\r\\n                    <div class=\"text-left\" style=\"display:flex; align-items:center;\">\\r\\n                        <span class=\"glyphicon glyphicon-warning-sign\"></span>\\r\\n                        <div marked=\"val.message\" style=\"display:inline-block; margin: 0px 10px;\"></div> <!-- uses angular-marked directive -->\\r\\n                        <span class=\"badge\" style=\"margin-left:auto;\">{{val.violations.length}}</span>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <ul class=\"list-group collapse\" id=\"violation-{{key}}\">\\r\\n                    <li class=\"dropdown list-group-item\" ng-repeat=\"violation in val.violations track by $index\">\\r\\n                        <div ng-if=\"violation.ifcs.length > 1\">\\r\\n                            <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">{{violation.message}}</a>\\r\\n                            <ul class=\"dropdown-menu\" role=\"menu\">\\r\\n                                <li ng-repeat=\"ifc in violation.ifcs\">\\r\\n                                    <a ng-href=\"{{ifc.link}}\" data-toggle=\"collapse\" data-target=\"#violation-{{key}}\"><small>View</small> {{ifc.label}}</a>\\r\\n                                </li>\\r\\n                            </ul>\\r\\n                        </div>\\r\\n                        <a ng-if=\"violation.ifcs.length == 1\" ng-href=\"{{violation.ifcs[0].link}}\" data-toggle=\"collapse\" data-target=\"#violation-{{key}}\">{{violation.message}}</a>\\r\\n                        <span ng-if=\"violation.ifcs.length == 0\">{{violation.message}}</span>\\r\\n                    </li>\\r\\n                </ul>\\r\\n            </div>\\r\\n        </div>\\r\\n        \\r\\n        <!-- Success notifications must be last in notifications center because of position:absolute -->\\r\\n        <div id=\"successes\" ng-show=\"localStorage.notify_showSuccesses\">\\r\\n            <div class=\"alert alert-success alert-dismissible\" role=\"alert\" ng-repeat=\"success in notifications.successes\">\\r\\n                <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" ng-click=\"closeAlert(notifications.successes, $index);\"><span aria-hidden=\"true\">&times;</span></button>\\r\\n                <span class=\"glyphicon glyphicon-ok-sign\"></span><span> {{success.message}}</span>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>');\n$templateCache.put('app/src/shared/myNavTo/myNavToInterfaces.html','<div ng-if=\"resource._ifcs_.length > 1\" style=\"position:relative; display:inline-block;\">\\r\\n    <a class=\"dropdown-toggle\" data-toggle=\"dropdown\"><ng-transclude></ng-transclude></a>\\r\\n    <ul class=\"dropdown-menu\" role=\"menu\">\\r\\n        <li ng-repeat=\"ifc in resource._ifcs_\">\\r\\n            <a ng-href=\"#/{{ifc.id}}/{{resource._id_}}\" target=\"{{target}}\">{{ifc.label}}</a>\\r\\n        </li>\\r\\n    </ul>\\r\\n</div>\\r\\n<a ng-if=\"resource._ifcs_.length == 1\" ng-href=\"#/{{resource._ifcs_[0].id}}/{{resource._id_}}\" target=\"{{target}}\"><ng-transclude></ng-transclude></a>\\r\\n<span ng-if=\"resource._ifcs_.length == 0 || resource._ifcs_ == undefined\"><ng-transclude></ng-transclude></span>');\n$templateCache.put('app/src/shared/myNavTo/myNavToOtherInterfaces.html','<!-- This menu includes the interface where the user currently is -->\\r\\n<div ng-if=\"resource._ifcs_.length\" style=\"position:relative; display: inline-block;\">\\r\\n    <button type=\"button\" class=\"btn btn-xs dropdown-toggle\" data-toggle=\"dropdown\">\\r\\n        <span class=\"glyphicon glyphicon-menu-hamburger\"></span>\\r\\n    </button>\\r\\n    <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\\r\\n        <li ng-repeat=\"ifc in resource._ifcs_\">\\r\\n            <a ng-href=\"#/{{ifc.id}}/{{resource._id_}}\" target=\"{{target}}\">{{ifc.label}}</a>\\r\\n        </li>\\r\\n    </ul>\\r\\n</div>');}]);",null]}