{"version":3,"sources":["ampersand.js","module.js","admin/execengine.controller.js","admin/installer.controller.js","angular-ui-switch/angular-ui-switch-adapted.js","importer/importer.module.js","interfacing/atomic.controller.js","interfacing/atomicDate.controller.js","interfacing/atomicPassword.controller.js","interfacing/atomicTypeAhead.controller.js","interfacing/atomicUploadFile.controller.js","interfacing/box.controller.js","interfacing/interface.controller.js","interfacing/myBluronenter.directive.js","interfacing/myShowonooverBox.directive.js","interfacing/resource.service.js","login/login.service.js","navbar/myNavbarResize.directive.js","navbar/myNavItem.directive.js","navbar/navigationBar.controller.js","navbar/navigationBar.service.js","navbar/role.service.js","notifications/notification.service.js","notifications/notificationCenter.controller.js","notifications/unsafe.filter.js","oauthlogin/login.module.js","shared/myNavTo/myNavToInterfaces.directive.js","shared/myNavTo/myNavToOtherInterfaces.directive.js","templates.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","angular","module","config","$routeProvider","$locationProvider","when","resolveRedirectTo","NavigationBarService","getRouteForHomePage","controller","templateUrl","interfaceLabel","LoginService","getPageBeforeLogin","otherwise","redirectTo","hashPrefix","RestangularProvider","setBaseUrl","setDefaultHeaders","Content-Type","setPlainByDefault","run","Restangular","$rootScope","$location","$route","NotificationService","RoleService","addFullRequestInterceptor","element","operation","what","url","headers","params","addResponseInterceptor","data","response","deferred","sessionRefreshAdvice","refreshNavBar","navTo","setErrorInterceptor","responseHandler","message","details","error","addInfo","msg","status","loginPage","setLoginPage","setSessionIsLoggedIn","gotoLoginPage","statusText","addError","html","undefined","notifications","updateNotifications","getCurrentDateTime","Date","original","reload","lastRoute","current","un","$on","apply","value","backdrop","minDuration","$scope","one","get","then","installing","installed","install","defPop","ignoreInvariantRules","clearNotifications","defaultPop","deactivateAllRoles","directive","restrict","replace","transclude","template","attrs","ngModel","ngClick","service","FileUploader","uploader","onSuccessItem","fileItem","onErrorItem","item","ImportService","requires","push","ResourceService","selected","saveItem","addItem","removeItem","remove","removeResource","deleteResource","pad","number","r","String","length","modifyToJSON","toJSON","this","getUTCFullYear","getMonth","getDate","isOpen","watchDateObject","resource","ifc","$watch","openDatepicker","$event","preventDefault","stopPropagation","saveDateItem","property","patchResource","addDateItem","console","log","patchPasswordField","addPatch","hasNoResults","getTypeahead","resourceType","forceGetCall","typeahead","all","getList","$object","typeaheadOnSelect","$item","$model","$label","_id_","Array","isArray","saved","copy","typeAheadCreate","alias","formData","removeAfterUpload","autoUpload","newResource","content","splice","createResource","save","cancel","cancelResource","event","next","checkRequired","confirmed","confirm","emptyUpdatedResources","pendingPromises","requireArray","variable","scope","bind","which","target","blur","link","closest","hasClass","hide","addClass","show","removeClass","$localStorage","$timeout","$q","updatedResources","getResource","callingObj","tgtId","_path_","promise","$","isEmptyObject","extend","initResourceMetaData","addPromiseToResourceLoadingList","forceSave","_delegatePatchesTo_","autoSave","patch","_patchesCache_","processResponse","_isRoot_","committed","isCommitted","setResourceStatus","_showButtons_","resolve","getNotifications","insertAtIndex","post","parent","indexOf","reject","index","pathLength","path","substring","op","reduce","prev","arr","_status_","warning","danger","default","success","_loading_","some","val","$$state","_isLoading_","$sessionStorage","urlLoginPage","login_urlBeforeLogin","sessionIsLoggedIn","session","loggedIn","bool","getSessionVars","sessionVars","previous","$$route","originalPath","$window","w","resizeNavbar","width","children","first","appendTo","toggleClass","last","prependTo","addObserverCallable","document","ready","attr","hasChildren","localStorage","loadingNavBar","navbar","resetSettingsToDefault","getSessionRoles","sessionRoles","toggleRole","roleId","set","setActiveRoles","checkAllRules","createNewResource","openWithIfc","home","top","new","role","ext","observerCallables","pendingNavbarPromise","getNavbarPromise","defaultSettings","notify_showSignals","notify_showInfos","notify_showSuccesses","notify_autoHideSuccesses","notify_showErrors","notify_showWarnings","notify_showInvariants","callable","menus","list","idAttr","parentAttr","childrenAttr","treeList","lookup","forEach","treeify","navs","map","mainMenu","find","menu","id","initializeSettings","resetRequired","$reset","selectRole","selectRoleByLabel","roleLabel","label","active","getActiveRoleIds","roleIds","signals","invariants","infos","successes","warnings","errors","addSuccess","concat","count","code","persistent","alreadyExists","i","addWarning","filter","closeAlert","alerts","$sce","trustAsHtml","idps","identityProviders","logout","$templateCache","put"],"mappings":"AAAA,aAEA,SAASA,QAAQC,GAAmV,OAAtOD,QAArD,mBAAXE,QAAoD,iBAApBA,OAAOC,SAAmC,SAAiBF,GAAO,cAAcA,GAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXC,QAAyBD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,IAAyBA,GCDnXK,QAAAC,OAAA,eAAA,CAAA,aAAA,UAAA,aAAA,cAAA,eAAA,WAAA,SAAA,UAAA,YAAA,oBAAA,8BAAA,cACAC,OAAAA,CAAAA,iBAAAA,oBAAA,SAAAC,EAAAC,GACAD,EAEAE,KAAA,IAAA,CACAC,kBAAA,CAAA,uBAAA,SAAAC,GACA,OAAAA,EAAAC,0BAGAH,KAAA,qBAAA,CACAI,WAAA,GACAC,YAAA,8BACAC,eAAA,YAGAN,KAAA,mBAAA,CACAI,WAAA,sBACAC,YAAA,+BACAC,eAAA,cAEAN,KAAA,wBAAA,CACAC,kBAAA,CAAA,eAAA,SAAAM,GACA,OAAAA,EAAAC,yBAEAR,KAAA,OAAA,CACAK,YAAA,0BACAC,eAAA,QAEAG,UAAA,CAAAC,WAAA,SAEAX,EAAAY,WAAA,OACAd,OAAAA,CAAAA,sBAAA,SAAAe,GAEAA,EAAAC,WAAA,UACAD,EAAAE,kBAAA,CAAAC,eAAA,qBACAH,EAAAI,mBAAA,MAEAC,IAAAA,CAAAA,cAAAA,aAAAA,YAAAA,SAAAA,sBAAAA,cAAAA,uBAAAA,eAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArB,EAAAK,GAEAW,EAAAM,0BAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAGA,OAAAA,IAGAZ,EAAAa,uBAAA,SAAAC,EAAAN,EAAAC,EAAAC,EAAAK,EAAAC,GAIA,MAHA,OAAAR,GAAA,WAAAA,GAAAM,EAAAG,sBAAAjC,EAAAkC,gBACA,OAAAJ,GAAA,IAAAK,OAAAjB,EAAAQ,IAAAI,EAAAK,OAEAL,IAGAd,EAAAoB,oBAAA,SAAAL,EAAAC,EAAAK,GACA,IAAAC,EACAC,EAgCA,MA/BA,WAAApD,QAAA4C,EAAAD,OAAA,OAAAC,EAAAD,MACA,KAAAC,EAAAD,KAAAU,MACApB,EAAAqB,QAAAV,EAAAD,KAAAY,KAAA,sBAEA,KAAAX,EAAAY,QACAZ,EAAAD,KAAAA,KAAAc,WACAvC,EAAAwC,aAAAd,EAAAD,KAAAA,KAAAc,WAEAvC,EAAAyC,sBAAA,GACA9C,EAAAkC,gBACA7B,EAAA0C,gBACA3B,EAAAqB,QAAAV,EAAAD,KAAAY,KAAA,wCAGAJ,EAAAP,EAAAD,KAAAY,KAAAX,EAAAiB,WACA5B,EAAA6B,SAAAX,EAAAP,EAAAY,QAAA,EAAAZ,EAAAD,KAAAoB,YAGAC,IAAApB,EAAAD,KAAAsB,eAAAhC,EAAAiC,oBAAAtB,EAAAD,KAAAsB,eACA,MAAArB,EAAAD,KAAAK,OACAjB,EAAAQ,IAAAK,EAAAD,KAAAK,SAGA,IAAAJ,EAAAY,OACAvB,EAAA6B,SAAA,wEAAA,MAAA,IAEAX,EAAAP,EAAAY,OAAA,IAAAZ,EAAAiB,WACAT,EAAAR,EAAAD,KACAV,EAAA6B,SAAAX,EAAAP,EAAAY,QAAA,EAAAJ,KAGA,IAGAtB,EAAAqC,mBAAA,WACA,OAAA,IAAAC,MAIA,IAAAC,EAAAtC,EAAAQ,IACAR,EAAAQ,IAAA,SAAAA,EAAA+B,GACA,IAAA,IAAAA,EACA,IAAAC,EAAAvC,EAAAwC,QACAC,EAAA3C,EAAA4C,IAAA,yBAAA,WACA1C,EAAAwC,QAAAD,EACAE,MAGA,OAAAJ,EAAAM,MAAA5C,EAAA,CAAAQ,QAEAqC,MAAA,iBAAA,CACAzB,QAAA,aACA0B,UAAA,EAGAC,YAAA,MC9GAxE,QAAAC,OAAA,gBACAQ,WAAA,uBAAA,CAAA,SAAA,cAAA,sBAAA,SAAAgE,EAAAlD,EAAAI,GACA8C,EAAAnD,IAAA,WACAC,EAAAmD,IAAA,wBAAAC,MACAC,KACA,SAAAvC,GACAV,EAAAiC,oBAAAvB,SCPArC,QAAAC,OAAA,gBACAQ,WAAA,sBAAA,CAAA,SAAA,cAAA,sBAAA,cAAA,uBAAA,SAAAgE,EAAAlD,EAAAI,EAAAC,EAAArB,GACAkE,EAAAI,YAAA,EACAJ,EAAAK,WAAA,EAEAL,EAAAM,QAAA,SAAAC,EAAAC,GACAR,EAAAI,YAAA,EACAJ,EAAAK,WAAA,EACAnD,EAAAuD,qBAEA3D,EACAmD,IAAA,mBACAC,IAAA,CAAAQ,WAAAH,EAAAC,qBAAAA,IACAL,KAAA,SAAAvC,GACAV,EAAAiC,oBAAAvB,GACA9B,EAAAkC,gBAGAb,EAAAwD,qBAEAX,EAAAI,YAAA,EACAJ,EAAAK,WAAA,GACA,WACAL,EAAAI,YAAA,EACAJ,EAAAK,WAAA,QCxBA9E,QAAAC,OAAA,WAAA,IAEAoF,UAAA,SAAA,WACA,MAAA,CACAC,SAAA,KACAC,SAAA,EACAC,YAAA,EACAC,SAAA,SAAA3D,EAAA4D,GACA,IAAAjC,EAAA,GAYA,OAXAA,GAAA,aACAA,GAAAiC,EAAAC,UAAAD,EAAAE,QAAA,cAAAF,EAAAC,QAAA,KAAAD,EAAAC,QAAA,IAAA,GACAlC,GAAA,IACAA,GAAA,QACAA,GAAA,kBAAAiC,EAAA,MAAA,IAAAA,EAAA,MAAA,IAAA,IACAjC,GAAA,wBAAAiC,EAAAC,QAAA,MACAlC,GAAA,IACAA,GAAA,kBACAA,GAAA,UACAA,GAAA,8BACAA,GAAA,WCnBAzD,QAAAC,OAAA,gBACAC,OAAAA,CAAAA,iBAAA,SAAAC,GACAA,EACAE,KAAA,gBAAA,CACAI,WAAA,6BACAC,YAAA,iCACAC,eAAA,2BAEAkF,QAAA,gBAAA,CAAA,eAAA,sBAAA,uBAAA,SAAAC,EAAAnE,EAAApB,GACA,IAAAwF,EAAA,IAAAD,EAAA,CACA7D,IAAA,wBAwBA,OArBA8D,EAAAC,cAAA,SAAAC,EAAA3D,EAAAY,EAAAhB,GACAP,EAAAiC,oBAAAtB,EAAAqB,eACArB,EAAAE,sBAAAjC,EAAAkC,iBAGAsD,EAAAG,YAAA,SAAAC,EAAA7D,EAAAY,EAAAhB,GACA,IAAAW,EACAC,EACA,WAAApD,QAAA4C,SACAoB,IAAApB,EAAAqB,eACAhC,EAAAiC,oBAAAtB,EAAAqB,eAEAd,EAAAP,EAAAW,KAAA,wBACAtB,EAAA6B,SAAAX,EAAAK,GAAA,EAAAZ,EAAAmB,QAEAZ,EAAAK,EAAA,yBACAJ,EAAAR,EACAX,EAAA6B,SAAAX,EAAAK,GAAA,EAAAJ,KAIA,CAAAiD,SAAAA,MACAtF,WAAA,6BAAA,CAAA,SAAA,gBAAA,SAAAgE,EAAA2B,GACA3B,EAAAsB,SAAAK,EAAAL,YACAM,SAAAC,KAAA,qBCrCAtG,QAAAC,OAAA,gBACAQ,WAAA,mBAAA,CAAA,SAAA,kBAAA,SAAAgE,EAAA8B,GAMA9B,EAAA+B,SAAA,GAEA/B,EAAAgC,SAAAF,EAAAE,SAEAhC,EAAAiC,QAAAH,EAAAG,QAEAjC,EAAAkC,WAAAJ,EAAAI,WAEAlC,EAAAmC,OAAAL,EAAAM,eAEApC,EAAA,OAAA8B,EAAAO,kBCjBA9G,QAAAC,OAAA,gBACAQ,WAAA,uBAAA,CAAA,SAAA,kBAAA,SAAAgE,EAAA8B,GAsBA,SAAAQ,EAAAC,GACA,IAAAC,EAAAC,OAAAF,GAIA,OAHA,IAAAC,EAAAE,SACAF,EAAA,IAAAA,GAEAA,EAGA,SAAAG,EAAAzH,GACA,OAAAA,IACAA,EAAA0H,OAAA,WACA,OAAAC,KAAAC,iBACA,IAAAR,EAAAO,KAAAE,WAAA,GACA,IAAAT,EAAAO,KAAAG,aAjCAhD,EAAAiD,QAAA,EAIAjD,EAAAkD,gBAAA,SAAAC,EAAAC,GACApD,EAAAqD,OAAA,WAAA,WACAF,EAAAC,aAAA/D,MAEA,OAAA8D,EAAAC,KAAAD,EAAAC,GAAA,IAAA/D,KAAA8D,EAAAC,OAEA,IAGApD,EAAAsD,eAAA,SAAAC,GACAA,EAAAC,iBACAD,EAAAE,kBACAzD,EAAAiD,QAAA,GAsBAjD,EAAA+B,SAAA,CAAAlC,MAAA,IAEAG,EAAA0D,aAAA,SAAAxI,EAAAyI,EAAAC,GACAjB,EAAAzH,EAAAyI,IACA7B,EAAAE,SAAA9G,EAAAyI,EAAAC,IAGA5D,EAAA6D,YAAA,SAAA3I,EAAAyI,EAAA5B,EAAA6B,GACA,KAAA7B,EAAAlC,OACA8C,EAAAZ,EAAAlC,OACAiC,EAAAG,QAAA/G,EAAAyI,EAAA5B,EAAA6B,IAEAE,QAAAC,IAAA,2BCrDAxI,QAAAC,OAAA,gBACAQ,WAAA,2BAAA,CAAA,SAAA,kBAAA,SAAAgE,EAAA8B,GAEA9B,EAAAgE,mBAAA,SAAAb,EAAAC,EAAAQ,GACA,IAAA/D,EAEAA,OADA,IAAAsD,EAAAC,IAAA,KAAAD,EAAAC,GACA,KAEAD,EAAAC,GAEAtB,EAAAmC,SAAA,UAAAd,EAAAS,EAAAR,EAAAvD,OCVAtE,QAAAC,OAAA,gBACAQ,WAAA,4BAAA,CAAA,SAAA,cAAA,kBAAA,SAAAgE,EAAAlD,EAAAgF,GAMA9B,EAAA+B,SAAA,GAEA/B,EAAAkE,cAAA,EAYAlE,EAAAmE,aAAA,SAAAC,EAAAC,GACAA,OAAA,IAAAA,GAAAA,QAGA,IAAArE,EAAAsE,UAAAF,IAAAC,KACArE,EAAAsE,UAAAF,GAAAtH,EAAAyH,IAAA,YAAAH,GAAAI,UAAAC,UAIAzE,EAAA0E,kBAAA,SAAAC,EAAAC,EAAAC,EAAA1B,EAAAC,EAAAQ,QACA,IAAAe,EAAAG,KAAAhB,QAAAC,IAAA,yBACA,KAAAY,EAAAG,KAAAhB,QAAAC,IAAA,+BAEAgB,MAAAC,QAAA7B,EAAAC,KAEAtB,EAAAmC,SAAA,MAAAd,EAAAS,EAAAR,EAAAuB,EAAAG,MACAhD,EAAA8B,cAAAA,GACAzD,KAAA,SAAAvC,GAEAA,EAAAqH,OAAA9B,EAAAC,GAAAvB,KAAAtG,QAAA2J,KAAAP,OAGA,OAAAxB,EAAAC,IAEAtB,EAAAmC,SAAA,UAAAd,EAAAS,EAAAR,EAAAuB,EAAAG,MACAhD,EAAA8B,cAAAA,GACAzD,KAAA,SAAAvC,GAEAA,EAAAqH,QAAA9B,EAAAC,GAAA7H,QAAA2J,KAAAP,OAGAb,QAAAC,IAAA,kDAEA/D,EAAAkE,cAAA,GAGAlE,EAAA+B,SAAAlC,MAAA,IAGAG,EAAAmF,gBAAA,SAAAhC,EAAAC,EAAArB,EAAA6B,EAAAQ,GACAW,MAAAC,QAAA7B,EAAAC,IACAtB,EAAAG,QAAAkB,EAAAC,EAAArB,EAAA6B,GAAAzD,KACA,WACAH,EAAAmE,aAAAC,GAAA,KAGA,OAAAjB,EAAAC,IACAD,EAAAC,GAAArB,EAAAlC,MACAiC,EAAAE,SAAAmB,EAAAC,EAAAQ,IAEAE,QAAAC,IAAA,sDCvEAxI,QAAAC,OAAA,gBACAQ,WAAA,6BAAA,CAAA,SAAA,eAAA,sBAAA,SAAAgE,EAAAqB,EAAAnE,GAGA8C,EAAAqB,aAAA,IAAAA,EAAA,CACA+D,MAAA,OACAC,SAAA,GACAC,mBAAA,EACAC,YAAA,IAGAvF,EAAAqB,aAAAE,cAAA,SAAAC,EAAA3D,EAAAY,EAAAhB,GACAP,EAAAiC,oBAAAtB,EAAAqB,eAEA,IAAAsG,EAAA3H,EAAA4H,QAGAV,MAAAC,QAAAxD,EAAA2B,SAAA3B,EAAA4B,MACA5B,EAAA2B,SAAA3B,EAAA4B,KAAAsC,QAAA,EAAA,EAAAF,GAEAhE,EAAA2B,SAAA3B,EAAA4B,KAAAoC,GAIAxF,EAAAqB,aAAAI,YAAA,SAAAC,EAAA7D,EAAAY,EAAAhB,GACAP,EAAA6B,SAAAlB,EAAAW,IAAAX,EAAAS,OAAA,EAAAT,EAAAmB,MACA9B,EAAAiC,oBAAAtB,EAAAqB,mBC1BA3D,QAAAC,OAAA,gBACAQ,WAAA,gBAAA,CAAA,SAAA,kBAAA,SAAAgE,EAAA8B,GAGA9B,EAAA2F,eAAA7D,EAAA6D,eAGA3F,EAAA4F,KAAA,SAAAzC,GACArB,EAAA8B,cAAAT,GAAA,IAIAnD,EAAA6F,OAAA/D,EAAAgE,eAGA9F,EAAAmC,OAAAL,EAAAM,eAGApC,EAAA,OAAA8B,EAAAO,kBClBA9G,QAAAC,OAAA,gBACAQ,WAAA,sBAAA,CAAA,SAAA,YAAA,kBAAA,SAAAgE,EAAAhD,EAAA8E,GAMA9B,EAAAsE,UAAA,GAGAtE,EAAAL,IAAA,uBAAA,SAAAoG,EAAAC,EAAAvG,GACA,GAAAqC,EAAAmE,gBAAA,CACA,IAAAC,EAAAC,QAAA,iDACAJ,IAAAG,EAAAH,EAAAvC,iBACAuC,GAAAG,EAAApE,EAAAsE,wBACAtC,QAAAC,IAAA,6EAKA/D,EAAAqG,gBAAAvE,EAAAuE,gBASArG,EAAAsG,aAAA,SAAAC,GACA,OAAAxB,MAAAC,QAAAuB,GACAA,EACA,OAAAA,EACA,GAEA,CAAAA,OCnCAhL,QAAAC,OAAA,gBACAoF,UAAA,gBAAA,WACA,OAAA,SAAA4F,EAAAnJ,EAAA4D,GACA5D,EAAAoJ,KAAA,mBAAA,SAAAV,GACA,KAAAA,EAAAW,QACAX,EAAAY,OAAAC,OAEAb,EAAAvC,uBCPAjI,QAAAC,OAAA,gBACAoF,UAAA,mBAAA,WACA,MAAA,CACAiG,KAAA,SAAAL,EAAAnJ,EAAA4D,GACA5D,EAAAyJ,QAAA,QAAAC,SAAA,4BAAA1J,EAAA2J,OAEA3J,EAAAyJ,QAAA,QAAAL,KAAA,aAAA,WACApJ,EAAAyJ,QAAA,QAAAG,SAAA,2BACA5J,EAAA6J,SAEA7J,EAAAyJ,QAAA,QAAAL,KAAA,aAAA,WACApJ,EAAAyJ,QAAA,QAAAK,YAAA,2BACA9J,EAAA2J,aCZAzL,QAAAC,OAAA,gBACA4F,QAAA,kBAAA,CAAA,gBAAA,WAAA,YAAA,cAAA,sBAAA,KAAA,SAAAgG,EAAAC,EAAArK,EAAAF,EAAAI,EAAAoK,GAGA,IAAAC,EAAA,GAEAzF,EAAA,CAUA0F,YAAA,SAAArE,EAAAC,EAAAqE,EAAAC,GAEA,IAAAlK,EAAA2F,EAAAwE,OAAA,IAAAvE,OAGAnE,IAAAyI,IACAlK,GAAA,IAAAkK,GAGA,IAAAE,EAAA9K,EACAmD,IAAAzC,GACA0C,MACAC,KAAA,SAAAvC,GAsBA,OApBAiK,EAAAC,cAAAlK,GACAV,EAAAqB,QAAA,yBAEAU,IAAAyI,EACA,OAAAvE,EAAAC,IAAA2B,MAAAC,QAAA7B,EAAAC,IACAD,EAAAC,GAAAxF,EAEArC,QAAAwM,OAAA5E,EAAAC,GAAAxF,GAIAmH,MAAAC,QAAA7B,EAAAC,IACAD,EAAAC,GAAAvB,KAAAjE,GAEAuF,EAAAC,GAAAxF,EAIAkE,EAAAkG,qBAAA7E,GAEAA,IAIA,OAAArB,EAAAmG,gCAAAR,EAAAG,IAUAhE,cAAA,SAAAT,EAAA+E,GAOA,QALA,IAAA/E,EAAAgF,sBACAhF,EAAAA,EAAAgF,qBAIAf,EAAAgB,UAAAF,EAAA,CACA,IAAAN,EAAA9K,EACAmD,IAAAkD,EAAAwE,QACAU,MAAAlF,EAAAmF,eAAA,IACAnI,KAAA,SAAAvC,GAWA,OATAkE,EAAAyG,gBAAApF,EAAAvF,GAGAuF,EAAAqF,UAAA,MAAA5K,EAAAK,MACAkF,EAAAjD,MAEAiD,EAAA5H,QAAAwM,OAAA5E,EAAAvF,EAAA6H,SAGA,CAAAtC,SAAAA,EAAA8B,OAAA,EAAAwD,UAAA7K,EAAA8K,eAIA,OAAA5G,EAAAmG,gCAAA9E,EAAAyE,GAKA,OAFA9F,EAAA6G,kBAAAxF,EAAA,WACAA,EAAAyF,cAAA,CAAAhD,MAAA,EAAAC,QAAA,GACAyB,EAAAuB,QAAA,CAAA1F,SAAAA,EAAA8B,OAAA,EAAAwD,WAAA,KAUA3C,eAAA,SAAA3C,GACA,IAAAyE,EAAA9K,EACAmD,IAAAkD,EAAAwE,QACAzH,MACAC,KAAA,SAAAvC,GAQA,OAPAiK,EAAAC,cAAAlK,GAAAV,EAAAqB,QAAA,oBACAhD,QAAAwM,OAAA5E,EAAAvF,GAGAV,EAAA4L,mBACAhH,EAAAkG,qBAAA7E,GAEAA,IAIA,OAAArB,EAAAmG,gCAAA9E,EAAAyE,IAYAjC,eAAA,SAAAxC,EAAAC,EAAAQ,EAAAmF,GACA,IAAAnB,EAAA9K,EACAmD,IAAAkD,EAAAwE,QAAApD,IAAAnB,GACA4F,KAAA,GAAA,IACA7I,KAAA,SAAAvC,GACA,IAAA4H,EAAA5H,EAAA6H,QAwBA,OArBA3D,EAAAyG,gBAAA/C,EAAA5H,GAGAA,EAAA8K,cACA5G,EAAAmC,SAAA,SAAAd,EAAAS,EAAAR,EAAAoC,EAAAV,MAIAU,EAAA2C,oBAAAvE,GAIAmB,MAAAC,QAAA7B,EAAAC,KACA,cAAA2F,IAAAA,EAAA5F,EAAAC,GAAAV,QACAS,EAAAC,GAAAsC,OAAAqD,EAAA,EAAAvD,IAEArC,EAAAC,GAAAoC,EAGArC,EAAAqF,UAAA,QAAArF,EAAA2B,MAAA9H,EAAAQ,IAAA,IAAA4F,EAAA,IAAAoC,EAAAV,MAAA,GAEAU,IAIA,OAAA1D,EAAAmG,gCAAArE,EAAAgE,IAYAxF,eAAA,SAAA6G,EAAA7F,EAAAD,EAAAS,GAKA,OAHA9B,EAAAmC,SAAA,SAAAd,EAAAS,GAGA9B,EACA8B,cAAAA,GACAzD,KAAA,SAAAvC,GAEAA,EAAAqH,QACAF,MAAAC,QAAAiE,EAAA7F,IAAA6F,EAAA7F,GAAAsC,OAAAuD,EAAA7F,GAAA8F,QAAA/F,GAAA,GACA8F,EAAA7F,GAAA,SAaAf,eAAA,SAAA4G,EAAA7F,EAAAD,GACA,GAAAgD,QAAA,iBAAA,CACA,IAAAyB,EAAA9K,EACAmD,IAAAkD,EAAAwE,QACAxF,OAAA,IACAhC,KAAA,SAAAvC,GAQA,OANAV,EAAAiC,oBAAAvB,EAAAsB,eAGA6F,MAAAC,QAAAiE,EAAA7F,IAAA6F,EAAA7F,GAAAsC,OAAAuD,EAAA7F,GAAA8F,QAAA/F,GAAA,GACA8F,EAAA7F,GAAA,KAEA6F,IAIA,OAAAnH,EAAAmG,gCAAA9E,EAAAyE,KAYA5F,SAAA,SAAAmB,EAAAC,EAAAQ,GACA,IAAA/D,EAWA,OAPAA,OADA,IAAAsD,EAAAC,IAAA,KAAAD,EAAAC,GACA,KAEAD,EAAAC,GAEAtB,EAAAmC,SAAA,UAAAd,EAAAS,EAAAR,EAAAvD,GAGAiC,EAAA8B,cAAAA,IAYA3B,QAAA,SAAAkB,EAAAC,EAAArB,EAAA6B,GACA,YAAA,IAAA7B,EAAAlC,MAEAyH,EAAA6B,OAAA,mBACA,KAAApH,EAAAlC,MAEAyH,EAAA6B,OAAA,wBACApE,MAAAC,QAAA7B,EAAAC,KAKAD,EAAAC,GAAAvB,KAAAE,EAAAlC,OAGAiC,EAAAmC,SAAA,MAAAd,EAAAS,EAAAR,EAAArB,EAAAlC,OACAiC,EAAA8B,cAAAA,GACAzD,KAAA,SAAAvC,GAGA,cADAmE,EAAAlC,MACAjC,KAXA0J,EAAA6B,OAAA,2CAyBAjH,WAAA,SAAAiB,EAAAC,EAAAgG,EAAAxF,GAEA,IAAA/D,EAAAsD,EAAAC,GAAAgG,GAMA,OALAtH,EAAAmC,SAAA,SAAAd,EAAAS,EAAAR,EAAAvD,GAGAsD,EAAAC,GAAAsC,OAAA0D,EAAA,GAEAtH,EAAA8B,cAAAA,IAaAK,SAAA,SAAA3G,EAAA6F,EAAAS,EAAAR,EAAAvD,QAEA,IAAA+D,IACAA,EAAAT,QAIA,IAAAS,EAAAuE,sBACAvE,EAAAA,EAAAuE,qBAGA,IAOAE,EAPAgB,EAAAzF,EAAA+D,OAAAjF,OAEA4G,EAAAnG,EAAAwE,OAAA4B,UAAAF,GAmBA,YAlBA,IAAAjG,IACAkG,EAAAA,EAAA,IAAAlG,GAKAiF,OADA,IAAAxI,EACA,CAAA2J,GAAAlM,EAAAgM,KAAAA,GAEA,CAAAE,GAAAlM,EAAAgM,KAAAA,EAAAzJ,MAAAA,GAIAkF,MAAAC,QAAApB,EAAA0E,kBAAA1E,EAAA0E,eAAA,IACA1E,EAAA0E,eAAAzG,KAAAwG,IAGA,IAAAd,EAAA2B,QAAAtF,IAAA2D,EAAA1F,KAAA+B,GAEAyE,GAQApC,cAAA,WACA,OAAAsB,EAAAkC,OAAA,SAAAC,EAAAhI,EAAA0H,EAAAO,GACA,OAAAD,GAAAhI,EAAA4G,eAAA5F,SACA,IAMA0D,sBAAA,WACAmB,EAAA,IAQAS,qBAAA,SAAA7E,GACAA,EAAAyF,cAAA,CAAAhD,MAAA,EAAAC,QAAA,GACA1C,EAAAmF,eAAA,GACAxG,EAAA6G,kBAAAxF,EAAA,YAUAoF,gBAAA,SAAApF,EAAAtF,GAiBA,OAhBAX,EAAAiC,oBAAAtB,EAAAqB,eAEArB,EAAA6K,aACAvF,EAAAyF,cAAA,CAAAhD,MAAA,EAAAC,QAAA,GACA1C,EAAAmF,eAAA,GACAxG,EAAA6G,kBAAAxF,EAAA,WAGAkE,EAAA,WACAvF,EAAA6G,kBAAAxF,EAAA,YACA,OAEAA,EAAAyF,cAAA,CAAAhD,MAAA,EAAAC,QAAA,GACA/D,EAAA6G,kBAAAxF,EAAA,WAGAA,GAUAwF,kBAAA,SAAAxF,EAAA1E,GAUA,OARA0E,EAAAyG,SAAA,CAAAC,SAAA,EACAC,QAAA,EACAC,SAAA,EACAC,SAAA,GAGA7G,EAAAyG,SAAAnL,IAAA,EAEA0E,GASAkD,gBAAA,SAAAlD,GACA,QAAA4B,MAAAC,QAAA7B,EAAA8G,YAEA9G,EAAA8G,UAAAC,KAAA,SAAAC,GACA,OAAA,IAAAA,EAAAC,QAAA3L,UASAwJ,gCAAA,SAAA9E,EAAAyE,GAKA,OAJA7C,MAAAC,QAAA7B,EAAA8G,aAAA9G,EAAA8G,UAAA,IACA9G,EAAA8G,UAAApI,KAAA+F,GACAzE,EAAAkH,aAAA,EAEAzC,EAAA,QAAA,WACA9F,EAAAuE,gBAAAlD,KACAA,EAAAkH,aAAA,EACAlH,EAAA8G,UAAA,QAMA,OAAAnI,KCtcAvG,QAAAC,OAAA,gBACA4F,QAAA,eAAA,CAAA,aAAA,YAAA,gBAAA,kBAAA,SAAArE,EAAAC,EAAAoK,EAAAkD,GACA,IAAAC,EAAA,KAEAnJ,EAAA,CACAzC,aAAA,SAAAnB,GACA+M,EAAA/M,GAGAqB,cAAA,WACA0L,GACAvN,EAAAQ,IAAA+M,IAIAnO,mBAAA,WACA,OAAAgL,EAAAoD,sBAGAC,kBAAA,WACA,OAAAH,EAAAI,QAAAC,UAGA/L,qBAAA,SAAAgM,GACAN,EAAAI,QAAAC,SAAAC,GAGAC,eAAA,WACA,OAAAP,EAAAQ,cAYA,OARA/N,EAAA4C,IAAA,sBAAA,SAAAoG,EAAAtG,EAAAsL,GACAtL,EAAAuL,QAAAC,eAAAV,EACAnD,EAAAoD,qBAAAxN,EAAAsM,OAEAxF,QAAAC,IAAA,gBAIA3C,KCxCA7F,QAAAC,OAAA,gBACAoF,UAAA,iBAAA,CAAA,UAAA,WAAA,uBAAA,SAAAsK,EAAA7D,EAAAvL,GACA,OAAA,SAAA0K,EAAAnJ,GACA,IAAA8N,EAAA5P,QAAA8B,QAAA6N,GAEAE,EAAA,WACA/D,EAAA,WAEA,KAAAQ,EAAA,sBAAAwD,QAAAxD,EAAA,mBAAAwD,QAAAxD,EAAA,mBAAAwD,SACAxD,EAAA,oCAAAyD,WAAA5I,OAAA,GACAmF,EAAA,oCACAyD,WAAAC,QAAAC,SAAA,sBACAC,YAAA,sBAAA,GAIA,KAAA5D,EAAA,sBAAAwD,QAAAxD,EAAA,mBAAAwD,QAAAxD,EAAA,mBAAAwD,SACAxD,EAAA,sBACAyD,WAAAI,OAAAC,UAAA,oCACAF,YAAA,sBAAA,GAGA5D,EAAA,+BAAA4D,YAAA,SAAA5D,EAAA,oCAAAyD,WAAA5I,QAAA,GAIAmF,EAAA,+BAAA4D,YAAA,SAAA5D,EAAA,oCAAAyD,WAAA5I,QAAA,MAKA5G,EAAA8P,oBAAAR,GAGAD,EAAA1E,KAAA,SAAA,WACA2E,MAIA7P,QAAA8B,QAAAwO,UAAAC,MAAA,WACAV,UCxCA7P,QAAAC,OAAA,gBACAoF,UAAA,YAAA,WACA,MAAA,CACAC,SAAA,IACA2F,MAAA,CACA9E,KAAA,SAEAzF,YAAA,qCACA8E,YAAA,EACA8F,KAAA,SAAAL,EAAAnJ,EAAA4D,EAAAjF,GAEAwK,EAAAnD,OAAA,WACA,OAAAhG,EAAA0O,KAAA,UACA,WACAvF,EAAA9E,KAAAsK,eAAA3O,EAAA0J,SAAA,sBACA1J,EAAA4J,SAAA,oBACAT,EAAA9E,KAAAsK,eAAA3O,EAAA0J,SAAA,kBACA1J,EAAA8J,YAAA,uBAIAnL,WAAAA,CAAAA,SAAA,SAAAgE,SCrBAzE,QAAAC,OAAA,gBACAQ,WAAA,0BAAA,CAAA,SAAA,SAAA,cAAA,gBAAA,kBAAA,YAAA,sBAAA,cAAA,uBAAA,eAAA,SAAAgE,EAAA/C,EAAAH,EAAAsK,EAAAkD,EAAAtN,EAAAE,EAAAC,EAAArB,EAAAK,GACA6D,EAAAiM,aAAA7E,EACApH,EAAAkM,cAAA,GACAlM,EAAAmM,OAAArQ,EAAAqQ,OACAnM,EAAAoM,uBAAAtQ,EAAAsQ,uBAEApM,EAAA2K,SAAA,WACA,OAAAxO,EAAAsO,qBAGAzK,EAAAqM,gBAAA,WACA,OAAA/B,EAAAgC,cAGAtM,EAAA6K,eAAA,WACA,OAAAP,EAAAQ,aAGA9K,EAAAT,OAAA,WACAS,EAAAkM,cAAA,GACAlM,EAAAkM,cAAArK,KAAA/F,EAAAkC,iBACAf,EAAAsC,UAGAS,EAAAuM,WAAA,SAAAC,EAAAC,GACAtP,EAAAoP,WAAAC,EAAAC,GACAzM,EAAAkM,cAAA,GACAlM,EAAAkM,cAAArK,KACA1E,EAAAuP,iBACAvM,KAAA,SAAAvC,GACA9B,EAAAkC,gBACAf,EAAAsC,aAKAS,EAAA2M,cAAAzP,EAAAyP,cAEA3M,EAAA4M,kBAAA,SAAAxI,EAAAyI,GACA/P,EAAAmD,IAAA,YAAAsE,IAAAH,GACA4E,KAAA,GAAA,IACA7I,KACA,SAAAvC,GAEAZ,EAAAQ,IAAAqP,EAAA,IAAAjP,EAAAkH,SAKA9E,EAAAkM,cAAArK,KAAA/F,EAAAkC,oBClDAzC,QAAAC,OAAA,gBACA4F,QAAA,uBAAA,CAAA,cAAA,gBAAA,kBAAA,WAAA,sBAAA,KAAA,SAAAtE,EAAAsK,EAAAkD,EAAAjD,EAAAnK,EAAAoK,GACA,IAAA6E,EAAA,CACAW,KAAA,KACAC,IAAA,GACAC,IAAA,GACAC,KAAA,GACAC,IAAA,IAYAC,EAAA,GAQAC,EAAA,KACA,SAAAC,IAUA,OATA,OAAAD,IACAA,EAAAtQ,EACAmD,IAAA,cACAC,MAFA,QAGA,WACAkN,EAAA,QAIAA,EAGA,IAAAhM,EAAA,CACA+K,OAAAA,EACAmB,gBAlCA,CACAC,oBAAA,EACAC,kBAAA,EACAC,sBAAA,EACAC,0BAAA,EACAC,mBAAA,EACAC,qBAAA,EACAC,uBAAA,EACAzF,UAAA,GA4BAwD,oBAAA,SAAAkC,GACAX,EAAAtL,KAAAiM,IAGA/R,oBAAA,WACA,OAAA,OAAAoQ,EAAAW,KACAO,IACAlN,KAAA,SAAAvC,GACA,OAAAA,EAAAkP,MACA,SAAAxO,GACAwF,QAAAxF,MAAA,kCAAAA,KAGAgJ,EAAAuB,QAAAsD,EAAAW,OAIA9O,cAAA,WACA,OAAAqP,IACAlN,KAAA,SAAAvC,GAEA,IAOAmQ,EAqEA,SAAAC,EAAAC,EAAAC,EAAAC,GACAF,IAAAA,EAAA,MACAC,IAAAA,EAAA,UACAC,IAAAA,EAAA,YACA,IAAAC,EAAA,GACAC,EAAA,GAiBA,OAhBAL,EAAAM,QAAA,SAAApT,GACAmT,EAAAnT,EAAA+S,IAAA/S,EACAA,EAAAiT,GAAA,KAEAH,EAAAM,QAAA,SAAApT,GACA,MAAAA,EAAAgT,QACAjP,IAAAoP,EAAAnT,EAAAgT,IACApK,QAAAxF,MAAA,gCAAApD,EAAAgT,KAEAG,EAAAnT,EAAAgT,IAAAC,GAAAtM,KAAA3G,GACAA,EAAAgT,GAAAG,EAAAnT,EAAAgT,KAGAE,EAAAvM,KAAA3G,KAGAkT,EA3FAG,CAJA3Q,EAAA4Q,KAAAC,IAAA,SAAA/M,GAEA,OADAA,EAAAsK,YAJA,WACA,OAAAnJ,KAAAyI,SAAA5I,OAAA,GAGA+D,KAAA/E,GACAA,IAEA,KAAA,SAAA,YACAyK,EAAAW,KAAAlP,EAAAkP,KAEA,IAAA4B,EAAAX,EAAAY,KAAA,SAAAC,GACA,MAAA,aAAAA,EAAAC,KAEA1C,EAAAY,SAAA9N,IAAAyP,EAAA,GAAAA,EAAApD,SACAa,EAAA,IAAAvO,EAAA,IACAuO,EAAAc,KAAArP,EAAAqP,KACAd,EAAAe,IAAAtP,EAAAsP,IAGA5C,EAAAI,QAAA9M,EAAA8M,QACAJ,EAAAgC,aAAA1O,EAAA0O,aACAhC,EAAAQ,YAAAlN,EAAAkN,YAGA1J,EAAAkM,gBAAA1P,EAAA0P,gBACAlM,EAAA0N,qBAGA5R,EAAAiC,oBAAAvB,EAAAsB,eAxEA3D,QAAA+S,QAAAnB,EAAA,SAAAW,GACAA,OA0EA,SAAAxP,GACA8C,EAAA0N,uBAnCA,MAoCA,SAAAxQ,GACAwF,QAAAxF,MAAAA,MAIAwQ,mBAAA,WACA,IAAAC,GAAA,EAGAxT,QAAA+S,QAAAlN,EAAAkM,gBAAA,SAAAzN,EAAAuJ,EAAAlO,QACA+D,IAAAmI,EAAAgC,KACA2F,GAAA,KAIAA,GAAA3N,EAAAgL,0BAGAA,uBAAA,WAEA7Q,QAAA+S,QAAAlN,EAAAkM,gBAAA,SAAAzN,EAAAuJ,EAAAlO,GACAkM,EAAAgC,IAAA,IAGA/B,EAAA,WAEAD,EAAA4H,OAAA5N,EAAAkM,kBACA,OAyCA,OAAAlM,KCvKA7F,QAAAC,OAAA,gBACA4F,QAAA,cAAA,CAAA,kBAAA,cAAA,SAAAkJ,EAAAxN,GAOA,MAAA,CACAmS,WAAA,SAAAzC,GACA3J,KAAA0J,WAAAC,GAAA,IAGA0C,kBAAA,SAAAC,GACA5T,QAAA+S,QAAAhE,EAAAgC,aAAA,SAAAW,GACA,GAAAA,EAAAmC,OAAAD,EAAA,OAAAtM,KAAAoM,WAAAhC,EAAA4B,OAIAtC,WAAA,SAAAC,EAAAC,GACAlR,QAAA+S,QAAAhE,EAAAgC,aAAA,SAAAW,GACAA,EAAA4B,IAAArC,IACAS,EAAAoC,YAAApQ,IAAAwN,GAAAQ,EAAAoC,OACA5C,MAKA6C,iBAAA,WACA,IAAAC,EAAA,GAMA,OALAhU,QAAA+S,QAAAhE,EAAAgC,aAAA,SAAAW,IACA,IAAAA,EAAAoC,QACAE,EAAA1N,KAAAoL,EAAA4B,MAGAU,GAGA5O,mBAAA,WACApF,QAAA+S,QAAAhE,EAAAgC,aAAA,SAAAW,GACAA,EAAAoC,QAAA,KAIA3C,eAAA,WACA,OAAA5P,EAAAyH,IAAA,aAAA8D,MAAAiC,EAAAgC,mBC7CA/Q,QAAAC,OAAA,gBACA4F,QAAA,sBAAA,CAAA,gBAAA,kBAAA,WAAA,cAAA,SAAAgG,EAAAkD,EAAAjD,EAAAvK,GAEA,IAAAoC,EAAA,CACAsQ,QAAA,GACAC,WAAA,GACAC,MAAA,GACAC,UAAA,GACAC,SAAA,GACAC,OAAA,IAGA3S,EAAA,CACAgC,cAAAA,EAGA4J,iBAAA,WACA,OAAAhM,EACAmD,IAAA,qBACAC,MACAC,KACA,SAAAvC,GACAV,EAAAiC,oBAAAvB,IAEA,WACAV,EAAA6B,SAAA,uDAKA4N,cAAA,WACA,OAAA7P,EACAmD,IAAA,iCACAC,MACAC,KACA,SAAAvC,GACAV,EAAA4S,WAAA,wBACA5S,EAAAiC,oBAAAvB,IACA,WACAV,EAAA6B,SAAA,sDAMAI,oBAAA,SAAAvB,QACAqB,IAAArB,IAGAsB,EAAAsQ,QAAA5R,EAAA4R,QACAtQ,EAAAuQ,WAAA7R,EAAA6R,WAGAvQ,EAAAwQ,MAAAxQ,EAAAwQ,MAAAK,OAAAnS,EAAA8R,OACAxQ,EAAAyQ,UAAAzQ,EAAAyQ,UAAAI,OAAAnS,EAAA+R,WACAzQ,EAAA0Q,SAAA1Q,EAAA0Q,SAAAG,OAAAnS,EAAAgS,UACA1Q,EAAA2Q,OAAA3Q,EAAA2Q,OAAAE,OAAAnS,EAAAiS,QAEAzI,EAAAsG,0BACArG,EAAA,WACAnI,EAAAyQ,UAAA,IACA,OAIAlP,mBAAA,WACAvB,EAAAsQ,QAAA,GACAtQ,EAAAuQ,WAAA,GACAvQ,EAAAwQ,MAAA,GACAxQ,EAAAyQ,UAAA,GACAzQ,EAAA0Q,SAAA,GACA1Q,EAAA2Q,OAAA,IAGAC,WAAA,SAAA1R,GACAc,EAAAyQ,UAAA9N,KAAA,CACAzD,QAAAA,EACA4R,MAAA,KAMAjR,SAAA,SAAAX,EAAA6R,EAAAC,EAAA7R,GACA4R,OAAAhR,IAAAhE,QAAAgV,GAAAA,EAAA,KACAC,OAAAjR,IAAAhE,QAAAiV,IAAAA,EACA7R,OAAAY,IAAAhE,QAAAoD,IAAAA,EAIA,IAFA,IAAA8R,GAAA,EACAxG,EAAAzK,EAAA2Q,OACAO,EAAA,EAAAA,EAAAzG,EAAAjH,OAAA0N,IACAzG,EAAAyG,GAAAhS,SAAAA,IACAuL,EAAAyG,GAAAJ,OAAA,EACArG,EAAAyG,GAAAH,KAAAA,EACAtG,EAAAyG,GAAAF,WAAAA,EACAvG,EAAAyG,GAAA/R,QAAAA,EACA8R,GAAA,GAGAA,GAAAjR,EAAA2Q,OAAAhO,KAAA,CACAzD,QAAAA,EACA6R,KAAAA,EACAD,MAAA,EACAE,WAAAA,EACA7R,QAAAA,KAIAgS,WAAA,SAAAjS,GAGA,IAFA,IAAA+R,GAAA,EACAxG,EAAAzK,EAAA0Q,SACAQ,EAAA,EAAAA,EAAAzG,EAAAjH,OAAA0N,IACAzG,EAAAyG,GAAAhS,SAAAA,IACAuL,EAAAyG,GAAAJ,OAAA,EACAG,GAAA,GAGAA,GAAAjR,EAAA0Q,SAAA/N,KAAA,CACAzD,QAAAA,EACA4R,MAAA,KAIAzR,QAAA,SAAAH,GAGA,IAFA,IAAA+R,GAAA,EACAxG,EAAAzK,EAAAwQ,MACAU,EAAA,EAAAA,EAAAzG,EAAAjH,OAAA0N,IACAzG,EAAAyG,GAAAhS,SAAAA,IACAuL,EAAAyG,GAAAJ,OAAA,EACAG,GAAA,GAGAA,GAAAjR,EAAAwQ,MAAA7N,KAAA,CACAzD,QAAAA,EACA4R,MAAA,MAKA,OAAA9S,KC3IA3B,QAAAC,OAAA,gBACAQ,WAAA,+BAAA,CAAA,SAAA,SAAA,cAAA,gBAAA,sBAAA,SAAAgE,EAAA/C,EAAAH,EAAAsK,EAAAlK,GAEA8C,EAAAiM,aAAA7E,EACApH,EAAAd,cAAAhC,EAAAgC,cAGAc,EAAAL,IAAA,sBAAA,WACAK,EAAAd,cAAAyQ,UAAA,GACA3P,EAAAd,cAAA2Q,OAAA7P,EAAAd,cAAA2Q,OAAAS,OAAA,SAAAhS,GACA,QAAAA,EAAA4R,aACA5R,EAAA4R,YAAA,GACA,KAIAlQ,EAAAd,cAAA0Q,SAAA,GACA5P,EAAAd,cAAAwQ,MAAA,GACA1P,EAAAd,cAAAuQ,WAAA,KAIAzP,EAAAuQ,WAAA,SAAAC,EAAApH,GACAoH,EAAA9K,OAAA0D,EAAA,OCvBA7N,QAAAC,OAAA,gBACA8U,OAAA,SAAA,CAAA,OAAA,SAAAG,GACA,OAAAA,EAAAC,eCFAnV,QAAAC,OAAA,gBACAC,OAAAA,CAAAA,iBAAA,SAAAC,GACAA,EAEAE,KAAA,aAAA,CACAC,kBAAA,CAAA,eAAA,SAAAM,GACA,OAAAA,EAAAsO,oBACA,SAEA,IAGAzO,WAAA,0BACAC,YAAA,gCACAC,eAAA,aAEA0F,SAAAC,KAAA,eAGAtG,QAAAC,OAAA,cAAA,CAAA,UAAA,gBACAQ,WAAA,0BAAA,CAAA,SAAA,cAAA,YAAA,sBAAA,eAAA,SAAAgE,EAAAlD,EAAAE,EAAAE,EAAAf,GAEA6D,EAAAqD,OAAAlH,EAAAsO,oBAAA,WACAtO,EAAAsO,qBACAzN,EAAAsM,KAAA,OAIAxM,EAAAmD,IAAA,oBAAAC,MAAAC,KACA,SAAAvC,GACAoC,EAAA2Q,KAAA/S,EAAAgT,kBACA1T,EAAAiC,oBAAAvB,EAAAsB,oBAGAlD,WAAA,2BAAA,CAAA,SAAA,cAAA,YAAA,sBAAA,uBAAA,SAAAgE,EAAAlD,EAAAE,EAAAE,EAAApB,GACAkE,EAAA6Q,OAAA,WACA/T,EAAAmD,IAAA,qBAAAC,MAAAC,KACA,SAAAvC,GACAV,EAAAiC,oBAAAvB,EAAAsB,eACApD,EAAAkC,gBACAhB,EAAAsM,KAAA,WCxCA/N,QAAAC,OAAA,gBACAoF,UAAA,oBAAA,WACA,MAAA,CACAC,SAAA,IACA2F,MAAA,CAAArD,SAAA,IAAAwD,OAAA,KACA1K,YAAA,gDACA8E,YAAA,KCNAxF,QAAAC,OAAA,gBACAoF,UAAA,yBAAA,WACA,MAAA,CACAC,SAAA,IACA2F,MAAA,CAAArD,SAAA,IAAAwD,OAAA,KACA1K,YAAA,wD3BijDAV,QAAQC,OAAO,gBAAgBqB,IAAI,CAAC,iBAAkB,SAASiU,G4BtjD/DA,EAAAC,IAAA,2CAAA,yHACAD,EAAAC,IAAA,0CAAA,kKACAD,EAAAC,IAAA,wCAAA,mJACAD,EAAAC,IAAA,yCAAA,kIACAD,EAAAC,IAAA,+BAAA,+pDACAD,EAAAC,IAAA,iCAAA,68IACAD,EAAAC,IAAA,kCAAA,kIACAD,EAAAC,IAAA,qCAAA,k/BACAD,EAAAC,IAAA,oCAAA,4nLACAD,EAAAC,IAAA,gDAAA,+pMACAD,EAAAC,IAAA,gCAAA,gpBACAD,EAAAC,IAAA,mCAAA,2WACAD,EAAAC,IAAA,0BAAA,8cACAD,EAAAC,IAAA,6BAAA,uCACAD,EAAAC,IAAA,8BAAA,kaACAD,EAAAC,IAAA,gDAAA,msBACAD,EAAAC,IAAA,qDAAA","file":"ampersand.min.js","sourcesContent":["// when using minified angular modules, use module('myApp', []).controller('MyController', ['myService', function (myService) { ...\r\nangular.module('AmpersandApp', ['ngResource', 'ngRoute', 'ngSanitize', 'restangular', 'ui.bootstrap', 'uiSwitch', 'cgBusy', 'siTable', 'ngStorage', 'angularFileUpload', 'ui.bootstrap.datetimepicker', 'hc.marked'])\r\n.config(function($routeProvider, $locationProvider) {\r\n    $routeProvider\r\n        // default start page\r\n        .when('/', {\r\n            resolveRedirectTo : ['NavigationBarService', function (NavigationBarService) {\r\n                return NavigationBarService.getRouteForHomePage();\r\n            }]\r\n        })\r\n        .when('/prototype/welcome', { \r\n            controller : '',\r\n            templateUrl : 'app/src/shared/welcome.html',\r\n            interfaceLabel : 'Welcome'\r\n            })\r\n        // installer page\r\n        .when('/admin/installer', {\r\n            controller : 'InstallerController',\r\n            templateUrl : 'app/src/admin/installer.html',\r\n            interfaceLabel : 'Installer'\r\n            })\r\n        .when('/redirect-after-login', {\r\n            resolveRedirectTo : ['LoginService', function (LoginService) {\r\n                return LoginService.getPageBeforeLogin();\r\n            }]\r\n        }).when('/404', {\r\n            templateUrl: 'app/src/shared/404.html',\r\n            interfaceLabel: '404'\r\n            })\r\n        .otherwise({redirectTo: '/404'});\r\n    \r\n    $locationProvider.hashPrefix(''); // see: https://stackoverflow.com/questions/41211875/angularjs-1-6-0-latest-now-routes-not-working\r\n}).config(function(RestangularProvider) {\r\n    \r\n    RestangularProvider.setBaseUrl('api/v1'); // Generate: path to API folder\r\n    RestangularProvider.setDefaultHeaders({\"Content-Type\": \"application/json\"});\r\n    RestangularProvider.setPlainByDefault(true);\r\n    \r\n}).run(function(Restangular, $rootScope, $location, $route, NotificationService, RoleService, NavigationBarService, LoginService){\r\n\r\n    Restangular.addFullRequestInterceptor(function(element, operation, what, url, headers, params){\r\n        //params.navIfc = true;\r\n        //params.metaData = true;\r\n        return params;\r\n    });\r\n    \r\n    Restangular.addResponseInterceptor(function(data, operation, what, url, response, deferred){\r\n        if(operation != 'get' && operation != 'getList' && data.sessionRefreshAdvice) NavigationBarService.refreshNavBar();\r\n\t\tif((data || {}).navTo != null) $location.url(data.navTo);\r\n        \r\n        return data;\r\n    });\r\n    \r\n    Restangular.setErrorInterceptor(function(response, deferred, responseHandler) {\r\n        var message;\r\n        var details;\r\n        if(typeof response.data === 'object' && response.data !== null){\r\n            if(response.data.error == 404) { // 404: Not found\r\n                NotificationService.addInfo(response.data.msg || 'Resource not found');\r\n            \r\n            } else if(response.status == 401){ // 401: Unauthorized\r\n                if(response.data.data.loginPage) {\r\n                    LoginService.setLoginPage(response.data.data.loginPage);\r\n                }\r\n                LoginService.setSessionIsLoggedIn(false);\r\n                NavigationBarService.refreshNavBar();\r\n                LoginService.gotoLoginPage();\r\n                NotificationService.addInfo(response.data.msg || 'Login required to access this page');\r\n            \r\n            } else {\r\n                message = response.data.msg || response.statusText; // if empty response message, take statusText\r\n                NotificationService.addError(message, response.status, true, response.data.html);\r\n            }\r\n            \r\n            if(response.data.notifications !== undefined) NotificationService.updateNotifications(response.data.notifications);\r\n            if (response.data.navTo != null) {\r\n                $location.url(response.data.navTo);\r\n            }\r\n        // network error\r\n        } else if (response.status === -1) {\r\n            NotificationService.addError('Connection error. Please check your internet connection and try again', null, false);\r\n        }else{\r\n            message = response.status + ' ' + response.statusText;\r\n            details = response.data; // html content is excepted\r\n            NotificationService.addError(message, response.status, true, details);\r\n        }\r\n        \r\n        return true; // proceed with success or error hooks of promise\r\n    });\r\n    \r\n    $rootScope.getCurrentDateTime = function (){\r\n        return new Date();\r\n    };\r\n    \r\n    // Add feature to $location.url() function to be able to prevent reloading page (set reload param to false)\r\n    var original = $location.url;\r\n    $location.url = function (url, reload) {\r\n        if (reload === false) {\r\n            var lastRoute = $route.current;\r\n            var un = $rootScope.$on('$locationChangeSuccess', function () {\r\n                $route.current = lastRoute;\r\n                un();\r\n            });\r\n        }\r\n        return original.apply($location, [url]);\r\n    };\r\n}).value('cgBusyDefaults',{\r\n    message:'Loading...',\r\n    backdrop: true,\r\n    //templateUrl: 'my_custom_template.html',\r\n    //delay: 500, // in ms\r\n    minDuration: 500, // in ms\r\n    // wrapperClass: 'my-class my-class2'\r\n});\r\n\n// Controller for extension app in navigation bar\r\nangular.module('AmpersandApp')\r\n.controller('ExecEngineController', function ($scope, Restangular, NotificationService) {\r\n    $scope.run = function (){\r\n        Restangular.one('admin/execengine/run').get()\r\n        .then(\r\n            function(data){ // on success\r\n                NotificationService.updateNotifications(data);\r\n            }\r\n        );\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('InstallerController', function ($scope, Restangular, NotificationService, RoleService, NavigationBarService) {\r\n    $scope.installing = false;\r\n    $scope.installed = false;\r\n    \r\n    $scope.install = function(defPop, ignoreInvariantRules){\r\n        $scope.installing = true;\r\n        $scope.installed = false;\r\n        NotificationService.clearNotifications();\r\n        \r\n        Restangular\r\n        .one('admin/installer')\r\n        .get({defaultPop : defPop, ignoreInvariantRules : ignoreInvariantRules})\r\n        .then(function(data) {\r\n            NotificationService.updateNotifications(data);\r\n            NavigationBarService.refreshNavBar();\r\n            \r\n            // deactive all roles\r\n            RoleService.deactivateAllRoles();\r\n            \r\n            $scope.installing = false;\r\n            $scope.installed = true;\r\n        }, function(){\r\n            $scope.installing = false;\r\n            $scope.installed = false;\r\n        });\r\n    };\r\n});\r\n\nangular.module('uiSwitch', [])\r\n\r\n.directive('switch', function(){\r\n  return {\r\n    restrict: 'AE',\r\n    replace: true,\r\n    transclude: true,\r\n    template: function(element, attrs) {\r\n      var html = '';\r\n      html += '<a href=\"\"';\r\n      html +=   (attrs.ngModel && !attrs.ngClick) ? ' ng-click=\"' + attrs.ngModel + '=!' + attrs.ngModel + '\"' : '';\r\n      html += '>';\r\n      html += '<span';\r\n      html +=   ' class=\"switch' + (attrs.class ? ' ' + attrs.class : '') + '\"';\r\n      html +=   ' ng-class=\"{ checked:' + attrs.ngModel + ' }\"';\r\n      html +=   '>';\r\n      html +=   '<small></small>';\r\n      html += '</span>';\r\n      html += '<span ng-transclude></span>';\r\n      html += '</a>';\r\n      return html;\r\n    }\r\n  }\r\n});\nangular.module('AmpersandApp')\r\n.config(function($routeProvider) {\r\n    $routeProvider\r\n        .when('/ext/importer', {\r\n            controller : 'PopulationImportController',\r\n            templateUrl : 'app/src/importer/importer.html',\r\n            interfaceLabel : 'Population importer'\r\n        });\r\n}).service('ImportService', function(FileUploader, NotificationService, NavigationBarService){\r\n    let uploader = new FileUploader({\r\n        url: 'api/v1/admin/import'\r\n    });\r\n\r\n    uploader.onSuccessItem = function(fileItem, response, status, headers) {\r\n        NotificationService.updateNotifications(response.notifications);\r\n        if(response.sessionRefreshAdvice) NavigationBarService.refreshNavBar();\r\n    };\r\n    \r\n    uploader.onErrorItem = function(item, response, status, headers){\r\n        let message;\r\n        let details;\r\n        if(typeof response === 'object'){\r\n            if (response.notifications !== undefined) {\r\n                NotificationService.updateNotifications(response.notifications);\r\n            }\r\n            message = response.msg || 'Error while importing';\r\n            NotificationService.addError(message, status, true, response.html);\r\n        }else{\r\n            message = status + ' Error while importing';\r\n            details = response; // html content is excepted\r\n            NotificationService.addError(message, status, true, details);\r\n        }\r\n    };\r\n    \r\n    return {uploader : uploader};\r\n}).controller('PopulationImportController', function ($scope, ImportService) {\r\n    $scope.uploader = ImportService.uploader;\r\n}).requires.push('angularFileUpload'); // add angularFileUpload to dependency list\r\n\nangular.module('AmpersandApp')\r\n.controller('AtomicController', function($scope, ResourceService){\r\n    \r\n    /*\r\n     * Object to temporary store value/resourceId to add to list\r\n     * Value/resourceId is stored as property of 'selected' obj. This is needed to pass it around by reference\r\n     */\r\n    $scope.selected = {};\r\n    \r\n    $scope.saveItem = ResourceService.saveItem; // function(resource, ifc, patchResource)\r\n    \r\n    $scope.addItem = ResourceService.addItem; // function(resource, ifc, selected, patchResource)\r\n    \r\n    $scope.removeItem = ResourceService.removeItem; // function(resource, ifc, index, patchResource)\r\n    \r\n    $scope.remove = ResourceService.removeResource; // function(parent, ifc, resource, patchResource)\r\n    \r\n    $scope.delete = ResourceService.deleteResource; // function(parent, ifc, resource)\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('AtomicDateController', function ($scope, ResourceService) {\r\n    \r\n    $scope.isOpen = false;\r\n    \r\n    // Function is here because ng-model needs to be a Date object.\r\n    // watch listener is initialized by the template\r\n    $scope.watchDateObject = function(resource, ifc){\r\n        $scope.$watch('resource', function(){\r\n            if (!(resource[ifc] instanceof Date)){\r\n                // Only convert to Date object when not NULL, otherwise the 1970-01-01 is created\r\n                if (resource[ifc] !== null) resource[ifc] = new Date(resource[ifc]);\r\n            }\r\n        }, true);\r\n    };\r\n\r\n    $scope.openDatepicker = function($event){\r\n        $event.preventDefault();\r\n        $event.stopPropagation();\r\n        $scope.isOpen = true;\r\n    };\r\n    \r\n    // Adds leading 0 if necesarry. Returns 2 digits.\r\n    function pad(number) {\r\n        var r = String(number);\r\n        if ( r.length === 1 ) {\r\n            r = '0' + r;\r\n        }\r\n        return r;\r\n    }\r\n    \r\n    function modifyToJSON(obj){\r\n        if(obj !== null){\r\n            obj.toJSON = function(){\r\n                return this.getUTCFullYear() + \r\n                    '-' + pad(this.getMonth() + 1) + // The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).\r\n                    '-' + pad(this.getDate());\r\n            };\r\n        }\r\n    }\r\n    \r\n    $scope.selected = { value : ''}; // an empty object for temporary storing the input values\r\n    \r\n    $scope.saveDateItem = function(obj, property, patchResource){\r\n        modifyToJSON(obj[property]);\r\n        ResourceService.saveItem(obj, property, patchResource);\r\n    };\r\n    \r\n    $scope.addDateItem = function(obj, property, selected, patchResource){\r\n        if(selected.value !== ''){\r\n            modifyToJSON(selected.value);\r\n            ResourceService.addItem(obj, property, selected, patchResource);\r\n        }else{\r\n            console.log('Empty date selected');\r\n        }\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('AtomicPasswordController', function($scope, ResourceService){\r\n    // Silently add patch. Change is not autosaved, because browser autofill can otherwise infinite loops \r\n    $scope.patchPasswordField = function(resource, ifc, patchResource) {\r\n        let value;\r\n        if(typeof resource[ifc] === 'undefined' || resource[ifc] === '') {\r\n            value = null;\r\n        } else {\r\n            value = resource[ifc];\r\n        }\r\n        ResourceService.addPatch('replace', resource, patchResource, ifc, value);\r\n    }\r\n});\nangular.module('AmpersandApp')\r\n.controller('AtomicTypeAheadController', function($scope, Restangular, ResourceService){\r\n    \r\n    /*\r\n     * Object to temporary store value/resourceId to add to list\r\n     * Value/resourceId is stored as property of 'selected' obj. This is needed to pass it around by reference\r\n     */\r\n    $scope.selected = {};\r\n    \r\n    $scope.hasNoResults = false;\r\n    \r\n    /*\r\n     * Typeahead object is declared in interface.controller.js\r\n     * Thereby typeahead is called only once for every resourceType per interface\r\n     */\r\n    // $scope.typeahead = {};\r\n    \r\n    /*\r\n     * Typeahead functionality\r\n     * $scope.typeahead is initiated in InterfaceController to be able to reuse typeahead data\r\n     */\r\n    $scope.getTypeahead = function(resourceType, forceGetCall){\r\n        forceGetCall = typeof forceGetCall !== 'undefined' ? forceGetCall : false;\r\n\r\n        // Only if not yet set\r\n        if(typeof $scope.typeahead[resourceType] === 'undefined' || forceGetCall){\r\n            $scope.typeahead[resourceType] = Restangular.all('resource/' + resourceType).getList().$object;\r\n        }\r\n    };\r\n    \r\n    $scope.typeaheadOnSelect = function ($item, $model, $label, resource, ifc, patchResource){\r\n        if(typeof $item._id_ === 'undefined') console.log('Resource id undefined');\r\n        else if($item._id_ === '') console.log('Empty resource id provided');\r\n        else{\r\n            if(Array.isArray(resource[ifc])){\r\n                // Construct patch(es)\r\n                ResourceService.addPatch('add', resource, patchResource, ifc, $item._id_);\r\n                ResourceService.patchResource(patchResource)\r\n                .then(function(data){\r\n                    // Adapt in js model\r\n                    if(!data.saved) resource[ifc].push(angular.copy($item));\r\n                });\r\n                \r\n            }else if(resource[ifc] === null){\r\n                // Construct patch(es)\r\n                ResourceService.addPatch('replace', resource, patchResource, ifc, $item._id_);\r\n                ResourceService.patchResource(patchResource)\r\n                .then(function(data){\r\n                    // Adapt js model\r\n                    if(!data.saved) resource[ifc] = angular.copy($item);\r\n                });\r\n            }\r\n            else console.log('Error: Property already set and/or not defined');\r\n            \r\n            $scope.hasNoResults = false;\r\n        }\r\n        // Empty selected input\r\n        $scope.selected.value = '';\r\n    };\r\n    \r\n    $scope.typeAheadCreate = function (resource, ifc, selected, patchResource, resourceType){\r\n        if(Array.isArray(resource[ifc])) { \r\n            ResourceService.addItem(resource, ifc, selected, patchResource).then(\r\n                function(){\r\n                    $scope.getTypeahead(resourceType, true);\r\n                }\r\n            );\r\n        } else if(resource[ifc] === null) {\r\n            resource[ifc] = selected.value;\r\n            ResourceService.saveItem(resource, ifc, patchResource);\r\n        } else {\r\n            console.log('Error: Property already set and/or not defined');\r\n        }\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('AtomicUploadFileController', function($scope, FileUploader, NotificationService){\r\n    \r\n    // File uploader stuff\r\n    $scope.FileUploader = new FileUploader({\r\n        alias : 'file', // fieldname as used in $_FILES['file']\r\n        formData : [],\r\n        removeAfterUpload : true,\r\n        autoUpload : true\r\n    });\r\n    \r\n    $scope.FileUploader.onSuccessItem = function(fileItem, response, status, headers){\r\n        NotificationService.updateNotifications(response.notifications);\r\n        \r\n        let newResource = response.content;\r\n        \r\n        // Add new resource to ifc\r\n        if(Array.isArray(fileItem.resource[fileItem.ifc])){ // non-uni = list\r\n            fileItem.resource[fileItem.ifc].splice(-1, 0, newResource);\r\n        }else{ // uni = object\r\n            fileItem.resource[fileItem.ifc] = newResource;\r\n        }\r\n    };\r\n    \r\n    $scope.FileUploader.onErrorItem = function(item, response, status, headers){\r\n        NotificationService.addError(response.msg, response.error, true, response.html);\r\n        NotificationService.updateNotifications(response.notifications);\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('BoxController', function($scope, ResourceService){\r\n    \r\n    // Function to create a new resource (does a POST)\r\n    $scope.createResource = ResourceService.createResource; // function(resource, ifc, callingObj, insertAtIndex)\r\n    \r\n    // Function to save certain attributes changes of a resource (does a PATCH)\r\n    $scope.save = function(resource){\r\n        ResourceService.patchResource(resource, true);\r\n    };\r\n    \r\n    // Function to cancel unsaved edits (does a GET)\r\n    $scope.cancel = ResourceService.cancelResource; // function(resource)\r\n    \r\n    // Function to remove a resource from an interface (list)\r\n    $scope.remove = ResourceService.removeResource; // function(ifc, resource, patchResource)\r\n    \r\n    // Function to delete a resource\r\n    $scope.delete = ResourceService.deleteResource; // function(ifc, resource)\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('InterfaceController', function($scope, $location, ResourceService){\r\n    /*\r\n     * An empty object for typeahead functionality.\r\n     * Defined here so it can be reused in an interface\r\n     * Prevents multiple calls for the same resourceType\r\n     */\r\n    $scope.typeahead = {};\r\n    \r\n    // Detects location changes and checks if there are unsaved changes\r\n    $scope.$on(\"$locationChangeStart\", function(event, next, current){\r\n        if(ResourceService.checkRequired()){\r\n            let confirmed = confirm(\"You have unsaved edits. Do you wish to leave?\");\r\n            if (event && !confirmed) event.preventDefault();\r\n            else if(event && confirmed) ResourceService.emptyUpdatedResources();\r\n            else console.log('Someting went wrong. Cannot determine action after locationChangeStart');\r\n        }\r\n    });\r\n    \r\n    // Function (reference) to check if there are pending promises for a resource\r\n    $scope.pendingPromises = ResourceService.pendingPromises;\r\n\r\n    /*\r\n     * Transforms the given variable into an array.\r\n     * To be used in ng-repeat directive for Ampersand UNI and non-UNI expressions\r\n     * If variable is already an array, the array is returned\r\n     * If variable is null, an empty array is returned\r\n     * Otherwise the variable is the first and single item in the array\r\n    */\r\n    $scope.requireArray = function (variable) {\r\n        if (Array.isArray(variable)) {\r\n            return variable;\r\n        } else if (variable === null) {\r\n            return [];\r\n        } else {\r\n            return [variable];\r\n        }\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.directive('myBluronenter', function() {\r\n    return function(scope, element, attrs) {\r\n        element.bind(\"keydown keypress\", function(event) {\r\n            if(event.which === 13) { // 13 = Carriage return\r\n                event.target.blur();\r\n\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.directive('myShowonhoverBox', function (){\r\n    return {\r\n        link : function(scope, element, attrs) {\r\n            if(!element.closest('.box').hasClass('my-showonhover-box-show')) element.hide(); // default hide\r\n            \r\n            element.closest('.box').bind('mouseenter', function() {\r\n                element.closest('.box').addClass('my-showonhover-box-show');\r\n                element.show();\r\n            });\r\n            element.closest('.box').bind('mouseleave', function() {\r\n                element.closest('.box').removeClass('my-showonhover-box-show');\r\n                element.hide();\r\n            });\r\n        }\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.service('ResourceService', function($localStorage, $timeout, $location, Restangular, NotificationService, $q){\r\n    // http://blog.thoughtram.io/angular/2015/07/07/service-vs-factory-once-and-for-all.html\r\n    \r\n    let updatedResources = []; // contains list with updated resource objects in this interface. Used to check if there are uncommmitted changes (patches in cache)\r\n    \r\n    let ResourceService = {\r\n        /**\r\n         * Get resource data given a certain interface (ifc)\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} callingObj will be used for loading indicator\r\n         * @param {string} tgtId get a specific target resource\r\n         * @returns {Promise}\r\n         */\r\n        getResource : function(resource, ifc, callingObj, tgtId) {\r\n            // Url to GET resource\r\n            let url = resource._path_ + '/' + ifc;\r\n\r\n            // Append tgtId if specified\r\n            if (tgtId !== undefined) {\r\n                url += '/' + tgtId;\r\n            }\r\n\r\n            let promise = Restangular\r\n            .one(url)\r\n            .get()\r\n            .then(function(data){\r\n                // No results\r\n                if ($.isEmptyObject(data)) {\r\n                    NotificationService.addInfo('No results found');\r\n                // No specific target was requested\r\n                } else if (tgtId === undefined) {\r\n                    if (resource[ifc] === null || Array.isArray(resource[ifc])) {\r\n                        resource[ifc] = data;\r\n                    } else {\r\n                        angular.extend(resource[ifc], data);\r\n                    }\r\n                // Specific target was requested\r\n                } else {\r\n                    if (Array.isArray(resource[ifc])) {\r\n                        resource[ifc].push(data);\r\n                    } else {\r\n                        resource[ifc] = data;\r\n                    }\r\n                }\r\n                \r\n                ResourceService.initResourceMetaData(resource);\r\n\r\n                return resource;\r\n            });\r\n            \r\n            // Add promise to loading list\r\n            return ResourceService.addPromiseToResourceLoadingList(callingObj, promise);\r\n        },\r\n\r\n        /**\r\n         * Patch the given resource by calling the API and sending the list of stored patches \r\n         * \r\n         * @param {Object} resource\r\n         * @param {bool} forceSave\r\n         * @returns {Promise}\r\n         */\r\n        patchResource : function(resource, forceSave){\r\n            // Use delegate resource if specified\r\n            if (typeof resource._delegatePatchesTo_ !== 'undefined') {\r\n                resource = resource._delegatePatchesTo_;\r\n            }\r\n\r\n            // Save if autoSave is enabled\r\n            if($localStorage.autoSave || forceSave) {\r\n                let promise = Restangular\r\n                .one(resource._path_)\r\n                .patch(resource._patchesCache_, {})\r\n                .then(function(data) {\r\n                    // Update visual feedback (notifications and buttons)\r\n                    ResourceService.processResponse(resource, data);\r\n\r\n                    // Update resource data\r\n                    if(resource._isRoot_ && data.navTo == null) {\r\n                        resource.get(); // if directed to other page (data.navTo), refresh of data is not needed\r\n                    } else {\r\n                        resource = angular.extend(resource, data.content);\r\n                    }\r\n\r\n                    return {resource : resource, saved: true, committed: data.isCommitted};\r\n                });\r\n\r\n                // Add promise to loading list\r\n                return ResourceService.addPromiseToResourceLoadingList(resource, promise);\r\n            } else {\r\n                // Update visual feedback\r\n                ResourceService.setResourceStatus(resource, 'warning');\r\n                resource._showButtons_ = {'save' : true, 'cancel' : true};\r\n                return $q.resolve({resource : resource, saved : false, committed: false});\r\n            }\r\n        },\r\n        \r\n        /**\r\n         * Cancel unsaved edits and get resource data\r\n         * \r\n         * @param {Object} resource\r\n         * @returns {Promise}\r\n         */\r\n        cancelResource : function(resource){\r\n            let promise = Restangular\r\n            .one(resource._path_)\r\n            .get()\r\n            .then(function(data){\r\n                if($.isEmptyObject(data)) NotificationService.addInfo('No results found');\r\n                else angular.extend(resource, data);\r\n                \r\n                // Update visual feedback (notifications and buttons)\r\n                NotificationService.getNotifications();\r\n                ResourceService.initResourceMetaData(resource);\r\n\r\n                return resource;\r\n            });\r\n            \r\n            // Add promise to loading list\r\n            return ResourceService.addPromiseToResourceLoadingList(resource, promise);\r\n        },\r\n        \r\n        /**\r\n         * Create (POST) a new resource to a certain interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} patchResource\r\n         * @param {int} insertAtIndex\r\n         * @returns {Promise}\r\n         */\r\n        createResource : function(resource, ifc, patchResource, insertAtIndex){\r\n            let promise = Restangular\r\n            .one(resource._path_).all(ifc)\r\n            .post({}, {})\r\n            .then(function(data){\r\n                let newResource = data.content;\r\n\r\n                // Update visual feedback (notifications and buttons)\r\n                ResourceService.processResponse(newResource, data);\r\n\r\n                // If not committed, add this create action to patch list\r\n                if (!data.isCommitted) {\r\n                    ResourceService.addPatch('create', resource, patchResource, ifc, newResource._id_);\r\n                    \r\n                    // Delegate additional patches upward, because this resource does not exist yet\r\n                    // See addPatch() and patchResource() functions\r\n                    newResource._delegatePatchesTo_ = patchResource;\r\n                }\r\n                \r\n                // Add new resource to ifc\r\n                if(Array.isArray(resource[ifc])){ // non-uni = list\r\n                    if(insertAtIndex === 'undefined') insertAtIndex = resource[ifc].length; // append by default\r\n                    resource[ifc].splice(insertAtIndex, 0, newResource);\r\n                }else{ // uni = object\r\n                    resource[ifc] = newResource;\r\n                }\r\n                \r\n                if(resource._isRoot_ && resource._id_ == '_NEW') $location.url('/' + ifc + '/'+ newResource._id_, false);\r\n\r\n                return newResource;\r\n            });\r\n\r\n            // Add promise to loading list\r\n            return ResourceService.addPromiseToResourceLoadingList(patchResource, promise);\r\n        },\r\n        \r\n        /**\r\n         * Remove a resource from a certain interface list\r\n         * \r\n         * @param {Object} parent\r\n         * @param {string} ifc\r\n         * @param {Object} resource\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        removeResource : function(parent, ifc, resource, patchResource){\r\n            // Construct patch(es)\r\n            ResourceService.addPatch('remove', resource, patchResource);\r\n\r\n            // Execute patch\r\n            return ResourceService\r\n            .patchResource(patchResource)\r\n            .then(function(data){\r\n                // Adapt js model\r\n                if(!data.saved) {\r\n                    if(Array.isArray(parent[ifc])) parent[ifc].splice(parent[ifc].indexOf(resource), 1); // non-uni = list\r\n                    else parent[ifc] = null; // uni = object\r\n                }\r\n            });\r\n        },\r\n        \r\n        /**\r\n         * Delete a resource\r\n         * \r\n         * @param {Object} parent\r\n         * @param {string} ifc\r\n         * @param {Object} resource to delete\r\n         * @returns {Promise}\r\n         */\r\n        deleteResource : function(parent, ifc, resource){\r\n            if(confirm('Are you sure?')){\r\n                let promise = Restangular\r\n                .one(resource._path_)\r\n                .remove({})\r\n                .then(function(data){\r\n                    // Update visual feedback (notifications and buttons)\r\n                    NotificationService.updateNotifications(data.notifications);\r\n                    \r\n                    // Remove resource from ifc\r\n                    if(Array.isArray(parent[ifc])) parent[ifc].splice(parent[ifc].indexOf(resource), 1); // non-uni = list\r\n                    else parent[ifc] = null; // uni = object\r\n\r\n                    return parent;\r\n                });\r\n\r\n                // Add promise to loading list\r\n                return ResourceService.addPromiseToResourceLoadingList(resource, promise);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Save/patch a changed attribute\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        saveItem : function(resource, ifc, patchResource){\r\n            let value;\r\n\r\n            // Construct patch(es)\r\n            if(typeof resource[ifc] === 'undefined' || resource[ifc] === '') {\r\n                value = null;\r\n            } else {\r\n                value = resource[ifc];\r\n            }\r\n            ResourceService.addPatch('replace', resource, patchResource, ifc, value);\r\n\r\n            // Register patch\r\n            return ResourceService.patchResource(patchResource);\r\n        },\r\n        \r\n        /**\r\n         * Add an item to an interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} selected item to add to the list\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        addItem : function(resource, ifc, selected, patchResource){\r\n            if(typeof selected.value === 'undefined') {\r\n                //console.log('Value undefined');\r\n                return $q.reject('Value undefined');\r\n            } else if(selected.value === '') {\r\n                //console.log('Empty value selected');\r\n                return $q.reject('Empty value selected');\r\n            } else if(!Array.isArray(resource[ifc])) {\r\n                //console.log('Error: trying to add item to non-array');\r\n                return $q.reject('Error: trying to add item to non-array');\r\n            } else{\r\n                // Adapt in js model\r\n                resource[ifc].push(selected.value);\r\n                \r\n                // Construct patch(es)\r\n                ResourceService.addPatch('add', resource, patchResource, ifc, selected.value);\r\n                return ResourceService.patchResource(patchResource)\r\n                .then(function(data){\r\n                    // Reset selected value\r\n                    delete(selected.value);\r\n                    return data;\r\n                });\r\n            }\r\n        },\r\n        \r\n        /**\r\n         * Remove an item from an interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {int} index\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        removeItem : function(resource, ifc, index, patchResource){\r\n            // Construct patch(es)\r\n            let value = resource[ifc][index];\r\n            ResourceService.addPatch('remove', resource, patchResource, ifc, value);\r\n            \r\n            // Adapt js model\r\n            resource[ifc].splice(index, 1);\r\n\r\n            return ResourceService.patchResource(patchResource);\r\n        },\r\n        \r\n        /**\r\n         * Construct, add and return patch object (with attributes 'op', 'path' and 'value')\r\n         * \r\n         * @param {string} operation choose from 'add', 'remove' or 'replace'\r\n         * @param {Object} resource\r\n         * @param {Object} patchResource resource to add patch to\r\n         * @param {string} ifc\r\n         * @param {string} value\r\n         * @returns {Object}\r\n         */\r\n        addPatch : function(operation, resource, patchResource, ifc, value){\r\n            // When patchResource is not provided use the resource itself\r\n            if (typeof patchResource === 'undefined') {\r\n                patchResource = resource;\r\n            }\r\n\r\n            // Use delegate resource if specified\r\n            if (typeof patchResource._delegatePatchesTo_ !== 'undefined') {\r\n                patchResource = patchResource._delegatePatchesTo_;\r\n            }\r\n\r\n            let pathLength = patchResource._path_.length;\r\n            \r\n            let path = resource._path_.substring(pathLength);\r\n            if (typeof ifc !== 'undefined') {\r\n                path = path + '/' + ifc;\r\n            }\r\n            \r\n            let patch;\r\n            if (typeof value === 'undefined') {\r\n                patch = { op : operation, path : path};\r\n            } else {\r\n                patch = { op : operation, path : path, value : value};\r\n            }\r\n\r\n            // Add new patch to patchResource\r\n            if(!Array.isArray(patchResource._patchesCache_)) patchResource._patchesCache_ = [];\r\n            patchResource._patchesCache_.push(patch);\r\n\r\n            // Add resource to updatedResources\r\n            if(updatedResources.indexOf(patchResource) === -1) updatedResources.push(patchResource);\r\n\r\n            return patch;\r\n        },\r\n\r\n        /**\r\n         * Returns if there are unsaved changes (i.e. patches that are not yet sent to the API)\r\n         * \r\n         * @returns {bool}\r\n         */\r\n        checkRequired : function(){ \r\n            return updatedResources.reduce(function(prev, item, index, arr){\r\n                return prev || item._patchesCache_.length;\r\n            }, false);\r\n        },\r\n        \r\n        /**\r\n         * Clear list of updated resources\r\n         */\r\n        emptyUpdatedResources : function(){\r\n            updatedResources = [];\r\n        },\r\n        \r\n        /**\r\n         * Init/reset resource meta data\r\n         * \r\n         * @param {Object} resource\r\n         */\r\n        initResourceMetaData : function(resource){\r\n            resource._showButtons_ = {'save' : false, 'cancel' : false};\r\n            resource._patchesCache_ = [];\r\n            ResourceService.setResourceStatus(resource, 'default');\r\n        },\r\n        \r\n        /**\r\n         * Process response: i.e. set resource buttons and status\r\n         * \r\n         * @param {Object} resource\r\n         * @param {Object} response from API\r\n         * @returns {Object}\r\n         */\r\n        processResponse : function(resource, response){\r\n            NotificationService.updateNotifications(response.notifications);\r\n            \r\n            if(response.isCommitted){\r\n                resource._showButtons_ = {'save' : false, 'cancel' : false};\r\n                resource._patchesCache_ = []; // empty patches cache\r\n                ResourceService.setResourceStatus(resource, 'success');\r\n                \r\n                // After 3 seconds, reset status to default\r\n                $timeout(function(){\r\n                    ResourceService.setResourceStatus(resource, 'default');\r\n                }, 3000);\r\n            }else{\r\n                resource._showButtons_ = {'save' : false, 'cancel' : true};\r\n                ResourceService.setResourceStatus(resource, 'danger');\r\n            }\r\n\r\n            return resource;\r\n        },\r\n        \r\n        /**\r\n         * Set resource status meta data\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} status choose from 'warning', 'danger', 'success' or 'default'\r\n         * @returns {Object}\r\n         */\r\n        setResourceStatus : function(resource, status){\r\n            // Reset all status properties\r\n            resource._status_ = { 'warning' : false,\r\n                                  'danger'  : false,\r\n                                  'default' : false,\r\n                                  'success' : false\r\n                                };\r\n            // Set status property\r\n            resource._status_[status] = true;\r\n            \r\n            return resource;\r\n        },\r\n        \r\n        /**\r\n         * Returns if resource has pending promises\r\n         * \r\n         * @param {Object} resource\r\n         * @returns {bool}\r\n         */\r\n        pendingPromises : function(resource){\r\n            if(!Array.isArray(resource._loading_)) return false; // empty array contains no pending promises\r\n            \r\n            return resource._loading_.some(function(val){\r\n                return val.$$state.status === 0; // promise status: 0 -> pending, 1 -> resolved, 2 -> rejected\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} resource\r\n         * @param {Promise} promise\r\n         * @returns {Promise}\r\n         */\r\n        addPromiseToResourceLoadingList : function(resource, promise){\r\n            if(!Array.isArray(resource._loading_)) resource._loading_ = [];\r\n            resource._loading_.push(promise);\r\n            resource._isLoading_ = true;\r\n\r\n            return promise.finally(function(){\r\n                if(!ResourceService.pendingPromises(resource)) {\r\n                    resource._isLoading_ = false;\r\n                    resource._loading_ = [];\r\n                }\r\n            });\r\n        }\r\n    };\r\n    \r\n    return ResourceService;\r\n});\r\n\nangular.module('AmpersandApp')\r\n.service('LoginService', function($rootScope, $location, $localStorage, $sessionStorage){\r\n    let urlLoginPage = null;\r\n    \r\n    let service = {\r\n        setLoginPage : function (url) {\r\n            urlLoginPage = url;\r\n        },\r\n\r\n        gotoLoginPage : function () {\r\n            if (urlLoginPage) {\r\n                $location.url(urlLoginPage);\r\n            }\r\n        },\r\n\r\n        getPageBeforeLogin : function () {\r\n            return $localStorage.login_urlBeforeLogin;\r\n        },\r\n\r\n        sessionIsLoggedIn : function () {\r\n            return $sessionStorage.session.loggedIn;\r\n        },\r\n\r\n        setSessionIsLoggedIn : function (bool) {\r\n            $sessionStorage.session.loggedIn = bool;\r\n        },\r\n\r\n        getSessionVars : function () {\r\n            return $sessionStorage.sessionVars;\r\n        }\r\n    };\r\n\r\n    $rootScope.$on('$routeChangeSuccess', function (event, current, previous) {\r\n        if (current.$$route.originalPath !== urlLoginPage) {\r\n            $localStorage.login_urlBeforeLogin = $location.path();\r\n        } else {\r\n            console.log('login page');\r\n        }\r\n    });\r\n    \r\n    return service;\r\n});\nangular.module('AmpersandApp')\r\n.directive('myNavbarResize', function ($window, $timeout, NavigationBarService) {\r\n    return function (scope, element) {\r\n        var w = angular.element($window);\r\n        \r\n        var resizeNavbar = function() {\r\n            $timeout(function(){\r\n                // moving ifc items from dropdown-menu to navbar itself\r\n                while($('#navbar-interfaces').width() < ($('#navbar-wrapper').width() - $('#navbar-options').width()) &&\r\n                        $('#navbar-interfaces-dropdown-menu').children().length > 0){\r\n                    $(\"#navbar-interfaces-dropdown-menu\")\r\n                    .children().first().appendTo(\"#navbar-interfaces\") // move item back to menu bar\r\n                    .toggleClass('overflow-menu-item', false); // remove flag specifying that this item is in the overflow list\r\n                }\r\n                \r\n                // moving ifc items from navbar to dropdown-menu\r\n                while($('#navbar-interfaces').width() > ($('#navbar-wrapper').width() - $('#navbar-options').width())){\r\n                    $(\"#navbar-interfaces\")\r\n                    .children().last().prependTo(\"#navbar-interfaces-dropdown-menu\") // move item to overflow list\r\n                    .toggleClass('overflow-menu-item', true); // add flag specifying that this item is in the overflow list\r\n                    \r\n                    // show/hide dropdown menu for more interfaces (must be inside loop, because it affects the width of the navbar\r\n                    $('#navbar-interfaces-dropdown').toggleClass('hidden', $('#navbar-interfaces-dropdown-menu').children().length <= 0);\r\n                }\r\n                \r\n                // show/hide dropdown menu when possible\r\n                $('#navbar-interfaces-dropdown').toggleClass('hidden', $('#navbar-interfaces-dropdown-menu').children().length <= 0);\r\n            });\r\n        };\r\n        \r\n        // watch navbar\r\n        NavigationBarService.addObserverCallable(resizeNavbar);\r\n        \r\n        // when window size gets changed\r\n        w.bind('resize', function () {\r\n            resizeNavbar();\r\n        });\r\n        \r\n        // when page loads\r\n        angular.element(document).ready(function(){\r\n            resizeNavbar();\r\n        });\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.directive('myNavItem', function(){\r\n    return {\r\n        restrict : 'A',\r\n        scope: {\r\n            item: '=data' // '=' => two-way bind\r\n        },\r\n        templateUrl: 'app/src/navbar/myNavItem.view.html',\r\n        transclude: false,\r\n        link: function(scope, element, attrs, controller){\r\n            // Functionality to add/remove class 'dropdown-submenu' when item is moved to/from overflow list\r\n            scope.$watch(function() {\r\n                return element.attr('class');\r\n            }, function(){\r\n                if (scope.item.hasChildren() && element.hasClass('overflow-menu-item')) {\r\n                    element.addClass('dropdown-submenu');\r\n                } else if (scope.item.hasChildren() && element.hasClass('top-menu-item')) {\r\n                    element.removeClass('dropdown-submenu');\r\n                }\r\n            });\r\n        },\r\n        controller: function ($scope) {\r\n            \r\n        }\r\n    };\r\n});\nangular.module('AmpersandApp')\r\n.controller('NavigationBarController', function ($scope, $route, Restangular, $localStorage, $sessionStorage, $location, NotificationService, RoleService, NavigationBarService, LoginService) {\r\n    $scope.localStorage = $localStorage;\r\n    $scope.loadingNavBar = [];\r\n    $scope.navbar = NavigationBarService.navbar;\r\n    $scope.resetSettingsToDefault = NavigationBarService.resetSettingsToDefault;\r\n    \r\n    $scope.loggedIn = function () {\r\n        return LoginService.sessionIsLoggedIn();\r\n    };\r\n\r\n    $scope.getSessionRoles = function () {\r\n        return $sessionStorage.sessionRoles;\r\n    };\r\n\r\n    $scope.getSessionVars = function () {\r\n        return $sessionStorage.sessionVars;\r\n    };\r\n\r\n    $scope.reload = function(){\r\n        $scope.loadingNavBar = [];\r\n        $scope.loadingNavBar.push(NavigationBarService.refreshNavBar());\r\n        $route.reload();\r\n    };\r\n\r\n    $scope.toggleRole = function(roleId, set){\r\n        RoleService.toggleRole(roleId, set);\r\n        $scope.loadingNavBar = [];\r\n        $scope.loadingNavBar.push(\r\n            RoleService.setActiveRoles()\r\n            .then(function(data){\r\n                NavigationBarService.refreshNavBar();\r\n                $route.reload();\r\n            })\r\n        );\r\n    };\r\n\r\n    $scope.checkAllRules = NotificationService.checkAllRules;\r\n\r\n    $scope.createNewResource = function(resourceType, openWithIfc){\r\n        Restangular.one('resource').all(resourceType)\r\n        .post({}, {})\r\n        .then(\r\n            function(data){\r\n                // Jumps to interface and requests newly created resource\r\n                $location.url(openWithIfc + '/' + data._id_);\r\n            }\r\n        );\r\n    };\r\n    \r\n    $scope.loadingNavBar.push(NavigationBarService.refreshNavBar());\r\n});\r\n\nangular.module('AmpersandApp')\r\n.service('NavigationBarService', function(Restangular, $localStorage, $sessionStorage, $timeout, NotificationService, $q){\r\n    let navbar = {\r\n        home: null, // home/start page, can be set in project.yaml (default: '#/prototype/welcome')\r\n        top: [],\r\n        new: [],\r\n        role: [],\r\n        ext: []\r\n    };\r\n    let defaultSettings = {\r\n        notify_showSignals: true,\r\n        notify_showInfos: true,\r\n        notify_showSuccesses: true,\r\n        notify_autoHideSuccesses: true,\r\n        notify_showErrors: true,\r\n        notify_showWarnings: true,\r\n        notify_showInvariants: true,\r\n        autoSave: true\r\n    };\r\n    let observerCallables = [];\r\n\r\n    let notifyObservers = function(){\r\n        angular.forEach(observerCallables, function(callable){\r\n            callable();\r\n        });\r\n    };\r\n\r\n    let pendingNavbarPromise = null;\r\n    function getNavbarPromise() {\r\n        if (pendingNavbarPromise === null) {\r\n            pendingNavbarPromise = Restangular\r\n            .one('app/navbar')\r\n            .get()\r\n            .finally(function() {\r\n                pendingNavbarPromise = null;\r\n            });\r\n        }\r\n\r\n        return pendingNavbarPromise;\r\n    }\r\n\r\n    let service = {\r\n        navbar : navbar,\r\n        defaultSettings : defaultSettings,\r\n\r\n        addObserverCallable : function(callable){\r\n            observerCallables.push(callable);\r\n        },\r\n\r\n        getRouteForHomePage : function() {\r\n            if (navbar.home === null) {\r\n                return getNavbarPromise()\r\n                .then(function (data){\r\n                    return data.home;\r\n                }, function (error) {\r\n                    console.error('Error in getting nav bar data: ', error);\r\n                })\r\n            } else {\r\n                return $q.resolve(navbar.home);\r\n            }\r\n        },\r\n\r\n        refreshNavBar : function(){\r\n            return getNavbarPromise()\r\n            .then(function(data){\r\n                // Content of navbar\r\n                let hasChildren = function () {\r\n                    return this.children.length > 0;\r\n                };\r\n                let navItems = data.navs.map(function (item) {\r\n                    item.hasChildren = hasChildren.bind(item);\r\n                    return item;\r\n                });\r\n                let menus = treeify(navItems, 'id', 'parent', 'children');\r\n                navbar.home = data.home;\r\n                \r\n                let mainMenu = menus.find(function(menu){\r\n                    return menu.id === 'MainMenu'\r\n                });\r\n                navbar.top = mainMenu === undefined ? [] : mainMenu.children;\r\n                navbar.new = data.new;\r\n                navbar.role = data.role;\r\n                navbar.ext = data.ext;\r\n\r\n                // Content for session storage\r\n                $sessionStorage.session = data.session;\r\n                $sessionStorage.sessionRoles = data.sessionRoles;\r\n                $sessionStorage.sessionVars = data.sessionVars;\r\n                \r\n                // Save default settings\r\n                service.defaultSettings = data.defaultSettings;\r\n                service.initializeSettings();\r\n                \r\n                // Update notifications\r\n                NotificationService.updateNotifications(data.notifications);\r\n\r\n                notifyObservers();\r\n            }, function(error){\r\n                service.initializeSettings();\r\n            }).catch(function(error) { \r\n                console.error(error);\r\n            });\r\n        },\r\n\r\n        initializeSettings : function(){\r\n            let resetRequired = false;\r\n\r\n            // Check for undefined settings\r\n            angular.forEach(service.defaultSettings, function(value, index, obj){\r\n                if($localStorage[index] === undefined) {\r\n                    resetRequired = true;\r\n                }\r\n            });\r\n\r\n            if(resetRequired) service.resetSettingsToDefault();\r\n        },\r\n\r\n        resetSettingsToDefault : function(){\r\n            // all off\r\n            angular.forEach(service.defaultSettings, function(value, index, obj){\r\n                $localStorage[index] = false;\r\n            });\r\n            \r\n            $timeout(function() {\r\n                // Reset to default\r\n                $localStorage.$reset(service.defaultSettings);\r\n            }, 500);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Creates a tree from flat list of elements with parent specified.\r\n     * If no parent specified, the element is considered a root node\r\n     * The function returns a list of root nodes\r\n     * 'id', 'parent' and 'children' object labels can be set\r\n     * \r\n     * @param {Array} list \r\n     * @param {string} idAttr \r\n     * @param {string} parentAttr \r\n     * @param {string} childrenAttr \r\n     * @returns {Array}\r\n     */\r\n    function treeify(list, idAttr, parentAttr, childrenAttr) {\r\n        if (!idAttr) idAttr = 'id';\r\n        if (!parentAttr) parentAttr = 'parent';\r\n        if (!childrenAttr) childrenAttr = 'children';\r\n        var treeList = [];\r\n        var lookup = {};\r\n        list.forEach(function(obj) {\r\n            lookup[obj[idAttr]] = obj;\r\n            obj[childrenAttr] = [];\r\n        });\r\n        list.forEach(function(obj) {\r\n            if (obj[parentAttr] != null) {\r\n                if (lookup[obj[parentAttr]] === undefined) { // error when parent element is not defined in list\r\n                    console.error('Parent element is undefined: ', obj[parentAttr]);\r\n                } else {\r\n                    lookup[obj[parentAttr]][childrenAttr].push(obj);\r\n                    obj[parentAttr] = lookup[obj[parentAttr]]; // replace parent id with reference to actual parent element\r\n                }\r\n            } else {\r\n                treeList.push(obj);\r\n            }\r\n        });\r\n        return treeList;\r\n    }\r\n    \r\n    return service;\r\n});\r\n\nangular.module('AmpersandApp')\r\n.service('RoleService', function($sessionStorage, Restangular){\r\n    \r\n    /*\r\n     * Available roles are registered in $sessionStorage.sessionRoles\r\n     * A role has the following attributes: id, label, active\r\n     */\r\n    \r\n    return {\r\n        selectRole : function(roleId){\r\n            this.toggleRole(roleId, true);\r\n        },\r\n        \r\n        selectRoleByLabel : function (roleLabel){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if(role.label == roleLabel) return this.selectRole(role.id);\r\n            });\r\n        },\r\n        \r\n        toggleRole : function(roleId, set){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if (role.id == roleId) {\r\n                    if(set === undefined) role.active = !role.active;\r\n                    else role.active = set;\r\n                }\r\n            });\r\n        },\r\n        \r\n        getActiveRoleIds : function(){\r\n            var roleIds = [];\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if (role.active === true) {\r\n                    roleIds.push(role.id);\r\n                }\r\n            });\r\n            return roleIds;\r\n        },\r\n        \r\n        deactivateAllRoles : function(){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                role.active = false;\r\n            });\r\n        },\r\n        \r\n        setActiveRoles : function(){\r\n            return Restangular.all('app/roles').patch($sessionStorage.sessionRoles);\r\n        }\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.service('NotificationService', function($localStorage, $sessionStorage, $timeout, Restangular){\r\n    // Initialize notifications container\r\n    let notifications = {\r\n        'signals' : [],\r\n        'invariants' : [],\r\n        'infos' : [],\r\n        'successes' : [],\r\n        'warnings' : [],\r\n        'errors' : []\r\n    };\r\n    \r\n    let NotificationService = {\r\n        notifications : notifications,\r\n        \r\n        // Function to get notifications again\r\n        getNotifications : function(){\r\n            return Restangular\r\n            .one('app/notifications')\r\n            .get()\r\n            .then(\r\n                function(data){\r\n                    NotificationService.updateNotifications(data);\r\n                },\r\n                function(){\r\n                    NotificationService.addError('Something went wrong while getting notifications');\r\n                }\r\n            );\r\n        },\r\n\r\n        checkAllRules : function(){\r\n            return Restangular\r\n            .one('admin/ruleengine/evaluate/all')\r\n            .get()\r\n            .then(\r\n                function(data){\r\n                    NotificationService.addSuccess('Evaluated all rules.');\r\n                    NotificationService.updateNotifications(data);\r\n                },function(){\r\n                    NotificationService.addError('Something went wrong while evaluating all rules');\r\n                }\r\n            );\r\n        },\r\n        \r\n        // Function to update notifications after api response\r\n        updateNotifications : function(data){\r\n            if(data === undefined) return;\r\n            \r\n            // Overwrite\r\n            notifications.signals = data.signals;\r\n            notifications.invariants = data.invariants;\r\n            \r\n            // Merge\r\n            notifications.infos = notifications.infos.concat(data.infos);\r\n            notifications.successes = notifications.successes.concat(data.successes);\r\n            notifications.warnings = notifications.warnings.concat(data.warnings);\r\n            notifications.errors = notifications.errors.concat(data.errors);\r\n            \r\n            if($localStorage.notify_autoHideSuccesses){\r\n                $timeout(function() {\r\n                    notifications.successes = [];\r\n                }, 3000);\r\n            }\r\n        },\r\n\r\n        clearNotifications : function () {\r\n            notifications.signals = [];\r\n            notifications.invariants = [];\r\n            notifications.infos = [];\r\n            notifications.successes = [];\r\n            notifications.warnings = [];\r\n            notifications.errors = [];\r\n        },\r\n        \r\n        addSuccess : function(message){\r\n            notifications.successes.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n            \r\n            // TODO: move timeout function here for auto hide successes\r\n        },\r\n        \r\n        addError : function(message, code, persistent, details){\r\n            code = typeof code !== undefined ? code : null;\r\n            persistent = typeof persistent !== undefined ? persistent : false;\r\n            details = typeof details !== undefined ? details : false;\r\n            \r\n            let alreadyExists = false;\r\n            let arr = notifications.errors;\r\n            for (let i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    arr[i].code = code;\r\n                    arr[i].persistent = persistent;\r\n                    arr[i].details = details;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.errors.push({\r\n                'message' : message,\r\n                'code' : code,\r\n                'count' : 1,\r\n                'persistent' : persistent,\r\n                'details' : details\r\n            });\r\n        },\r\n        \r\n        addWarning : function(message){\r\n            let alreadyExists = false;\r\n            let arr = notifications.warnings;\r\n            for (var i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.warnings.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n        },\r\n        \r\n        addInfo : function(message){\r\n            let alreadyExists = false;\r\n            let arr = notifications.infos;\r\n            for (var i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.infos.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n        }\r\n    };\r\n    \r\n    return NotificationService;\r\n});\nangular.module('AmpersandApp')\r\n.controller('NotificationCenterController', function ($scope, $route, Restangular, $localStorage, NotificationService) {\r\n    \r\n    $scope.localStorage = $localStorage;\r\n    $scope.notifications = NotificationService.notifications;\r\n    \r\n    // Hide success-, error-, warnings-, info- and invariant violation messages (not signals) upon route change\r\n    $scope.$on(\"$routeChangeSuccess\", function(){\r\n        $scope.notifications.successes = [];\r\n        $scope.notifications.errors = $scope.notifications.errors.filter(function (error){\r\n            if(error.persistent){\r\n                error.persistent = false;\r\n                return true;\r\n            }\r\n            else return false;\r\n        });\r\n        $scope.notifications.warnings = [];\r\n        $scope.notifications.infos = [];\r\n        $scope.notifications.invariants = [];\r\n    });\r\n    \r\n    // Function to close notifications\r\n    $scope.closeAlert = function(alerts, index) {\r\n        alerts.splice(index, 1);\r\n    };\r\n    \r\n});\r\n\nangular.module('AmpersandApp')\r\n.filter('unsafe', function($sce){\r\n    return $sce.trustAsHtml;\r\n});\r\n\nangular.module('AmpersandApp')\r\n.config(function($routeProvider) {\r\n    $routeProvider\r\n        // default start page\r\n        .when('/ext/Login', {\r\n            resolveRedirectTo : ['LoginService', function (LoginService) {\r\n                if (LoginService.sessionIsLoggedIn()) {\r\n                    return '/'; // nav to home when user is already loggedin\r\n                } else {\r\n                    return; // will continue this route using controller and template below\r\n                }\r\n            }],\r\n            controller : 'LoginExtLoginController',\r\n            templateUrl : 'app/src/oauthlogin/login.html',\r\n            interfaceLabel : 'Login'\r\n        });\r\n}).requires.push('LoginModule'); // add LoginModule to dependency list\r\n\r\n// LoginModule declaration\r\nangular.module('LoginModule', ['ngRoute', 'restangular'])\r\n.controller('LoginExtLoginController', function($scope, Restangular, $location, NotificationService, LoginService){\r\n    // When already logged in, navigate to home\r\n    $scope.$watch(LoginService.sessionIsLoggedIn(), function() {\r\n        if (LoginService.sessionIsLoggedIn()) {\r\n            $location.path('/'); // goto home\r\n        }\r\n    });\r\n\r\n    Restangular.one('oauthlogin/login').get().then(\r\n        function(data){ // on success\r\n            $scope.idps = data.identityProviders;\r\n            NotificationService.updateNotifications(data.notifications);\r\n        }\r\n    );\r\n}).controller('LoginExtLogoutController', function($scope, Restangular, $location, NotificationService, NavigationBarService){\r\n    $scope.logout = function(){\r\n        Restangular.one('oauthlogin/logout').get().then(\r\n            function(data){ // success\r\n                NotificationService.updateNotifications(data.notifications);\r\n                NavigationBarService.refreshNavBar();\r\n                $location.path('/'); // goto home\r\n            }\r\n        );\r\n    };\r\n});\nangular.module('AmpersandApp')\r\n.directive('myNavToInterfaces', function(){\r\n    return {\r\n        restrict : 'E',\r\n        scope : {resource : '=', target : '@'}, // '=' => two-way bind, '@' => evaluates string (use {{}} in html) \r\n        templateUrl : 'app/src/shared/myNavTo/myNavToInterfaces.html',\r\n        transclude : true\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.directive('myNavToOtherInterfaces', function(){\r\n    return {\r\n        restrict : 'E',\r\n        scope  : {resource : '=', target : '@'}, // '=' => two-way bind, '@' => evaluates string (use {{}} in html) \r\n        templateUrl : 'app/src/shared/myNavTo/myNavToOtherInterfaces.html'\r\n    };\r\n});\r\n\nangular.module('AmpersandApp').run(['$templateCache', function($templateCache) {$templateCache.put('app/src/admin/check-rules-menu-item.html','<a ng-click=\"checkAllRules()\"><span class=\"glyphicon glyphicon-check\"></span><span> (Re)evaluate all rules</span></a>');\n$templateCache.put('app/src/admin/execengine-menu-item.html','<a ng-controller=\"ExecEngineController\" href=\"\" ng-click=\"run()\">\\r\\n\\t<span class=\"glyphicon glyphicon-cog\"></span><span> Run execution engine</span>\\r\\n</a>');\n$templateCache.put('app/src/admin/exporter-menu-item.html','<a ng-href=\"api/v1/admin/exporter/export/all\">\\r\\n    <span class=\"glyphicon glyphicon-download\"></span><span> Population export</span>\\r\\n</a>');\n$templateCache.put('app/src/admin/installer-menu-item.html','<a href=\"#/admin/installer\">\\r\\n    <span class=\"glyphicon glyphicon-trash\"></span><span> Reinstall application</span>\\r\\n</a>');\n$templateCache.put('app/src/admin/installer.html','<div class=\"container-fluid\" id=\"Interface\">\\r\\n    <div class=\"jumbotron\">\\r\\n        <h1>Installer</h1>\\r\\n        <p>This action will reinstall the application and delete all content.</p>\\r\\n        <p>If provided, the initial population will be installed.</p>\\r\\n        <div class=\"btn-group\">\\r\\n            <button type=\"button\" ng-click=\"install(true)\" class=\"btn btn-lg\" ng-class=\"{\\'btn-danger\\' : (!installing && !installed), \\'btn-warning\\' : installing, \\'btn-success\\' : installed}\" ng-disabled=\"installing\">\\r\\n                <span ng-if=\"!installed && ! installing\">Reinstall application  </span>\\r\\n                <span ng-if=\"installing\">Application installing  </span>\\r\\n                <span ng-if=\"installed\">Application reinstalled  </span>\\r\\n                <img ng-if=\"installing\" ng-src=\"app/images/loading.gif\" style=\"height:20px;\"/>\\r\\n            </button>\\r\\n            <button type=\"button\" class=\"btn btn-lg dropdown-toggle\" ng-class=\"{\\'btn-danger\\' : (!installing && !installed), \\'btn-warning\\' : installing, \\'btn-success\\' : installed}\" ng-disabled=\"installing\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\\r\\n                <span class=\"caret\"></span>\\r\\n            </button>\\r\\n            <ul class=\"dropdown-menu\">\\r\\n                <li><a href=\"\" ng-click=\"install(true, false)\">Reinstall application</a></li>\\r\\n                <li><a href=\"\" ng-click=\"install(false, false)\">Reinstall application (without default population)</a></li>\\r\\n                <li><a href=\"\" ng-click=\"install(true, true)\">Reinstall application (ignore invariant rules)</a></li>\\r\\n            </ul>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>');\n$templateCache.put('app/src/importer/importer.html','<style>\\r\\n.my-drop-zone { \\r\\nborder: dotted 3px lightgray;\\r\\n}\\r\\n\\r\\n/* Default class applied to drop zones on over */\\r\\n.nv-file-over {\\r\\n\\tborder: dotted 3px green;\\r\\n}\\r\\n</style>\\r\\n<div class=\"container-fluid interface\">\\r\\n\\t<fieldset>\\r\\n\\t\\t<legend>Population importer</legend>\\r\\n\\t\\t<div class=\"row\">\\r\\n\\t\\t\\t<div class=\"col-md-3\" nv-file-drop=\"\" uploader=\"uploader\">\\r\\n\\t\\t\\t\\t<h3>Select files</h3>\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t<div ng-show=\"uploader.isHTML5\">\\r\\n\\t\\t\\t\\t<!-- 3. nv-file-over uploader=\"link\" over-class=\"className\" -->\\r\\n\\t\\t\\t\\t\\t<div class=\"well my-drop-zone\" nv-file-over=\"\" uploader=\"uploader\">\\r\\n\\t\\t\\t\\t\\t\\tBase drop zone\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t<!-- Example: nv-file-select=\"\" uploader=\"{Object}\" options=\"{Object}\" filters=\"{String}\" -->\\r\\n\\t\\t\\t\\tMultiple\\r\\n\\t\\t\\t\\t<input type=\"file\" nv-file-select=\"\" uploader=\"uploader\" multiple  /><br/>\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tSingle\\r\\n\\t\\t\\t\\t<input type=\"file\" nv-file-select=\"\" uploader=\"uploader\" />\\r\\n\\t\\t\\t</div>\\t\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t<div class=\"col-md-9\" style=\"margin-bottom: 40px\">\\r\\n\\t\\r\\n\\t\\t\\t\\t<h3>Upload queue</h3>\\r\\n\\t\\t\\t\\t<p>Queue length: {{ uploader.queue.length }}</p>\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t<table class=\"table\">\\r\\n\\t\\t\\t\\t\\t<thead>\\r\\n\\t\\t\\t\\t\\t\\t<tr>\\r\\n\\t\\t\\t\\t\\t\\t\\t<th width=\"50%\">Name</th>\\r\\n\\t\\t\\t\\t\\t\\t\\t<th ng-show=\"uploader.isHTML5\">Size</th>\\r\\n\\t\\t\\t\\t\\t\\t\\t<th ng-show=\"uploader.isHTML5\">Progress</th>\\r\\n\\t\\t\\t\\t\\t\\t\\t<th>Status</th>\\r\\n\\t\\t\\t\\t\\t\\t\\t<th>Actions</th>\\r\\n\\t\\t\\t\\t\\t\\t</tr>\\r\\n\\t\\t\\t\\t\\t</thead>\\r\\n\\t\\t\\t\\t\\t<tbody>\\r\\n\\t\\t\\t\\t\\t\\t<tr ng-repeat=\"item in uploader.queue\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<td><strong>{{ item.file.name }}</strong></td>\\r\\n\\t\\t\\t\\t\\t\\t\\t<td ng-show=\"uploader.isHTML5\" nowrap>{{ item.file.size/1024/1024|number:2 }} MB</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t<td ng-show=\"uploader.isHTML5\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\"progress\" style=\"margin-bottom: 0;\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\"progress-bar\" role=\"progressbar\" ng-style=\"{ \\'width\\': item.progress + \\'%\\' }\"></div>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t<td class=\"text-center\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span ng-show=\"item.isSuccess\"><i class=\"glyphicon glyphicon-ok\"></i></span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span ng-show=\"item.isCancel\"><i class=\"glyphicon glyphicon-ban-circle\"></i></span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span ng-show=\"item.isError\"><i class=\"glyphicon glyphicon-remove\"></i></span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span ng-show=\"item.isUploading\"><img src=\"app/images/loading.gif\" height=\"20\" width=\"20\"></span>\\r\\n\\t\\t\\t\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t<td nowrap>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-success btn-xs\" ng-click=\"item.upload()\" ng-disabled=\"item.isReady || item.isUploading\">  <!-- Removed: \"|| item.isSuccess\" to enable the re-upload of a file.-->\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-upload\"></span> Upload\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-warning btn-xs\" ng-click=\"item.cancel()\" ng-disabled=\"!item.isUploading\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-danger btn-xs\" ng-click=\"item.remove()\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-trash\"></span> Remove\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t\\t\\t\\t</tr>\\r\\n\\t\\t\\t\\t\\t</tbody>\\r\\n\\t\\t\\t\\t</table>\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t<div>\\r\\n\\t\\t\\t\\t\\t<div>\\r\\n\\t\\t\\t\\t\\t\\tQueue progress:\\r\\n\\t\\t\\t\\t\\t\\t<div class=\"progress\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\"progress-bar\" role=\"progressbar\" ng-style=\"{ \\'width\\': uploader.progress + \\'%\\' }\"></div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"uploader.uploadAll()\" ng-disabled=\"!uploader.getNotUploadedItems().length\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-upload\"></span> Upload all\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-warning btn-sm\" ng-click=\"uploader.cancelAll()\" ng-disabled=\"!uploader.isUploading\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel all\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-danger btn-sm\" ng-click=\"uploader.clearQueue()\" ng-disabled=\"!uploader.queue.length\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-trash\"></span> Remove all\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t</div>\\t\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</fieldset>\\r\\n</div>');\n$templateCache.put('app/src/importer/menu-item.html','<a ng-href=\"#/ext/importer/\">\\r\\n    <span class=\"glyphicon glyphicon-upload\"></span><span> Population importer</span>\\r\\n</a>');\n$templateCache.put('app/src/navbar/myNavItem.view.html','<a ng-if=\"item.ifc\" ng-href=\"#/{{item.ifc}}\"><!-- link to specific interface -->\\r\\n    <span class=\"glyphicon glyphicon-list-alt\"></span>\\r\\n    <span> {{item.label}}</span>\\r\\n</a>\\r\\n<a ng-if=\"item.url\" ng-href=\"{{item.url}}\" target=\"_blank\"><!-- link to (external) url -->\\r\\n    <span class=\"glyphicon glyphicon-link\"></span>\\r\\n    <span> {{item.label}}</span>\\r\\n</a>\\r\\n<a ng-if=\"item.hasChildren()\" href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\\r\\n    <span class=\"glyphicon glyphicon-align-justify\"></span>\\r\\n    <span> {{item.label}}</span>\\r\\n</a>\\r\\n<ul ng-if=\"item.hasChildren()\" class=\"dropdown-menu\" role=\"menu\">\\r\\n    <li ng-repeat=\"subitem in item.children | orderBy : \\'seqNr\\'\"\\r\\n        ng-class=\"{\\'dropdown-submenu\\' : subitem.hasChildren(), \\'dropdown-header\\' : !subitem.ifc && !subitem.url && !subitem.hasChildren()}\"\\r\\n        my-nav-item data=\"subitem\"></li>\\r\\n</ul>\\r\\n<span ng-if=\"!item.ifc && !item.url && !item.hasChildren()\">{{item.label}}</span>');\n$templateCache.put('app/src/navbar/navigationBar.html','<nav class=\"navbar navbar-default\" role=\"navigation\" ng-controller=\"NavigationBarController\" cg-busy=\"{promise:loadingNavBar}\">\\r\\n    <div id=\"navbar-wrapper\" class=\"container\">\\r\\n        <ul class=\"nav navbar-nav\" id=\"navbar-interfaces\" my-navbar-resize>\\r\\n            <li ng-show=\"navbar.home\"><a ng-href=\"#{{navbar.home}}\"><span class=\"glyphicon glyphicon-home\"></span></a></li>\\r\\n            <li id=\"navbar-interfaces-dropdown\" class=\"dropdown\">\\r\\n                <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"glyphicon glyphicon-menu-hamburger\"></span></a>\\r\\n                <ul id=\"navbar-interfaces-dropdown-menu\" class=\"dropdown-menu\" role=\"menu\"></ul>\\r\\n            </li>\\r\\n            <li id=\"{{item.id}}\" class=\"top-menu-item\" ng-repeat=\"item in navbar.top | orderBy : \\'seqNr\\'\" my-nav-item data=\"item\"></li>\\r\\n        </ul>\\r\\n        <ul class=\"nav navbar-nav navbar-right\" id=\"navbar-options\">\\r\\n            <!-- hidden on extra small devices, e.g. phone (<768px) -->\\r\\n            <li class=\"dropdown hidden-xs\" uib-tooltip=\"Notification menu\" tooltip-trigger=\"mouseenter\" tooltip-placement=\"left\">\\r\\n                <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"glyphicon glyphicon-bullhorn\"></span></a>\\r\\n                <ul class=\"dropdown-menu\" role=\"menu\" ng-click=\"$event.stopPropagation();\">\\r\\n                    <li class=\"dropdown-header\">Transaction settings</li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showSignals\"> Show signals</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showInvariants\"> Show invariants</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.autoSave\"> Auto save changes</switch></li>\\r\\n                    <li class=\"dropdown-header\">User logs</li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showErrors\"> Show errors</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showWarnings\"> Show warnings</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showInfos\"> Show infos</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showSuccesses\"> Show successes</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_autoHideSuccesses\"> Auto hide successes</switch></li>\\r\\n                    <li class=\"divider\" role=\"presentation\"></li>\\r\\n                        <li><a href=\"\" ng-click=\"resetSettingsToDefault();\"><span class=\"glyphicon glyphicon-repeat\" style=\"margin: 4px; width: 30px;\"></span> Default settings</a></li>\\r\\n                </ul>\\r\\n            </li>\\r\\n            \\r\\n            <!-- hidden on extra small devices, e.g. phone (<768px) -->\\r\\n            <li class=\"dropdown hidden-xs\" uib-tooltip=\"Tool menu\" tooltip-trigger=\"mouseenter\" tooltip-placement=\"left\">\\r\\n                <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"glyphicon glyphicon-th\"></span></a>\\r\\n                <ul class=\"dropdown-menu\" role=\"menu\">\\r\\n                    <li><a href=\"\" ng-click=\"reload()\"><span class=\"glyphicon glyphicon-refresh\"></span> Refresh page</a></li>\\r\\n                    <li ng-repeat=\"ext in navbar.ext\" ng-include=\"ext.url\"/>\\r\\n                </ul>\\r\\n            </li>\\r\\n            \\r\\n            <!-- hidden on extra small devices, e.g. phone (<768px) -->\\r\\n            <li ng-if=\"navbar.new.length\" class=\"dropdown hidden-xs\" uib-tooltip=\"Create new\" tooltip-trigger=\"mouseenter\" tooltip-placement=\"left\">\\r\\n                <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\\r\\n                    <span class=\"glyphicon glyphicon-plus\"></span>\\r\\n                </a>\\r\\n                <ul class=\"dropdown-menu\" role=\"menu\">\\r\\n                    <li ng-repeat=\"item in navbar.new\" ng-class=\"{\\'dropdown-submenu\\' : item.ifcs.length > 1}\">\\r\\n                        <!--<a  style=\"position:relative; display:inline-block;\">-->\\r\\n                        <a ng-if=\"item.ifcs.length > 1\" tabindex=\"-1\" href=\"#\">{{item.label}}</a>\\r\\n                        <ul ng-if=\"item.ifcs.length > 1\" class=\"dropdown-menu\" role=\"menu\">\\r\\n                            <li ng-repeat=\"ifc in item.ifcs\">\\r\\n                                <a tabindex=\"-1\" href=\"#\" ng-click=\"createNewResource(ifc.resourceType, ifc.link);\">{{ifc.label}}</a>\\r\\n                            </li>\\r\\n                        </ul>\\r\\n                        \\r\\n                        <a ng-if=\"item.ifcs.length == 1\" href=\"\" ng-click=\"createNewResource(item.ifcs[0].resourceType, item.ifcs[0].link);\">{{item.label}}</a>\\r\\n                        <span ng-if=\"item.ifcs.length == 0\">{{item.label}}</span>\\r\\n                    </li>\\r\\n                </ul>\\r\\n            </li>\\r\\n            \\r\\n            <li ng-if=\"getSessionRoles().length || navbar.role.length\" class=\"dropdown\" uib-tooltip=\"Role menu\" tooltip-trigger=\"mouseenter\" tooltip-placement=\"left\">\\r\\n                <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"glyphicon glyphicon-user\"></span></a>\\r\\n                <ul class=\"dropdown-menu\" role=\"menu\">\\r\\n                    <li ng-repeat=\"role in getSessionRoles()\" ng-click=\"$event.stopPropagation();\"><switch ng-model=\"role.active\" ng-click=\"toggleRole(role.id);\"> {{role.label}}</switch></li>\\r\\n                    <li ng-if=\"navbar.role.length && getSessionRoles().length\" class=\"divider\" role=\"presentation\"></li>\\r\\n                    <li ng-repeat=\"ext in navbar.role\" ng-include=\"ext.url\"/>\\r\\n                </ul>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </div>\\r\\n</nav>');\n$templateCache.put('app/src/notifications/notificationCenter.html','<div class=\"container-fluid\">\\r\\n    <div id=\"notificationCenter\" ng-controller=\"NotificationCenterController\">\\r\\n        \\r\\n        <div id=\"infos\" ng-show=\"localStorage.notify_showInfos\">\\r\\n            <div class=\"alert alert-info alert-dismissible\" role=\"alert\" ng-repeat=\"info in notifications.infos\">\\r\\n                <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" ng-click=\"closeAlert(notifications.infos, $index);\"><span aria-hidden=\"true\">&times;</span></button>\\r\\n                <span class=\"glyphicon glyphicon-info-sign\"></span><span> {{info.message}}</span>\\r\\n            </div>\\r\\n        </div>\\r\\n        \\r\\n        <div id=\"warnings\" ng-show=\"localStorage.notify_showWarnings\">\\r\\n            <div class=\"alert alert-warning alert-dismissible\" role=\"alert\" ng-repeat=\"warning in notifications.warnings\">\\r\\n                <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" ng-click=\"closeAlert(notifications.warnings, $index);\"><span aria-hidden=\"true\">&times;</span></button>\\r\\n                <span class=\"glyphicon glyphicon-warning-sign\"></span><span> {{warning.message}}</span>\\r\\n                <span class=\"badge pull-right\" ng-show=\"warning.count > 1\">{{warning.count}}</span>\\r\\n            </div>\\r\\n        </div>\\r\\n        \\r\\n        <div id=\"errors\" ng-show=\"localStorage.notify_showErrors\">\\r\\n            <div class=\"panel panel-danger\" id=\"error-panel-{{key}}\" ng-repeat=\"(key, error) in notifications.errors\">\\r\\n                <div class=\"panel-heading btn btn-block\" data-toggle=\"collapse\" data-target=\"#error-body-{{key}}\">\\r\\n                    <div class=\"text-left\">\\r\\n                        <span class=\"glyphicon glyphicon-exclamation-sign\"></span> <span ng-bind-html=\"error.message | unsafe\"></span>\\r\\n                        <button type=\"button\" class=\"close\" data-target=\"#error-panel-{{key}}\" data-dismiss=\"alert\" aria-label=\"Dismiss\" ng-click=\"closeAlert(notifications.errors, $index);\">\\r\\n                            <span aria-hidden=\"true\">&times;</span>\\r\\n                        </button>\\r\\n                        <span class=\"badge pull-right\" ng-show=\"error.count > 1\">{{error.count}}</span>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\"panel-body collapse\" id=\"error-body-{{key}}\">\\r\\n                    <div ng-if=\"error.details\" ng-bind-html=\"error.details | unsafe\"></div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        \\r\\n        <div id=\"invariants\" ng-show=\"localStorage.notify_showInvariants\">\\r\\n            <div class=\"panel panel-danger\" ng-repeat=\"(key, val) in notifications.invariants\">\\r\\n                <div class=\"panel-heading btn btn-block\" data-toggle=\"collapse\" data-target=\"#invariant-{{key}}\">\\r\\n                    <div class=\"text-left\" style=\"display:flex; align-items:center;\">\\r\\n                        <span class=\"glyphicon glyphicon-warning-sign\"></span>\\r\\n                        <div marked=\"val.ruleMessage\" style=\"display:inline-block; margin: 0px 10px;\"></div> <!-- uses angular-marked directive -->\\r\\n                        <span class=\"badge\" style=\"margin-left:auto;\">{{val.tuples.length}}</span>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <ul class=\"list-group collapse\" id=\"invariant-{{key}}\">\\r\\n                    <li class=\"list-group-item\" ng-repeat=\"tuple in val.tuples track by $index\">\\r\\n                        <span>{{tuple.violationMessage}}</span>\\r\\n                    </li>\\r\\n                </ul>\\r\\n            </div>\\r\\n        </div>\\r\\n                    \\r\\n        <div id=\"signals\" ng-show=\"localStorage.notify_showSignals\">\\r\\n            <div class=\"panel panel-warning\" ng-repeat=\"(key, val) in notifications.signals\">\\r\\n                <div class=\"panel-heading btn btn-block\" data-toggle=\"collapse\" data-target=\"#violation-{{key}}\">\\r\\n                    <div class=\"text-left\" style=\"display:flex; align-items:center;\">\\r\\n                        <span class=\"glyphicon glyphicon-warning-sign\"></span>\\r\\n                        <div marked=\"val.message\" style=\"display:inline-block; margin: 0px 10px;\"></div> <!-- uses angular-marked directive -->\\r\\n                        <span class=\"badge\" style=\"margin-left:auto;\">{{val.violations.length}}</span>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <ul class=\"list-group collapse\" id=\"violation-{{key}}\">\\r\\n                    <li class=\"dropdown list-group-item\" ng-repeat=\"violation in val.violations track by $index\">\\r\\n                        <div ng-if=\"violation.ifcs.length > 1\">\\r\\n                            <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">{{violation.message}}</a>\\r\\n                            <ul class=\"dropdown-menu\" role=\"menu\">\\r\\n                                <li ng-repeat=\"ifc in violation.ifcs\">\\r\\n                                    <a ng-href=\"{{ifc.link}}\" data-toggle=\"collapse\" data-target=\"#violation-{{key}}\"><small>View</small> {{ifc.label}}</a>\\r\\n                                </li>\\r\\n                            </ul>\\r\\n                        </div>\\r\\n                        <a ng-if=\"violation.ifcs.length == 1\" ng-href=\"{{violation.ifcs[0].link}}\" data-toggle=\"collapse\" data-target=\"#violation-{{key}}\">{{violation.message}}</a>\\r\\n                        <span ng-if=\"violation.ifcs.length == 0\">{{violation.message}}</span>\\r\\n                    </li>\\r\\n                </ul>\\r\\n            </div>\\r\\n        </div>\\r\\n        \\r\\n        <!-- Success notifications must be last in notifications center because of position:absolute -->\\r\\n        <div id=\"successes\" ng-show=\"localStorage.notify_showSuccesses\">\\r\\n            <div class=\"alert alert-success alert-dismissible\" role=\"alert\" ng-repeat=\"success in notifications.successes\">\\r\\n                <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" ng-click=\"closeAlert(notifications.successes, $index);\"><span aria-hidden=\"true\">&times;</span></button>\\r\\n                <span class=\"glyphicon glyphicon-ok-sign\"></span><span> {{success.message}}</span>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>');\n$templateCache.put('app/src/oauthlogin/login.html','<div class=\"container-fluid interface\">\\r\\n    <div class=\"row container\">\\r\\n        <h4>Please login using...</h4>\\r\\n    </div>\\r\\n    <div class=\"row\">\\r\\n        <div class=\"col-xs-2\" ng-repeat=\"idp in idps\">\\r\\n            <div>\\r\\n                <a ng-href=\"{{idp.loginUrl}}\">\\r\\n                    <img ng-src=\"{{idp.logo}}\" class=\"img-responsive\" style=\"max-width : 75%;\" alt=\"{{idp.name}}\">\\r\\n                </a>\\r\\n            </div>\\r\\n            <div>\\r\\n                <h5>\\r\\n                    <a ng-href=\"{{idp.loginUrl}}\">{{idp.name}}</a>\\r\\n                </h5>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>');\n$templateCache.put('app/src/oauthlogin/menuItem.html','<a href=\"#/ext/Login\" style=\"white-space:normal;\" ng-show=\"!loggedIn()\">Login\\r\\n    <span class=\"glyphicon glyphicon-log-in pull-right\"></span>\\r\\n</a>\\r\\n<a href=\"\" ng-controller=\"LoginExtLogoutController\" ng-click=\"logout()\" style=\"white-space:normal;\" ng-show=\"loggedIn()\">Logout\\r\\n    <span class=\"glyphicon glyphicon-log-out pull-right\"></span>\\r\\n</a>');\n$templateCache.put('app/src/shared/404.html','<!-- 404 page -->\\r\\n<div class=\"container-fluid\" id=\"Interface\">\\r\\n    <div class=\"row\">\\r\\n        <div class=\"col-md-4\">\\r\\n            <h1>404 Page not found</h1>\\r\\n            <p>The requested page does not exist.</p>\\r\\n            <p><a class=\"btn btn-primary btn-lg\" href=\"#/\" role=\"button\">Goto startpage</a></p>\\r\\n        </div>\\r\\n        <div>\\r\\n            <img src=\"app/images/404-image.png\">\\r\\n        </div>\\r\\n    </div>\\r\\n</div>');\n$templateCache.put('app/src/shared/header.html','<!-- by default no header -->');\n$templateCache.put('app/src/shared/welcome.html','<!-- Home screen -->\\r\\n<div class=\"container-fluid\" id=\"Interface\">\\r\\n    <div class=\"jumbotron\">\\r\\n        <h1>Hello, world!</h1>\\r\\n        <p>You\\'ve successfully generated your Ampersand prototype.</p>\\r\\n        <p><a class=\"btn btn-primary btn-lg\" href=\"https://ampersandtarski.gitbook.io/documentation\" target=\"_blank\" role=\"button\">See our documentation &raquo;</a></p>\\r\\n    </div>\\r\\n</div>\\r\\n');\n$templateCache.put('app/src/shared/myNavTo/myNavToInterfaces.html','<div ng-if=\"resource._ifcs_.length > 1\" style=\"position:relative; display:inline-block; cursor: pointer;\">\\r\\n    <a class=\"dropdown-toggle\" data-toggle=\"dropdown\"><ng-transclude></ng-transclude></a>\\r\\n    <ul class=\"dropdown-menu\" role=\"menu\">\\r\\n        <li ng-repeat=\"ifc in resource._ifcs_\">\\r\\n            <a ng-href=\"#/{{ifc.id}}/{{resource._id_}}\" target=\"{{target}}\">{{ifc.label}}</a>\\r\\n        </li>\\r\\n    </ul>\\r\\n</div>\\r\\n<a ng-if=\"resource._ifcs_.length == 1\" ng-href=\"#/{{resource._ifcs_[0].id}}/{{resource._id_}}\" target=\"{{target}}\"><ng-transclude></ng-transclude></a>\\r\\n<span ng-if=\"resource._ifcs_.length == 0 || resource._ifcs_ == undefined\"><ng-transclude></ng-transclude></span>');\n$templateCache.put('app/src/shared/myNavTo/myNavToOtherInterfaces.html','<!-- This menu includes the interface where the user currently is -->\\r\\n<div ng-if=\"resource._ifcs_.length\" style=\"position:relative; display: inline-block;\">\\r\\n    <button type=\"button\" class=\"btn btn-xs dropdown-toggle\" data-toggle=\"dropdown\">\\r\\n        <span class=\"glyphicon glyphicon-menu-hamburger\"></span>\\r\\n    </button>\\r\\n    <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\\r\\n        <li ng-repeat=\"ifc in resource._ifcs_\">\\r\\n            <a ng-href=\"#/{{ifc.id}}/{{resource._id_}}\" target=\"{{target}}\">{{ifc.label}}</a>\\r\\n        </li>\\r\\n    </ul>\\r\\n</div>');}]);","// when using minified angular modules, use module('myApp', []).controller('MyController', ['myService', function (myService) { ...\r\nangular.module('AmpersandApp', ['ngResource', 'ngRoute', 'ngSanitize', 'restangular', 'ui.bootstrap', 'uiSwitch', 'cgBusy', 'siTable', 'ngStorage', 'angularFileUpload', 'ui.bootstrap.datetimepicker', 'hc.marked'])\r\n.config(function($routeProvider, $locationProvider) {\r\n    $routeProvider\r\n        // default start page\r\n        .when('/', {\r\n            resolveRedirectTo : ['NavigationBarService', function (NavigationBarService) {\r\n                return NavigationBarService.getRouteForHomePage();\r\n            }]\r\n        })\r\n        .when('/prototype/welcome', { \r\n            controller : '',\r\n            templateUrl : 'app/src/shared/welcome.html',\r\n            interfaceLabel : 'Welcome'\r\n            })\r\n        // installer page\r\n        .when('/admin/installer', {\r\n            controller : 'InstallerController',\r\n            templateUrl : 'app/src/admin/installer.html',\r\n            interfaceLabel : 'Installer'\r\n            })\r\n        .when('/redirect-after-login', {\r\n            resolveRedirectTo : ['LoginService', function (LoginService) {\r\n                return LoginService.getPageBeforeLogin();\r\n            }]\r\n        }).when('/404', {\r\n            templateUrl: 'app/src/shared/404.html',\r\n            interfaceLabel: '404'\r\n            })\r\n        .otherwise({redirectTo: '/404'});\r\n    \r\n    $locationProvider.hashPrefix(''); // see: https://stackoverflow.com/questions/41211875/angularjs-1-6-0-latest-now-routes-not-working\r\n}).config(function(RestangularProvider) {\r\n    \r\n    RestangularProvider.setBaseUrl('api/v1'); // Generate: path to API folder\r\n    RestangularProvider.setDefaultHeaders({\"Content-Type\": \"application/json\"});\r\n    RestangularProvider.setPlainByDefault(true);\r\n    \r\n}).run(function(Restangular, $rootScope, $location, $route, NotificationService, RoleService, NavigationBarService, LoginService){\r\n\r\n    Restangular.addFullRequestInterceptor(function(element, operation, what, url, headers, params){\r\n        //params.navIfc = true;\r\n        //params.metaData = true;\r\n        return params;\r\n    });\r\n    \r\n    Restangular.addResponseInterceptor(function(data, operation, what, url, response, deferred){\r\n        if(operation != 'get' && operation != 'getList' && data.sessionRefreshAdvice) NavigationBarService.refreshNavBar();\r\n\t\tif((data || {}).navTo != null) $location.url(data.navTo);\r\n        \r\n        return data;\r\n    });\r\n    \r\n    Restangular.setErrorInterceptor(function(response, deferred, responseHandler) {\r\n        var message;\r\n        var details;\r\n        if(typeof response.data === 'object' && response.data !== null){\r\n            if(response.data.error == 404) { // 404: Not found\r\n                NotificationService.addInfo(response.data.msg || 'Resource not found');\r\n            \r\n            } else if(response.status == 401){ // 401: Unauthorized\r\n                if(response.data.data.loginPage) {\r\n                    LoginService.setLoginPage(response.data.data.loginPage);\r\n                }\r\n                LoginService.setSessionIsLoggedIn(false);\r\n                NavigationBarService.refreshNavBar();\r\n                LoginService.gotoLoginPage();\r\n                NotificationService.addInfo(response.data.msg || 'Login required to access this page');\r\n            \r\n            } else {\r\n                message = response.data.msg || response.statusText; // if empty response message, take statusText\r\n                NotificationService.addError(message, response.status, true, response.data.html);\r\n            }\r\n            \r\n            if(response.data.notifications !== undefined) NotificationService.updateNotifications(response.data.notifications);\r\n            if (response.data.navTo != null) {\r\n                $location.url(response.data.navTo);\r\n            }\r\n        // network error\r\n        } else if (response.status === -1) {\r\n            NotificationService.addError('Connection error. Please check your internet connection and try again', null, false);\r\n        }else{\r\n            message = response.status + ' ' + response.statusText;\r\n            details = response.data; // html content is excepted\r\n            NotificationService.addError(message, response.status, true, details);\r\n        }\r\n        \r\n        return true; // proceed with success or error hooks of promise\r\n    });\r\n    \r\n    $rootScope.getCurrentDateTime = function (){\r\n        return new Date();\r\n    };\r\n    \r\n    // Add feature to $location.url() function to be able to prevent reloading page (set reload param to false)\r\n    var original = $location.url;\r\n    $location.url = function (url, reload) {\r\n        if (reload === false) {\r\n            var lastRoute = $route.current;\r\n            var un = $rootScope.$on('$locationChangeSuccess', function () {\r\n                $route.current = lastRoute;\r\n                un();\r\n            });\r\n        }\r\n        return original.apply($location, [url]);\r\n    };\r\n}).value('cgBusyDefaults',{\r\n    message:'Loading...',\r\n    backdrop: true,\r\n    //templateUrl: 'my_custom_template.html',\r\n    //delay: 500, // in ms\r\n    minDuration: 500, // in ms\r\n    // wrapperClass: 'my-class my-class2'\r\n});\r\n","// Controller for extension app in navigation bar\r\nangular.module('AmpersandApp')\r\n.controller('ExecEngineController', function ($scope, Restangular, NotificationService) {\r\n    $scope.run = function (){\r\n        Restangular.one('admin/execengine/run').get()\r\n        .then(\r\n            function(data){ // on success\r\n                NotificationService.updateNotifications(data);\r\n            }\r\n        );\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('InstallerController', function ($scope, Restangular, NotificationService, RoleService, NavigationBarService) {\r\n    $scope.installing = false;\r\n    $scope.installed = false;\r\n    \r\n    $scope.install = function(defPop, ignoreInvariantRules){\r\n        $scope.installing = true;\r\n        $scope.installed = false;\r\n        NotificationService.clearNotifications();\r\n        \r\n        Restangular\r\n        .one('admin/installer')\r\n        .get({defaultPop : defPop, ignoreInvariantRules : ignoreInvariantRules})\r\n        .then(function(data) {\r\n            NotificationService.updateNotifications(data);\r\n            NavigationBarService.refreshNavBar();\r\n            \r\n            // deactive all roles\r\n            RoleService.deactivateAllRoles();\r\n            \r\n            $scope.installing = false;\r\n            $scope.installed = true;\r\n        }, function(){\r\n            $scope.installing = false;\r\n            $scope.installed = false;\r\n        });\r\n    };\r\n});\r\n","angular.module('uiSwitch', [])\r\n\r\n.directive('switch', function(){\r\n  return {\r\n    restrict: 'AE',\r\n    replace: true,\r\n    transclude: true,\r\n    template: function(element, attrs) {\r\n      var html = '';\r\n      html += '<a href=\"\"';\r\n      html +=   (attrs.ngModel && !attrs.ngClick) ? ' ng-click=\"' + attrs.ngModel + '=!' + attrs.ngModel + '\"' : '';\r\n      html += '>';\r\n      html += '<span';\r\n      html +=   ' class=\"switch' + (attrs.class ? ' ' + attrs.class : '') + '\"';\r\n      html +=   ' ng-class=\"{ checked:' + attrs.ngModel + ' }\"';\r\n      html +=   '>';\r\n      html +=   '<small></small>';\r\n      html += '</span>';\r\n      html += '<span ng-transclude></span>';\r\n      html += '</a>';\r\n      return html;\r\n    }\r\n  }\r\n});","angular.module('AmpersandApp')\r\n.config(function($routeProvider) {\r\n    $routeProvider\r\n        .when('/ext/importer', {\r\n            controller : 'PopulationImportController',\r\n            templateUrl : 'app/src/importer/importer.html',\r\n            interfaceLabel : 'Population importer'\r\n        });\r\n}).service('ImportService', function(FileUploader, NotificationService, NavigationBarService){\r\n    let uploader = new FileUploader({\r\n        url: 'api/v1/admin/import'\r\n    });\r\n\r\n    uploader.onSuccessItem = function(fileItem, response, status, headers) {\r\n        NotificationService.updateNotifications(response.notifications);\r\n        if(response.sessionRefreshAdvice) NavigationBarService.refreshNavBar();\r\n    };\r\n    \r\n    uploader.onErrorItem = function(item, response, status, headers){\r\n        let message;\r\n        let details;\r\n        if(typeof response === 'object'){\r\n            if (response.notifications !== undefined) {\r\n                NotificationService.updateNotifications(response.notifications);\r\n            }\r\n            message = response.msg || 'Error while importing';\r\n            NotificationService.addError(message, status, true, response.html);\r\n        }else{\r\n            message = status + ' Error while importing';\r\n            details = response; // html content is excepted\r\n            NotificationService.addError(message, status, true, details);\r\n        }\r\n    };\r\n    \r\n    return {uploader : uploader};\r\n}).controller('PopulationImportController', function ($scope, ImportService) {\r\n    $scope.uploader = ImportService.uploader;\r\n}).requires.push('angularFileUpload'); // add angularFileUpload to dependency list\r\n","angular.module('AmpersandApp')\r\n.controller('AtomicController', function($scope, ResourceService){\r\n    \r\n    /*\r\n     * Object to temporary store value/resourceId to add to list\r\n     * Value/resourceId is stored as property of 'selected' obj. This is needed to pass it around by reference\r\n     */\r\n    $scope.selected = {};\r\n    \r\n    $scope.saveItem = ResourceService.saveItem; // function(resource, ifc, patchResource)\r\n    \r\n    $scope.addItem = ResourceService.addItem; // function(resource, ifc, selected, patchResource)\r\n    \r\n    $scope.removeItem = ResourceService.removeItem; // function(resource, ifc, index, patchResource)\r\n    \r\n    $scope.remove = ResourceService.removeResource; // function(parent, ifc, resource, patchResource)\r\n    \r\n    $scope.delete = ResourceService.deleteResource; // function(parent, ifc, resource)\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('AtomicDateController', function ($scope, ResourceService) {\r\n    \r\n    $scope.isOpen = false;\r\n    \r\n    // Function is here because ng-model needs to be a Date object.\r\n    // watch listener is initialized by the template\r\n    $scope.watchDateObject = function(resource, ifc){\r\n        $scope.$watch('resource', function(){\r\n            if (!(resource[ifc] instanceof Date)){\r\n                // Only convert to Date object when not NULL, otherwise the 1970-01-01 is created\r\n                if (resource[ifc] !== null) resource[ifc] = new Date(resource[ifc]);\r\n            }\r\n        }, true);\r\n    };\r\n\r\n    $scope.openDatepicker = function($event){\r\n        $event.preventDefault();\r\n        $event.stopPropagation();\r\n        $scope.isOpen = true;\r\n    };\r\n    \r\n    // Adds leading 0 if necesarry. Returns 2 digits.\r\n    function pad(number) {\r\n        var r = String(number);\r\n        if ( r.length === 1 ) {\r\n            r = '0' + r;\r\n        }\r\n        return r;\r\n    }\r\n    \r\n    function modifyToJSON(obj){\r\n        if(obj !== null){\r\n            obj.toJSON = function(){\r\n                return this.getUTCFullYear() + \r\n                    '-' + pad(this.getMonth() + 1) + // The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).\r\n                    '-' + pad(this.getDate());\r\n            };\r\n        }\r\n    }\r\n    \r\n    $scope.selected = { value : ''}; // an empty object for temporary storing the input values\r\n    \r\n    $scope.saveDateItem = function(obj, property, patchResource){\r\n        modifyToJSON(obj[property]);\r\n        ResourceService.saveItem(obj, property, patchResource);\r\n    };\r\n    \r\n    $scope.addDateItem = function(obj, property, selected, patchResource){\r\n        if(selected.value !== ''){\r\n            modifyToJSON(selected.value);\r\n            ResourceService.addItem(obj, property, selected, patchResource);\r\n        }else{\r\n            console.log('Empty date selected');\r\n        }\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('AtomicPasswordController', function($scope, ResourceService){\r\n    // Silently add patch. Change is not autosaved, because browser autofill can otherwise infinite loops \r\n    $scope.patchPasswordField = function(resource, ifc, patchResource) {\r\n        let value;\r\n        if(typeof resource[ifc] === 'undefined' || resource[ifc] === '') {\r\n            value = null;\r\n        } else {\r\n            value = resource[ifc];\r\n        }\r\n        ResourceService.addPatch('replace', resource, patchResource, ifc, value);\r\n    }\r\n});","angular.module('AmpersandApp')\r\n.controller('AtomicTypeAheadController', function($scope, Restangular, ResourceService){\r\n    \r\n    /*\r\n     * Object to temporary store value/resourceId to add to list\r\n     * Value/resourceId is stored as property of 'selected' obj. This is needed to pass it around by reference\r\n     */\r\n    $scope.selected = {};\r\n    \r\n    $scope.hasNoResults = false;\r\n    \r\n    /*\r\n     * Typeahead object is declared in interface.controller.js\r\n     * Thereby typeahead is called only once for every resourceType per interface\r\n     */\r\n    // $scope.typeahead = {};\r\n    \r\n    /*\r\n     * Typeahead functionality\r\n     * $scope.typeahead is initiated in InterfaceController to be able to reuse typeahead data\r\n     */\r\n    $scope.getTypeahead = function(resourceType, forceGetCall){\r\n        forceGetCall = typeof forceGetCall !== 'undefined' ? forceGetCall : false;\r\n\r\n        // Only if not yet set\r\n        if(typeof $scope.typeahead[resourceType] === 'undefined' || forceGetCall){\r\n            $scope.typeahead[resourceType] = Restangular.all('resource/' + resourceType).getList().$object;\r\n        }\r\n    };\r\n    \r\n    $scope.typeaheadOnSelect = function ($item, $model, $label, resource, ifc, patchResource){\r\n        if(typeof $item._id_ === 'undefined') console.log('Resource id undefined');\r\n        else if($item._id_ === '') console.log('Empty resource id provided');\r\n        else{\r\n            if(Array.isArray(resource[ifc])){\r\n                // Construct patch(es)\r\n                ResourceService.addPatch('add', resource, patchResource, ifc, $item._id_);\r\n                ResourceService.patchResource(patchResource)\r\n                .then(function(data){\r\n                    // Adapt in js model\r\n                    if(!data.saved) resource[ifc].push(angular.copy($item));\r\n                });\r\n                \r\n            }else if(resource[ifc] === null){\r\n                // Construct patch(es)\r\n                ResourceService.addPatch('replace', resource, patchResource, ifc, $item._id_);\r\n                ResourceService.patchResource(patchResource)\r\n                .then(function(data){\r\n                    // Adapt js model\r\n                    if(!data.saved) resource[ifc] = angular.copy($item);\r\n                });\r\n            }\r\n            else console.log('Error: Property already set and/or not defined');\r\n            \r\n            $scope.hasNoResults = false;\r\n        }\r\n        // Empty selected input\r\n        $scope.selected.value = '';\r\n    };\r\n    \r\n    $scope.typeAheadCreate = function (resource, ifc, selected, patchResource, resourceType){\r\n        if(Array.isArray(resource[ifc])) { \r\n            ResourceService.addItem(resource, ifc, selected, patchResource).then(\r\n                function(){\r\n                    $scope.getTypeahead(resourceType, true);\r\n                }\r\n            );\r\n        } else if(resource[ifc] === null) {\r\n            resource[ifc] = selected.value;\r\n            ResourceService.saveItem(resource, ifc, patchResource);\r\n        } else {\r\n            console.log('Error: Property already set and/or not defined');\r\n        }\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('AtomicUploadFileController', function($scope, FileUploader, NotificationService){\r\n    \r\n    // File uploader stuff\r\n    $scope.FileUploader = new FileUploader({\r\n        alias : 'file', // fieldname as used in $_FILES['file']\r\n        formData : [],\r\n        removeAfterUpload : true,\r\n        autoUpload : true\r\n    });\r\n    \r\n    $scope.FileUploader.onSuccessItem = function(fileItem, response, status, headers){\r\n        NotificationService.updateNotifications(response.notifications);\r\n        \r\n        let newResource = response.content;\r\n        \r\n        // Add new resource to ifc\r\n        if(Array.isArray(fileItem.resource[fileItem.ifc])){ // non-uni = list\r\n            fileItem.resource[fileItem.ifc].splice(-1, 0, newResource);\r\n        }else{ // uni = object\r\n            fileItem.resource[fileItem.ifc] = newResource;\r\n        }\r\n    };\r\n    \r\n    $scope.FileUploader.onErrorItem = function(item, response, status, headers){\r\n        NotificationService.addError(response.msg, response.error, true, response.html);\r\n        NotificationService.updateNotifications(response.notifications);\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('BoxController', function($scope, ResourceService){\r\n    \r\n    // Function to create a new resource (does a POST)\r\n    $scope.createResource = ResourceService.createResource; // function(resource, ifc, callingObj, insertAtIndex)\r\n    \r\n    // Function to save certain attributes changes of a resource (does a PATCH)\r\n    $scope.save = function(resource){\r\n        ResourceService.patchResource(resource, true);\r\n    };\r\n    \r\n    // Function to cancel unsaved edits (does a GET)\r\n    $scope.cancel = ResourceService.cancelResource; // function(resource)\r\n    \r\n    // Function to remove a resource from an interface (list)\r\n    $scope.remove = ResourceService.removeResource; // function(ifc, resource, patchResource)\r\n    \r\n    // Function to delete a resource\r\n    $scope.delete = ResourceService.deleteResource; // function(ifc, resource)\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('InterfaceController', function($scope, $location, ResourceService){\r\n    /*\r\n     * An empty object for typeahead functionality.\r\n     * Defined here so it can be reused in an interface\r\n     * Prevents multiple calls for the same resourceType\r\n     */\r\n    $scope.typeahead = {};\r\n    \r\n    // Detects location changes and checks if there are unsaved changes\r\n    $scope.$on(\"$locationChangeStart\", function(event, next, current){\r\n        if(ResourceService.checkRequired()){\r\n            let confirmed = confirm(\"You have unsaved edits. Do you wish to leave?\");\r\n            if (event && !confirmed) event.preventDefault();\r\n            else if(event && confirmed) ResourceService.emptyUpdatedResources();\r\n            else console.log('Someting went wrong. Cannot determine action after locationChangeStart');\r\n        }\r\n    });\r\n    \r\n    // Function (reference) to check if there are pending promises for a resource\r\n    $scope.pendingPromises = ResourceService.pendingPromises;\r\n\r\n    /*\r\n     * Transforms the given variable into an array.\r\n     * To be used in ng-repeat directive for Ampersand UNI and non-UNI expressions\r\n     * If variable is already an array, the array is returned\r\n     * If variable is null, an empty array is returned\r\n     * Otherwise the variable is the first and single item in the array\r\n    */\r\n    $scope.requireArray = function (variable) {\r\n        if (Array.isArray(variable)) {\r\n            return variable;\r\n        } else if (variable === null) {\r\n            return [];\r\n        } else {\r\n            return [variable];\r\n        }\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.directive('myBluronenter', function() {\r\n    return function(scope, element, attrs) {\r\n        element.bind(\"keydown keypress\", function(event) {\r\n            if(event.which === 13) { // 13 = Carriage return\r\n                event.target.blur();\r\n\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.directive('myShowonhoverBox', function (){\r\n    return {\r\n        link : function(scope, element, attrs) {\r\n            if(!element.closest('.box').hasClass('my-showonhover-box-show')) element.hide(); // default hide\r\n            \r\n            element.closest('.box').bind('mouseenter', function() {\r\n                element.closest('.box').addClass('my-showonhover-box-show');\r\n                element.show();\r\n            });\r\n            element.closest('.box').bind('mouseleave', function() {\r\n                element.closest('.box').removeClass('my-showonhover-box-show');\r\n                element.hide();\r\n            });\r\n        }\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.service('ResourceService', function($localStorage, $timeout, $location, Restangular, NotificationService, $q){\r\n    // http://blog.thoughtram.io/angular/2015/07/07/service-vs-factory-once-and-for-all.html\r\n    \r\n    let updatedResources = []; // contains list with updated resource objects in this interface. Used to check if there are uncommmitted changes (patches in cache)\r\n    \r\n    let ResourceService = {\r\n        /**\r\n         * Get resource data given a certain interface (ifc)\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} callingObj will be used for loading indicator\r\n         * @param {string} tgtId get a specific target resource\r\n         * @returns {Promise}\r\n         */\r\n        getResource : function(resource, ifc, callingObj, tgtId) {\r\n            // Url to GET resource\r\n            let url = resource._path_ + '/' + ifc;\r\n\r\n            // Append tgtId if specified\r\n            if (tgtId !== undefined) {\r\n                url += '/' + tgtId;\r\n            }\r\n\r\n            let promise = Restangular\r\n            .one(url)\r\n            .get()\r\n            .then(function(data){\r\n                // No results\r\n                if ($.isEmptyObject(data)) {\r\n                    NotificationService.addInfo('No results found');\r\n                // No specific target was requested\r\n                } else if (tgtId === undefined) {\r\n                    if (resource[ifc] === null || Array.isArray(resource[ifc])) {\r\n                        resource[ifc] = data;\r\n                    } else {\r\n                        angular.extend(resource[ifc], data);\r\n                    }\r\n                // Specific target was requested\r\n                } else {\r\n                    if (Array.isArray(resource[ifc])) {\r\n                        resource[ifc].push(data);\r\n                    } else {\r\n                        resource[ifc] = data;\r\n                    }\r\n                }\r\n                \r\n                ResourceService.initResourceMetaData(resource);\r\n\r\n                return resource;\r\n            });\r\n            \r\n            // Add promise to loading list\r\n            return ResourceService.addPromiseToResourceLoadingList(callingObj, promise);\r\n        },\r\n\r\n        /**\r\n         * Patch the given resource by calling the API and sending the list of stored patches \r\n         * \r\n         * @param {Object} resource\r\n         * @param {bool} forceSave\r\n         * @returns {Promise}\r\n         */\r\n        patchResource : function(resource, forceSave){\r\n            // Use delegate resource if specified\r\n            if (typeof resource._delegatePatchesTo_ !== 'undefined') {\r\n                resource = resource._delegatePatchesTo_;\r\n            }\r\n\r\n            // Save if autoSave is enabled\r\n            if($localStorage.autoSave || forceSave) {\r\n                let promise = Restangular\r\n                .one(resource._path_)\r\n                .patch(resource._patchesCache_, {})\r\n                .then(function(data) {\r\n                    // Update visual feedback (notifications and buttons)\r\n                    ResourceService.processResponse(resource, data);\r\n\r\n                    // Update resource data\r\n                    if(resource._isRoot_ && data.navTo == null) {\r\n                        resource.get(); // if directed to other page (data.navTo), refresh of data is not needed\r\n                    } else {\r\n                        resource = angular.extend(resource, data.content);\r\n                    }\r\n\r\n                    return {resource : resource, saved: true, committed: data.isCommitted};\r\n                });\r\n\r\n                // Add promise to loading list\r\n                return ResourceService.addPromiseToResourceLoadingList(resource, promise);\r\n            } else {\r\n                // Update visual feedback\r\n                ResourceService.setResourceStatus(resource, 'warning');\r\n                resource._showButtons_ = {'save' : true, 'cancel' : true};\r\n                return $q.resolve({resource : resource, saved : false, committed: false});\r\n            }\r\n        },\r\n        \r\n        /**\r\n         * Cancel unsaved edits and get resource data\r\n         * \r\n         * @param {Object} resource\r\n         * @returns {Promise}\r\n         */\r\n        cancelResource : function(resource){\r\n            let promise = Restangular\r\n            .one(resource._path_)\r\n            .get()\r\n            .then(function(data){\r\n                if($.isEmptyObject(data)) NotificationService.addInfo('No results found');\r\n                else angular.extend(resource, data);\r\n                \r\n                // Update visual feedback (notifications and buttons)\r\n                NotificationService.getNotifications();\r\n                ResourceService.initResourceMetaData(resource);\r\n\r\n                return resource;\r\n            });\r\n            \r\n            // Add promise to loading list\r\n            return ResourceService.addPromiseToResourceLoadingList(resource, promise);\r\n        },\r\n        \r\n        /**\r\n         * Create (POST) a new resource to a certain interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} patchResource\r\n         * @param {int} insertAtIndex\r\n         * @returns {Promise}\r\n         */\r\n        createResource : function(resource, ifc, patchResource, insertAtIndex){\r\n            let promise = Restangular\r\n            .one(resource._path_).all(ifc)\r\n            .post({}, {})\r\n            .then(function(data){\r\n                let newResource = data.content;\r\n\r\n                // Update visual feedback (notifications and buttons)\r\n                ResourceService.processResponse(newResource, data);\r\n\r\n                // If not committed, add this create action to patch list\r\n                if (!data.isCommitted) {\r\n                    ResourceService.addPatch('create', resource, patchResource, ifc, newResource._id_);\r\n                    \r\n                    // Delegate additional patches upward, because this resource does not exist yet\r\n                    // See addPatch() and patchResource() functions\r\n                    newResource._delegatePatchesTo_ = patchResource;\r\n                }\r\n                \r\n                // Add new resource to ifc\r\n                if(Array.isArray(resource[ifc])){ // non-uni = list\r\n                    if(insertAtIndex === 'undefined') insertAtIndex = resource[ifc].length; // append by default\r\n                    resource[ifc].splice(insertAtIndex, 0, newResource);\r\n                }else{ // uni = object\r\n                    resource[ifc] = newResource;\r\n                }\r\n                \r\n                if(resource._isRoot_ && resource._id_ == '_NEW') $location.url('/' + ifc + '/'+ newResource._id_, false);\r\n\r\n                return newResource;\r\n            });\r\n\r\n            // Add promise to loading list\r\n            return ResourceService.addPromiseToResourceLoadingList(patchResource, promise);\r\n        },\r\n        \r\n        /**\r\n         * Remove a resource from a certain interface list\r\n         * \r\n         * @param {Object} parent\r\n         * @param {string} ifc\r\n         * @param {Object} resource\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        removeResource : function(parent, ifc, resource, patchResource){\r\n            // Construct patch(es)\r\n            ResourceService.addPatch('remove', resource, patchResource);\r\n\r\n            // Execute patch\r\n            return ResourceService\r\n            .patchResource(patchResource)\r\n            .then(function(data){\r\n                // Adapt js model\r\n                if(!data.saved) {\r\n                    if(Array.isArray(parent[ifc])) parent[ifc].splice(parent[ifc].indexOf(resource), 1); // non-uni = list\r\n                    else parent[ifc] = null; // uni = object\r\n                }\r\n            });\r\n        },\r\n        \r\n        /**\r\n         * Delete a resource\r\n         * \r\n         * @param {Object} parent\r\n         * @param {string} ifc\r\n         * @param {Object} resource to delete\r\n         * @returns {Promise}\r\n         */\r\n        deleteResource : function(parent, ifc, resource){\r\n            if(confirm('Are you sure?')){\r\n                let promise = Restangular\r\n                .one(resource._path_)\r\n                .remove({})\r\n                .then(function(data){\r\n                    // Update visual feedback (notifications and buttons)\r\n                    NotificationService.updateNotifications(data.notifications);\r\n                    \r\n                    // Remove resource from ifc\r\n                    if(Array.isArray(parent[ifc])) parent[ifc].splice(parent[ifc].indexOf(resource), 1); // non-uni = list\r\n                    else parent[ifc] = null; // uni = object\r\n\r\n                    return parent;\r\n                });\r\n\r\n                // Add promise to loading list\r\n                return ResourceService.addPromiseToResourceLoadingList(resource, promise);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Save/patch a changed attribute\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        saveItem : function(resource, ifc, patchResource){\r\n            let value;\r\n\r\n            // Construct patch(es)\r\n            if(typeof resource[ifc] === 'undefined' || resource[ifc] === '') {\r\n                value = null;\r\n            } else {\r\n                value = resource[ifc];\r\n            }\r\n            ResourceService.addPatch('replace', resource, patchResource, ifc, value);\r\n\r\n            // Register patch\r\n            return ResourceService.patchResource(patchResource);\r\n        },\r\n        \r\n        /**\r\n         * Add an item to an interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} selected item to add to the list\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        addItem : function(resource, ifc, selected, patchResource){\r\n            if(typeof selected.value === 'undefined') {\r\n                //console.log('Value undefined');\r\n                return $q.reject('Value undefined');\r\n            } else if(selected.value === '') {\r\n                //console.log('Empty value selected');\r\n                return $q.reject('Empty value selected');\r\n            } else if(!Array.isArray(resource[ifc])) {\r\n                //console.log('Error: trying to add item to non-array');\r\n                return $q.reject('Error: trying to add item to non-array');\r\n            } else{\r\n                // Adapt in js model\r\n                resource[ifc].push(selected.value);\r\n                \r\n                // Construct patch(es)\r\n                ResourceService.addPatch('add', resource, patchResource, ifc, selected.value);\r\n                return ResourceService.patchResource(patchResource)\r\n                .then(function(data){\r\n                    // Reset selected value\r\n                    delete(selected.value);\r\n                    return data;\r\n                });\r\n            }\r\n        },\r\n        \r\n        /**\r\n         * Remove an item from an interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {int} index\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        removeItem : function(resource, ifc, index, patchResource){\r\n            // Construct patch(es)\r\n            let value = resource[ifc][index];\r\n            ResourceService.addPatch('remove', resource, patchResource, ifc, value);\r\n            \r\n            // Adapt js model\r\n            resource[ifc].splice(index, 1);\r\n\r\n            return ResourceService.patchResource(patchResource);\r\n        },\r\n        \r\n        /**\r\n         * Construct, add and return patch object (with attributes 'op', 'path' and 'value')\r\n         * \r\n         * @param {string} operation choose from 'add', 'remove' or 'replace'\r\n         * @param {Object} resource\r\n         * @param {Object} patchResource resource to add patch to\r\n         * @param {string} ifc\r\n         * @param {string} value\r\n         * @returns {Object}\r\n         */\r\n        addPatch : function(operation, resource, patchResource, ifc, value){\r\n            // When patchResource is not provided use the resource itself\r\n            if (typeof patchResource === 'undefined') {\r\n                patchResource = resource;\r\n            }\r\n\r\n            // Use delegate resource if specified\r\n            if (typeof patchResource._delegatePatchesTo_ !== 'undefined') {\r\n                patchResource = patchResource._delegatePatchesTo_;\r\n            }\r\n\r\n            let pathLength = patchResource._path_.length;\r\n            \r\n            let path = resource._path_.substring(pathLength);\r\n            if (typeof ifc !== 'undefined') {\r\n                path = path + '/' + ifc;\r\n            }\r\n            \r\n            let patch;\r\n            if (typeof value === 'undefined') {\r\n                patch = { op : operation, path : path};\r\n            } else {\r\n                patch = { op : operation, path : path, value : value};\r\n            }\r\n\r\n            // Add new patch to patchResource\r\n            if(!Array.isArray(patchResource._patchesCache_)) patchResource._patchesCache_ = [];\r\n            patchResource._patchesCache_.push(patch);\r\n\r\n            // Add resource to updatedResources\r\n            if(updatedResources.indexOf(patchResource) === -1) updatedResources.push(patchResource);\r\n\r\n            return patch;\r\n        },\r\n\r\n        /**\r\n         * Returns if there are unsaved changes (i.e. patches that are not yet sent to the API)\r\n         * \r\n         * @returns {bool}\r\n         */\r\n        checkRequired : function(){ \r\n            return updatedResources.reduce(function(prev, item, index, arr){\r\n                return prev || item._patchesCache_.length;\r\n            }, false);\r\n        },\r\n        \r\n        /**\r\n         * Clear list of updated resources\r\n         */\r\n        emptyUpdatedResources : function(){\r\n            updatedResources = [];\r\n        },\r\n        \r\n        /**\r\n         * Init/reset resource meta data\r\n         * \r\n         * @param {Object} resource\r\n         */\r\n        initResourceMetaData : function(resource){\r\n            resource._showButtons_ = {'save' : false, 'cancel' : false};\r\n            resource._patchesCache_ = [];\r\n            ResourceService.setResourceStatus(resource, 'default');\r\n        },\r\n        \r\n        /**\r\n         * Process response: i.e. set resource buttons and status\r\n         * \r\n         * @param {Object} resource\r\n         * @param {Object} response from API\r\n         * @returns {Object}\r\n         */\r\n        processResponse : function(resource, response){\r\n            NotificationService.updateNotifications(response.notifications);\r\n            \r\n            if(response.isCommitted){\r\n                resource._showButtons_ = {'save' : false, 'cancel' : false};\r\n                resource._patchesCache_ = []; // empty patches cache\r\n                ResourceService.setResourceStatus(resource, 'success');\r\n                \r\n                // After 3 seconds, reset status to default\r\n                $timeout(function(){\r\n                    ResourceService.setResourceStatus(resource, 'default');\r\n                }, 3000);\r\n            }else{\r\n                resource._showButtons_ = {'save' : false, 'cancel' : true};\r\n                ResourceService.setResourceStatus(resource, 'danger');\r\n            }\r\n\r\n            return resource;\r\n        },\r\n        \r\n        /**\r\n         * Set resource status meta data\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} status choose from 'warning', 'danger', 'success' or 'default'\r\n         * @returns {Object}\r\n         */\r\n        setResourceStatus : function(resource, status){\r\n            // Reset all status properties\r\n            resource._status_ = { 'warning' : false,\r\n                                  'danger'  : false,\r\n                                  'default' : false,\r\n                                  'success' : false\r\n                                };\r\n            // Set status property\r\n            resource._status_[status] = true;\r\n            \r\n            return resource;\r\n        },\r\n        \r\n        /**\r\n         * Returns if resource has pending promises\r\n         * \r\n         * @param {Object} resource\r\n         * @returns {bool}\r\n         */\r\n        pendingPromises : function(resource){\r\n            if(!Array.isArray(resource._loading_)) return false; // empty array contains no pending promises\r\n            \r\n            return resource._loading_.some(function(val){\r\n                return val.$$state.status === 0; // promise status: 0 -> pending, 1 -> resolved, 2 -> rejected\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} resource\r\n         * @param {Promise} promise\r\n         * @returns {Promise}\r\n         */\r\n        addPromiseToResourceLoadingList : function(resource, promise){\r\n            if(!Array.isArray(resource._loading_)) resource._loading_ = [];\r\n            resource._loading_.push(promise);\r\n            resource._isLoading_ = true;\r\n\r\n            return promise.finally(function(){\r\n                if(!ResourceService.pendingPromises(resource)) {\r\n                    resource._isLoading_ = false;\r\n                    resource._loading_ = [];\r\n                }\r\n            });\r\n        }\r\n    };\r\n    \r\n    return ResourceService;\r\n});\r\n","angular.module('AmpersandApp')\r\n.service('LoginService', function($rootScope, $location, $localStorage, $sessionStorage){\r\n    let urlLoginPage = null;\r\n    \r\n    let service = {\r\n        setLoginPage : function (url) {\r\n            urlLoginPage = url;\r\n        },\r\n\r\n        gotoLoginPage : function () {\r\n            if (urlLoginPage) {\r\n                $location.url(urlLoginPage);\r\n            }\r\n        },\r\n\r\n        getPageBeforeLogin : function () {\r\n            return $localStorage.login_urlBeforeLogin;\r\n        },\r\n\r\n        sessionIsLoggedIn : function () {\r\n            return $sessionStorage.session.loggedIn;\r\n        },\r\n\r\n        setSessionIsLoggedIn : function (bool) {\r\n            $sessionStorage.session.loggedIn = bool;\r\n        },\r\n\r\n        getSessionVars : function () {\r\n            return $sessionStorage.sessionVars;\r\n        }\r\n    };\r\n\r\n    $rootScope.$on('$routeChangeSuccess', function (event, current, previous) {\r\n        if (current.$$route.originalPath !== urlLoginPage) {\r\n            $localStorage.login_urlBeforeLogin = $location.path();\r\n        } else {\r\n            console.log('login page');\r\n        }\r\n    });\r\n    \r\n    return service;\r\n});","angular.module('AmpersandApp')\r\n.directive('myNavbarResize', function ($window, $timeout, NavigationBarService) {\r\n    return function (scope, element) {\r\n        var w = angular.element($window);\r\n        \r\n        var resizeNavbar = function() {\r\n            $timeout(function(){\r\n                // moving ifc items from dropdown-menu to navbar itself\r\n                while($('#navbar-interfaces').width() < ($('#navbar-wrapper').width() - $('#navbar-options').width()) &&\r\n                        $('#navbar-interfaces-dropdown-menu').children().length > 0){\r\n                    $(\"#navbar-interfaces-dropdown-menu\")\r\n                    .children().first().appendTo(\"#navbar-interfaces\") // move item back to menu bar\r\n                    .toggleClass('overflow-menu-item', false); // remove flag specifying that this item is in the overflow list\r\n                }\r\n                \r\n                // moving ifc items from navbar to dropdown-menu\r\n                while($('#navbar-interfaces').width() > ($('#navbar-wrapper').width() - $('#navbar-options').width())){\r\n                    $(\"#navbar-interfaces\")\r\n                    .children().last().prependTo(\"#navbar-interfaces-dropdown-menu\") // move item to overflow list\r\n                    .toggleClass('overflow-menu-item', true); // add flag specifying that this item is in the overflow list\r\n                    \r\n                    // show/hide dropdown menu for more interfaces (must be inside loop, because it affects the width of the navbar\r\n                    $('#navbar-interfaces-dropdown').toggleClass('hidden', $('#navbar-interfaces-dropdown-menu').children().length <= 0);\r\n                }\r\n                \r\n                // show/hide dropdown menu when possible\r\n                $('#navbar-interfaces-dropdown').toggleClass('hidden', $('#navbar-interfaces-dropdown-menu').children().length <= 0);\r\n            });\r\n        };\r\n        \r\n        // watch navbar\r\n        NavigationBarService.addObserverCallable(resizeNavbar);\r\n        \r\n        // when window size gets changed\r\n        w.bind('resize', function () {\r\n            resizeNavbar();\r\n        });\r\n        \r\n        // when page loads\r\n        angular.element(document).ready(function(){\r\n            resizeNavbar();\r\n        });\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.directive('myNavItem', function(){\r\n    return {\r\n        restrict : 'A',\r\n        scope: {\r\n            item: '=data' // '=' => two-way bind\r\n        },\r\n        templateUrl: 'app/src/navbar/myNavItem.view.html',\r\n        transclude: false,\r\n        link: function(scope, element, attrs, controller){\r\n            // Functionality to add/remove class 'dropdown-submenu' when item is moved to/from overflow list\r\n            scope.$watch(function() {\r\n                return element.attr('class');\r\n            }, function(){\r\n                if (scope.item.hasChildren() && element.hasClass('overflow-menu-item')) {\r\n                    element.addClass('dropdown-submenu');\r\n                } else if (scope.item.hasChildren() && element.hasClass('top-menu-item')) {\r\n                    element.removeClass('dropdown-submenu');\r\n                }\r\n            });\r\n        },\r\n        controller: function ($scope) {\r\n            \r\n        }\r\n    };\r\n});","angular.module('AmpersandApp')\r\n.controller('NavigationBarController', function ($scope, $route, Restangular, $localStorage, $sessionStorage, $location, NotificationService, RoleService, NavigationBarService, LoginService) {\r\n    $scope.localStorage = $localStorage;\r\n    $scope.loadingNavBar = [];\r\n    $scope.navbar = NavigationBarService.navbar;\r\n    $scope.resetSettingsToDefault = NavigationBarService.resetSettingsToDefault;\r\n    \r\n    $scope.loggedIn = function () {\r\n        return LoginService.sessionIsLoggedIn();\r\n    };\r\n\r\n    $scope.getSessionRoles = function () {\r\n        return $sessionStorage.sessionRoles;\r\n    };\r\n\r\n    $scope.getSessionVars = function () {\r\n        return $sessionStorage.sessionVars;\r\n    };\r\n\r\n    $scope.reload = function(){\r\n        $scope.loadingNavBar = [];\r\n        $scope.loadingNavBar.push(NavigationBarService.refreshNavBar());\r\n        $route.reload();\r\n    };\r\n\r\n    $scope.toggleRole = function(roleId, set){\r\n        RoleService.toggleRole(roleId, set);\r\n        $scope.loadingNavBar = [];\r\n        $scope.loadingNavBar.push(\r\n            RoleService.setActiveRoles()\r\n            .then(function(data){\r\n                NavigationBarService.refreshNavBar();\r\n                $route.reload();\r\n            })\r\n        );\r\n    };\r\n\r\n    $scope.checkAllRules = NotificationService.checkAllRules;\r\n\r\n    $scope.createNewResource = function(resourceType, openWithIfc){\r\n        Restangular.one('resource').all(resourceType)\r\n        .post({}, {})\r\n        .then(\r\n            function(data){\r\n                // Jumps to interface and requests newly created resource\r\n                $location.url(openWithIfc + '/' + data._id_);\r\n            }\r\n        );\r\n    };\r\n    \r\n    $scope.loadingNavBar.push(NavigationBarService.refreshNavBar());\r\n});\r\n","angular.module('AmpersandApp')\r\n.service('NavigationBarService', function(Restangular, $localStorage, $sessionStorage, $timeout, NotificationService, $q){\r\n    let navbar = {\r\n        home: null, // home/start page, can be set in project.yaml (default: '#/prototype/welcome')\r\n        top: [],\r\n        new: [],\r\n        role: [],\r\n        ext: []\r\n    };\r\n    let defaultSettings = {\r\n        notify_showSignals: true,\r\n        notify_showInfos: true,\r\n        notify_showSuccesses: true,\r\n        notify_autoHideSuccesses: true,\r\n        notify_showErrors: true,\r\n        notify_showWarnings: true,\r\n        notify_showInvariants: true,\r\n        autoSave: true\r\n    };\r\n    let observerCallables = [];\r\n\r\n    let notifyObservers = function(){\r\n        angular.forEach(observerCallables, function(callable){\r\n            callable();\r\n        });\r\n    };\r\n\r\n    let pendingNavbarPromise = null;\r\n    function getNavbarPromise() {\r\n        if (pendingNavbarPromise === null) {\r\n            pendingNavbarPromise = Restangular\r\n            .one('app/navbar')\r\n            .get()\r\n            .finally(function() {\r\n                pendingNavbarPromise = null;\r\n            });\r\n        }\r\n\r\n        return pendingNavbarPromise;\r\n    }\r\n\r\n    let service = {\r\n        navbar : navbar,\r\n        defaultSettings : defaultSettings,\r\n\r\n        addObserverCallable : function(callable){\r\n            observerCallables.push(callable);\r\n        },\r\n\r\n        getRouteForHomePage : function() {\r\n            if (navbar.home === null) {\r\n                return getNavbarPromise()\r\n                .then(function (data){\r\n                    return data.home;\r\n                }, function (error) {\r\n                    console.error('Error in getting nav bar data: ', error);\r\n                })\r\n            } else {\r\n                return $q.resolve(navbar.home);\r\n            }\r\n        },\r\n\r\n        refreshNavBar : function(){\r\n            return getNavbarPromise()\r\n            .then(function(data){\r\n                // Content of navbar\r\n                let hasChildren = function () {\r\n                    return this.children.length > 0;\r\n                };\r\n                let navItems = data.navs.map(function (item) {\r\n                    item.hasChildren = hasChildren.bind(item);\r\n                    return item;\r\n                });\r\n                let menus = treeify(navItems, 'id', 'parent', 'children');\r\n                navbar.home = data.home;\r\n                \r\n                let mainMenu = menus.find(function(menu){\r\n                    return menu.id === 'MainMenu'\r\n                });\r\n                navbar.top = mainMenu === undefined ? [] : mainMenu.children;\r\n                navbar.new = data.new;\r\n                navbar.role = data.role;\r\n                navbar.ext = data.ext;\r\n\r\n                // Content for session storage\r\n                $sessionStorage.session = data.session;\r\n                $sessionStorage.sessionRoles = data.sessionRoles;\r\n                $sessionStorage.sessionVars = data.sessionVars;\r\n                \r\n                // Save default settings\r\n                service.defaultSettings = data.defaultSettings;\r\n                service.initializeSettings();\r\n                \r\n                // Update notifications\r\n                NotificationService.updateNotifications(data.notifications);\r\n\r\n                notifyObservers();\r\n            }, function(error){\r\n                service.initializeSettings();\r\n            }).catch(function(error) { \r\n                console.error(error);\r\n            });\r\n        },\r\n\r\n        initializeSettings : function(){\r\n            let resetRequired = false;\r\n\r\n            // Check for undefined settings\r\n            angular.forEach(service.defaultSettings, function(value, index, obj){\r\n                if($localStorage[index] === undefined) {\r\n                    resetRequired = true;\r\n                }\r\n            });\r\n\r\n            if(resetRequired) service.resetSettingsToDefault();\r\n        },\r\n\r\n        resetSettingsToDefault : function(){\r\n            // all off\r\n            angular.forEach(service.defaultSettings, function(value, index, obj){\r\n                $localStorage[index] = false;\r\n            });\r\n            \r\n            $timeout(function() {\r\n                // Reset to default\r\n                $localStorage.$reset(service.defaultSettings);\r\n            }, 500);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Creates a tree from flat list of elements with parent specified.\r\n     * If no parent specified, the element is considered a root node\r\n     * The function returns a list of root nodes\r\n     * 'id', 'parent' and 'children' object labels can be set\r\n     * \r\n     * @param {Array} list \r\n     * @param {string} idAttr \r\n     * @param {string} parentAttr \r\n     * @param {string} childrenAttr \r\n     * @returns {Array}\r\n     */\r\n    function treeify(list, idAttr, parentAttr, childrenAttr) {\r\n        if (!idAttr) idAttr = 'id';\r\n        if (!parentAttr) parentAttr = 'parent';\r\n        if (!childrenAttr) childrenAttr = 'children';\r\n        var treeList = [];\r\n        var lookup = {};\r\n        list.forEach(function(obj) {\r\n            lookup[obj[idAttr]] = obj;\r\n            obj[childrenAttr] = [];\r\n        });\r\n        list.forEach(function(obj) {\r\n            if (obj[parentAttr] != null) {\r\n                if (lookup[obj[parentAttr]] === undefined) { // error when parent element is not defined in list\r\n                    console.error('Parent element is undefined: ', obj[parentAttr]);\r\n                } else {\r\n                    lookup[obj[parentAttr]][childrenAttr].push(obj);\r\n                    obj[parentAttr] = lookup[obj[parentAttr]]; // replace parent id with reference to actual parent element\r\n                }\r\n            } else {\r\n                treeList.push(obj);\r\n            }\r\n        });\r\n        return treeList;\r\n    }\r\n    \r\n    return service;\r\n});\r\n","angular.module('AmpersandApp')\r\n.service('RoleService', function($sessionStorage, Restangular){\r\n    \r\n    /*\r\n     * Available roles are registered in $sessionStorage.sessionRoles\r\n     * A role has the following attributes: id, label, active\r\n     */\r\n    \r\n    return {\r\n        selectRole : function(roleId){\r\n            this.toggleRole(roleId, true);\r\n        },\r\n        \r\n        selectRoleByLabel : function (roleLabel){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if(role.label == roleLabel) return this.selectRole(role.id);\r\n            });\r\n        },\r\n        \r\n        toggleRole : function(roleId, set){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if (role.id == roleId) {\r\n                    if(set === undefined) role.active = !role.active;\r\n                    else role.active = set;\r\n                }\r\n            });\r\n        },\r\n        \r\n        getActiveRoleIds : function(){\r\n            var roleIds = [];\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if (role.active === true) {\r\n                    roleIds.push(role.id);\r\n                }\r\n            });\r\n            return roleIds;\r\n        },\r\n        \r\n        deactivateAllRoles : function(){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                role.active = false;\r\n            });\r\n        },\r\n        \r\n        setActiveRoles : function(){\r\n            return Restangular.all('app/roles').patch($sessionStorage.sessionRoles);\r\n        }\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.service('NotificationService', function($localStorage, $sessionStorage, $timeout, Restangular){\r\n    // Initialize notifications container\r\n    let notifications = {\r\n        'signals' : [],\r\n        'invariants' : [],\r\n        'infos' : [],\r\n        'successes' : [],\r\n        'warnings' : [],\r\n        'errors' : []\r\n    };\r\n    \r\n    let NotificationService = {\r\n        notifications : notifications,\r\n        \r\n        // Function to get notifications again\r\n        getNotifications : function(){\r\n            return Restangular\r\n            .one('app/notifications')\r\n            .get()\r\n            .then(\r\n                function(data){\r\n                    NotificationService.updateNotifications(data);\r\n                },\r\n                function(){\r\n                    NotificationService.addError('Something went wrong while getting notifications');\r\n                }\r\n            );\r\n        },\r\n\r\n        checkAllRules : function(){\r\n            return Restangular\r\n            .one('admin/ruleengine/evaluate/all')\r\n            .get()\r\n            .then(\r\n                function(data){\r\n                    NotificationService.addSuccess('Evaluated all rules.');\r\n                    NotificationService.updateNotifications(data);\r\n                },function(){\r\n                    NotificationService.addError('Something went wrong while evaluating all rules');\r\n                }\r\n            );\r\n        },\r\n        \r\n        // Function to update notifications after api response\r\n        updateNotifications : function(data){\r\n            if(data === undefined) return;\r\n            \r\n            // Overwrite\r\n            notifications.signals = data.signals;\r\n            notifications.invariants = data.invariants;\r\n            \r\n            // Merge\r\n            notifications.infos = notifications.infos.concat(data.infos);\r\n            notifications.successes = notifications.successes.concat(data.successes);\r\n            notifications.warnings = notifications.warnings.concat(data.warnings);\r\n            notifications.errors = notifications.errors.concat(data.errors);\r\n            \r\n            if($localStorage.notify_autoHideSuccesses){\r\n                $timeout(function() {\r\n                    notifications.successes = [];\r\n                }, 3000);\r\n            }\r\n        },\r\n\r\n        clearNotifications : function () {\r\n            notifications.signals = [];\r\n            notifications.invariants = [];\r\n            notifications.infos = [];\r\n            notifications.successes = [];\r\n            notifications.warnings = [];\r\n            notifications.errors = [];\r\n        },\r\n        \r\n        addSuccess : function(message){\r\n            notifications.successes.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n            \r\n            // TODO: move timeout function here for auto hide successes\r\n        },\r\n        \r\n        addError : function(message, code, persistent, details){\r\n            code = typeof code !== undefined ? code : null;\r\n            persistent = typeof persistent !== undefined ? persistent : false;\r\n            details = typeof details !== undefined ? details : false;\r\n            \r\n            let alreadyExists = false;\r\n            let arr = notifications.errors;\r\n            for (let i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    arr[i].code = code;\r\n                    arr[i].persistent = persistent;\r\n                    arr[i].details = details;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.errors.push({\r\n                'message' : message,\r\n                'code' : code,\r\n                'count' : 1,\r\n                'persistent' : persistent,\r\n                'details' : details\r\n            });\r\n        },\r\n        \r\n        addWarning : function(message){\r\n            let alreadyExists = false;\r\n            let arr = notifications.warnings;\r\n            for (var i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.warnings.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n        },\r\n        \r\n        addInfo : function(message){\r\n            let alreadyExists = false;\r\n            let arr = notifications.infos;\r\n            for (var i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.infos.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n        }\r\n    };\r\n    \r\n    return NotificationService;\r\n});","angular.module('AmpersandApp')\r\n.controller('NotificationCenterController', function ($scope, $route, Restangular, $localStorage, NotificationService) {\r\n    \r\n    $scope.localStorage = $localStorage;\r\n    $scope.notifications = NotificationService.notifications;\r\n    \r\n    // Hide success-, error-, warnings-, info- and invariant violation messages (not signals) upon route change\r\n    $scope.$on(\"$routeChangeSuccess\", function(){\r\n        $scope.notifications.successes = [];\r\n        $scope.notifications.errors = $scope.notifications.errors.filter(function (error){\r\n            if(error.persistent){\r\n                error.persistent = false;\r\n                return true;\r\n            }\r\n            else return false;\r\n        });\r\n        $scope.notifications.warnings = [];\r\n        $scope.notifications.infos = [];\r\n        $scope.notifications.invariants = [];\r\n    });\r\n    \r\n    // Function to close notifications\r\n    $scope.closeAlert = function(alerts, index) {\r\n        alerts.splice(index, 1);\r\n    };\r\n    \r\n});\r\n","angular.module('AmpersandApp')\r\n.filter('unsafe', function($sce){\r\n    return $sce.trustAsHtml;\r\n});\r\n","angular.module('AmpersandApp')\r\n.config(function($routeProvider) {\r\n    $routeProvider\r\n        // default start page\r\n        .when('/ext/Login', {\r\n            resolveRedirectTo : ['LoginService', function (LoginService) {\r\n                if (LoginService.sessionIsLoggedIn()) {\r\n                    return '/'; // nav to home when user is already loggedin\r\n                } else {\r\n                    return; // will continue this route using controller and template below\r\n                }\r\n            }],\r\n            controller : 'LoginExtLoginController',\r\n            templateUrl : 'app/src/oauthlogin/login.html',\r\n            interfaceLabel : 'Login'\r\n        });\r\n}).requires.push('LoginModule'); // add LoginModule to dependency list\r\n\r\n// LoginModule declaration\r\nangular.module('LoginModule', ['ngRoute', 'restangular'])\r\n.controller('LoginExtLoginController', function($scope, Restangular, $location, NotificationService, LoginService){\r\n    // When already logged in, navigate to home\r\n    $scope.$watch(LoginService.sessionIsLoggedIn(), function() {\r\n        if (LoginService.sessionIsLoggedIn()) {\r\n            $location.path('/'); // goto home\r\n        }\r\n    });\r\n\r\n    Restangular.one('oauthlogin/login').get().then(\r\n        function(data){ // on success\r\n            $scope.idps = data.identityProviders;\r\n            NotificationService.updateNotifications(data.notifications);\r\n        }\r\n    );\r\n}).controller('LoginExtLogoutController', function($scope, Restangular, $location, NotificationService, NavigationBarService){\r\n    $scope.logout = function(){\r\n        Restangular.one('oauthlogin/logout').get().then(\r\n            function(data){ // success\r\n                NotificationService.updateNotifications(data.notifications);\r\n                NavigationBarService.refreshNavBar();\r\n                $location.path('/'); // goto home\r\n            }\r\n        );\r\n    };\r\n});","angular.module('AmpersandApp')\r\n.directive('myNavToInterfaces', function(){\r\n    return {\r\n        restrict : 'E',\r\n        scope : {resource : '=', target : '@'}, // '=' => two-way bind, '@' => evaluates string (use {{}} in html) \r\n        templateUrl : 'app/src/shared/myNavTo/myNavToInterfaces.html',\r\n        transclude : true\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.directive('myNavToOtherInterfaces', function(){\r\n    return {\r\n        restrict : 'E',\r\n        scope  : {resource : '=', target : '@'}, // '=' => two-way bind, '@' => evaluates string (use {{}} in html) \r\n        templateUrl : 'app/src/shared/myNavTo/myNavToOtherInterfaces.html'\r\n    };\r\n});\r\n",null]}